
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  00003f50  00003fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004bb  0080015c  0080015c  00004040  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000409c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000558  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017592  00000000  00000000  00004630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003448  00000000  00000000  0001bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004606  00000000  00000000  0001f00a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015e8  00000000  00000000  00023610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004945  00000000  00000000  00024bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000092de  00000000  00000000  0002953d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  0003281b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__ctors_end>
       4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
       c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      10:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      14:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      18:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      1c:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__vector_7>
      20:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      24:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      28:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      2c:	0c 94 51 1a 	jmp	0x34a2	; 0x34a2 <__vector_11>
      30:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      34:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      3c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      40:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__vector_16>
      44:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      48:	0c 94 98 03 	jmp	0x730	; 0x730 <__vector_18>
      4c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__vector_19>
      50:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      54:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      58:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      60:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      64:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__bad_interrupt>
      68:	71 16       	cp	r7, r17
      6a:	76 16       	cp	r7, r22
      6c:	7e 16       	cp	r7, r30
      6e:	84 16       	cp	r8, r20
      70:	86 16       	cp	r8, r22
      72:	90 16       	cp	r9, r16
      74:	96 16       	cp	r9, r22
      76:	9a 16       	cp	r9, r26

00000078 <__trampolines_end>:
      78:	7c 3c       	cpi	r23, 0xCC	; 204
      7a:	3e 5e       	subi	r19, 0xEE	; 238
      7c:	2b 3d       	cpi	r18, 0xDB	; 219
      7e:	3f 2f       	mov	r19, r31
      80:	5b 5d       	subi	r21, 0xDB	; 219
      82:	3b 2c       	mov	r3, r11
      84:	2a 22       	and	r2, r26
      86:	5c 00       	.word	0x005c	; ????

00000088 <_ZL12well2channel>:
      88:	07 08 17 18 27 28 37 38 47 48 57 58 06 09 16 19     ....'(78GHWX....
      98:	26 29 36 39 46 49 56 59 05 0a 15 1a 25 2a 35 3a     &)69FIVY....%*5:
      a8:	45 4a 55 5a 04 0b 14 1b 24 2b 34 3b 44 4b 54 5b     EJUZ....$+4;DKT[
      b8:	03 0c 13 1c 23 2c 33 3c 43 4c 53 5c 02 0d 12 1d     ....#,3<CLS\....
      c8:	22 2d 32 3d 42 4d 52 5d 01 0e 11 1e 21 2e 31 3e     "-2=BMR]....!.1>
      d8:	41 4e 51 5e 00 0f 10 1f 20 2f 30 3f 40 4f 50 5f     ANQ^.... /0?@OP_

000000e8 <port_to_mode_PGM>:
      e8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f2 <port_to_output_PGM>:
      f2:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fc <digital_pin_to_port_PGM>:
      fc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     10c:	03 03 03 03                                         ....

00000110 <digital_pin_to_bit_mask_PGM>:
     110:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     120:	04 08 10 20                                         ... 

00000124 <digital_pin_to_timer_PGM>:
     124:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     134:	00 00 00 00                                         ....

00000138 <__ctors_start>:
     138:	ff 06       	cpc	r15, r31
     13a:	89 0a       	sbc	r8, r25
     13c:	0d 1c       	adc	r0, r13

0000013e <__ctors_end>:
     13e:	11 24       	eor	r1, r1
     140:	1f be       	out	0x3f, r1	; 63
     142:	cf ef       	ldi	r28, 0xFF	; 255
     144:	d8 e0       	ldi	r29, 0x08	; 8
     146:	de bf       	out	0x3e, r29	; 62
     148:	cd bf       	out	0x3d, r28	; 61

0000014a <__do_copy_data>:
     14a:	11 e0       	ldi	r17, 0x01	; 1
     14c:	a0 e0       	ldi	r26, 0x00	; 0
     14e:	b1 e0       	ldi	r27, 0x01	; 1
     150:	e0 e5       	ldi	r30, 0x50	; 80
     152:	ff e3       	ldi	r31, 0x3F	; 63
     154:	02 c0       	rjmp	.+4      	; 0x15a <__do_copy_data+0x10>
     156:	05 90       	lpm	r0, Z+
     158:	0d 92       	st	X+, r0
     15a:	ac 35       	cpi	r26, 0x5C	; 92
     15c:	b1 07       	cpc	r27, r17
     15e:	d9 f7       	brne	.-10     	; 0x156 <__do_copy_data+0xc>

00000160 <__do_clear_bss>:
     160:	26 e0       	ldi	r18, 0x06	; 6
     162:	ac e5       	ldi	r26, 0x5C	; 92
     164:	b1 e0       	ldi	r27, 0x01	; 1
     166:	01 c0       	rjmp	.+2      	; 0x16a <.do_clear_bss_start>

00000168 <.do_clear_bss_loop>:
     168:	1d 92       	st	X+, r1

0000016a <.do_clear_bss_start>:
     16a:	a7 31       	cpi	r26, 0x17	; 23
     16c:	b2 07       	cpc	r27, r18
     16e:	e1 f7       	brne	.-8      	; 0x168 <.do_clear_bss_loop>

00000170 <__do_global_ctors>:
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	cf e9       	ldi	r28, 0x9F	; 159
     174:	d0 e0       	ldi	r29, 0x00	; 0
     176:	04 c0       	rjmp	.+8      	; 0x180 <__do_global_ctors+0x10>
     178:	21 97       	sbiw	r28, 0x01	; 1
     17a:	fe 01       	movw	r30, r28
     17c:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__tablejump2__>
     180:	cc 39       	cpi	r28, 0x9C	; 156
     182:	d1 07       	cpc	r29, r17
     184:	c9 f7       	brne	.-14     	; 0x178 <__do_global_ctors+0x8>
     186:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <main>
     18a:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <_exit>

0000018e <__bad_interrupt>:
     18e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000192 <_ZN5Print5writeEPKhj>:
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	6c 01       	movw	r12, r24
     1a4:	7a 01       	movw	r14, r20
     1a6:	8b 01       	movw	r16, r22
     1a8:	c0 e0       	ldi	r28, 0x00	; 0
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	ce 15       	cp	r28, r14
     1ae:	df 05       	cpc	r29, r15
     1b0:	81 f0       	breq	.+32     	; 0x1d2 <_ZN5Print5writeEPKhj+0x40>
     1b2:	d8 01       	movw	r26, r16
     1b4:	6d 91       	ld	r22, X+
     1b6:	8d 01       	movw	r16, r26
     1b8:	d6 01       	movw	r26, r12
     1ba:	ed 91       	ld	r30, X+
     1bc:	fc 91       	ld	r31, X
     1be:	01 90       	ld	r0, Z+
     1c0:	f0 81       	ld	r31, Z
     1c2:	e0 2d       	mov	r30, r0
     1c4:	c6 01       	movw	r24, r12
     1c6:	09 95       	icall
     1c8:	89 2b       	or	r24, r25
     1ca:	11 f0       	breq	.+4      	; 0x1d0 <_ZN5Print5writeEPKhj+0x3e>
     1cc:	21 96       	adiw	r28, 0x01	; 1
     1ce:	ee cf       	rjmp	.-36     	; 0x1ac <_ZN5Print5writeEPKhj+0x1a>
     1d0:	7e 01       	movw	r14, r28
     1d2:	c7 01       	movw	r24, r14
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	1f 91       	pop	r17
     1da:	0f 91       	pop	r16
     1dc:	ff 90       	pop	r15
     1de:	ef 90       	pop	r14
     1e0:	df 90       	pop	r13
     1e2:	cf 90       	pop	r12
     1e4:	08 95       	ret

000001e6 <_ZN14HardwareSerial17availableForWriteEv>:
     1e6:	fc 01       	movw	r30, r24
     1e8:	53 8d       	ldd	r21, Z+27	; 0x1b
     1ea:	44 8d       	ldd	r20, Z+28	; 0x1c
     1ec:	25 2f       	mov	r18, r21
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	84 2f       	mov	r24, r20
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	82 1b       	sub	r24, r18
     1f6:	93 0b       	sbc	r25, r19
     1f8:	54 17       	cp	r21, r20
     1fa:	10 f0       	brcs	.+4      	; 0x200 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     1fc:	cf 96       	adiw	r24, 0x3f	; 63
     1fe:	08 95       	ret
     200:	01 97       	sbiw	r24, 0x01	; 1
     202:	08 95       	ret

00000204 <_ZN14HardwareSerial4readEv>:
     204:	fc 01       	movw	r30, r24
     206:	91 8d       	ldd	r25, Z+25	; 0x19
     208:	82 8d       	ldd	r24, Z+26	; 0x1a
     20a:	98 17       	cp	r25, r24
     20c:	61 f0       	breq	.+24     	; 0x226 <_ZN14HardwareSerial4readEv+0x22>
     20e:	82 8d       	ldd	r24, Z+26	; 0x1a
     210:	df 01       	movw	r26, r30
     212:	a8 0f       	add	r26, r24
     214:	b1 1d       	adc	r27, r1
     216:	5d 96       	adiw	r26, 0x1d	; 29
     218:	8c 91       	ld	r24, X
     21a:	92 8d       	ldd	r25, Z+26	; 0x1a
     21c:	9f 5f       	subi	r25, 0xFF	; 255
     21e:	9f 73       	andi	r25, 0x3F	; 63
     220:	92 8f       	std	Z+26, r25	; 0x1a
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	08 95       	ret
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	9f ef       	ldi	r25, 0xFF	; 255
     22a:	08 95       	ret

0000022c <_ZN14HardwareSerial4peekEv>:
     22c:	fc 01       	movw	r30, r24
     22e:	91 8d       	ldd	r25, Z+25	; 0x19
     230:	82 8d       	ldd	r24, Z+26	; 0x1a
     232:	98 17       	cp	r25, r24
     234:	31 f0       	breq	.+12     	; 0x242 <_ZN14HardwareSerial4peekEv+0x16>
     236:	82 8d       	ldd	r24, Z+26	; 0x1a
     238:	e8 0f       	add	r30, r24
     23a:	f1 1d       	adc	r31, r1
     23c:	85 8d       	ldd	r24, Z+29	; 0x1d
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	08 95       	ret
     242:	8f ef       	ldi	r24, 0xFF	; 255
     244:	9f ef       	ldi	r25, 0xFF	; 255
     246:	08 95       	ret

00000248 <_ZN14HardwareSerial9availableEv>:
     248:	fc 01       	movw	r30, r24
     24a:	91 8d       	ldd	r25, Z+25	; 0x19
     24c:	22 8d       	ldd	r18, Z+26	; 0x1a
     24e:	89 2f       	mov	r24, r25
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	80 5c       	subi	r24, 0xC0	; 192
     254:	9f 4f       	sbci	r25, 0xFF	; 255
     256:	82 1b       	sub	r24, r18
     258:	91 09       	sbc	r25, r1
     25a:	8f 73       	andi	r24, 0x3F	; 63
     25c:	99 27       	eor	r25, r25
     25e:	08 95       	ret

00000260 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
     260:	fc 01       	movw	r30, r24
     262:	84 8d       	ldd	r24, Z+28	; 0x1c
     264:	df 01       	movw	r26, r30
     266:	a8 0f       	add	r26, r24
     268:	b1 1d       	adc	r27, r1
     26a:	a3 5a       	subi	r26, 0xA3	; 163
     26c:	bf 4f       	sbci	r27, 0xFF	; 255
     26e:	2c 91       	ld	r18, X
     270:	84 8d       	ldd	r24, Z+28	; 0x1c
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	01 96       	adiw	r24, 0x01	; 1
     276:	8f 73       	andi	r24, 0x3F	; 63
     278:	99 27       	eor	r25, r25
     27a:	84 8f       	std	Z+28, r24	; 0x1c
     27c:	a6 89       	ldd	r26, Z+22	; 0x16
     27e:	b7 89       	ldd	r27, Z+23	; 0x17
     280:	2c 93       	st	X, r18
     282:	a0 89       	ldd	r26, Z+16	; 0x10
     284:	b1 89       	ldd	r27, Z+17	; 0x11
     286:	8c 91       	ld	r24, X
     288:	83 70       	andi	r24, 0x03	; 3
     28a:	80 64       	ori	r24, 0x40	; 64
     28c:	8c 93       	st	X, r24
     28e:	93 8d       	ldd	r25, Z+27	; 0x1b
     290:	84 8d       	ldd	r24, Z+28	; 0x1c
     292:	98 13       	cpse	r25, r24
     294:	06 c0       	rjmp	.+12     	; 0x2a2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
     296:	02 88       	ldd	r0, Z+18	; 0x12
     298:	f3 89       	ldd	r31, Z+19	; 0x13
     29a:	e0 2d       	mov	r30, r0
     29c:	80 81       	ld	r24, Z
     29e:	8f 7d       	andi	r24, 0xDF	; 223
     2a0:	80 83       	st	Z, r24
     2a2:	08 95       	ret

000002a4 <_ZN14HardwareSerial5writeEh>:
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	ec 01       	movw	r28, r24
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	88 8f       	std	Y+24, r24	; 0x18
     2b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     2b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2ba:	98 13       	cpse	r25, r24
     2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <_ZN14HardwareSerial5writeEh+0x24>
     2be:	e8 89       	ldd	r30, Y+16	; 0x10
     2c0:	f9 89       	ldd	r31, Y+17	; 0x11
     2c2:	80 81       	ld	r24, Z
     2c4:	85 fd       	sbrc	r24, 5
     2c6:	26 c0       	rjmp	.+76     	; 0x314 <_ZN14HardwareSerial5writeEh+0x70>
     2c8:	f6 2e       	mov	r15, r22
     2ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
     2cc:	10 e0       	ldi	r17, 0x00	; 0
     2ce:	0f 5f       	subi	r16, 0xFF	; 255
     2d0:	1f 4f       	sbci	r17, 0xFF	; 255
     2d2:	0f 73       	andi	r16, 0x3F	; 63
     2d4:	11 27       	eor	r17, r17
     2d6:	e0 2e       	mov	r14, r16
     2d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2da:	e8 12       	cpse	r14, r24
     2dc:	0c c0       	rjmp	.+24     	; 0x2f6 <_ZN14HardwareSerial5writeEh+0x52>
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	07 fc       	sbrc	r0, 7
     2e2:	fa cf       	rjmp	.-12     	; 0x2d8 <_ZN14HardwareSerial5writeEh+0x34>
     2e4:	e8 89       	ldd	r30, Y+16	; 0x10
     2e6:	f9 89       	ldd	r31, Y+17	; 0x11
     2e8:	80 81       	ld	r24, Z
     2ea:	85 ff       	sbrs	r24, 5
     2ec:	f5 cf       	rjmp	.-22     	; 0x2d8 <_ZN14HardwareSerial5writeEh+0x34>
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 30 01 	call	0x260	; 0x260 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     2f4:	f1 cf       	rjmp	.-30     	; 0x2d8 <_ZN14HardwareSerial5writeEh+0x34>
     2f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2f8:	fe 01       	movw	r30, r28
     2fa:	e8 0f       	add	r30, r24
     2fc:	f1 1d       	adc	r31, r1
     2fe:	e3 5a       	subi	r30, 0xA3	; 163
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	f0 82       	st	Z, r15
     304:	9f b7       	in	r25, 0x3f	; 63
     306:	f8 94       	cli
     308:	0b 8f       	std	Y+27, r16	; 0x1b
     30a:	ea 89       	ldd	r30, Y+18	; 0x12
     30c:	fb 89       	ldd	r31, Y+19	; 0x13
     30e:	80 81       	ld	r24, Z
     310:	80 62       	ori	r24, 0x20	; 32
     312:	0a c0       	rjmp	.+20     	; 0x328 <_ZN14HardwareSerial5writeEh+0x84>
     314:	9f b7       	in	r25, 0x3f	; 63
     316:	f8 94       	cli
     318:	ee 89       	ldd	r30, Y+22	; 0x16
     31a:	ff 89       	ldd	r31, Y+23	; 0x17
     31c:	60 83       	st	Z, r22
     31e:	e8 89       	ldd	r30, Y+16	; 0x10
     320:	f9 89       	ldd	r31, Y+17	; 0x11
     322:	80 81       	ld	r24, Z
     324:	83 70       	andi	r24, 0x03	; 3
     326:	80 64       	ori	r24, 0x40	; 64
     328:	80 83       	st	Z, r24
     32a:	9f bf       	out	0x3f, r25	; 63
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	1f 91       	pop	r17
     336:	0f 91       	pop	r16
     338:	ff 90       	pop	r15
     33a:	ef 90       	pop	r14
     33c:	08 95       	ret

0000033e <_ZN14HardwareSerial5flushEv>:
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	ec 01       	movw	r28, r24
     344:	88 8d       	ldd	r24, Y+24	; 0x18
     346:	88 23       	and	r24, r24
     348:	c9 f0       	breq	.+50     	; 0x37c <_ZN14HardwareSerial5flushEv+0x3e>
     34a:	ea 89       	ldd	r30, Y+18	; 0x12
     34c:	fb 89       	ldd	r31, Y+19	; 0x13
     34e:	80 81       	ld	r24, Z
     350:	85 fd       	sbrc	r24, 5
     352:	05 c0       	rjmp	.+10     	; 0x35e <_ZN14HardwareSerial5flushEv+0x20>
     354:	a8 89       	ldd	r26, Y+16	; 0x10
     356:	b9 89       	ldd	r27, Y+17	; 0x11
     358:	8c 91       	ld	r24, X
     35a:	86 fd       	sbrc	r24, 6
     35c:	0f c0       	rjmp	.+30     	; 0x37c <_ZN14HardwareSerial5flushEv+0x3e>
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	07 fc       	sbrc	r0, 7
     362:	f5 cf       	rjmp	.-22     	; 0x34e <_ZN14HardwareSerial5flushEv+0x10>
     364:	80 81       	ld	r24, Z
     366:	85 ff       	sbrs	r24, 5
     368:	f2 cf       	rjmp	.-28     	; 0x34e <_ZN14HardwareSerial5flushEv+0x10>
     36a:	a8 89       	ldd	r26, Y+16	; 0x10
     36c:	b9 89       	ldd	r27, Y+17	; 0x11
     36e:	8c 91       	ld	r24, X
     370:	85 ff       	sbrs	r24, 5
     372:	ed cf       	rjmp	.-38     	; 0x34e <_ZN14HardwareSerial5flushEv+0x10>
     374:	ce 01       	movw	r24, r28
     376:	0e 94 30 01 	call	0x260	; 0x260 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     37a:	e7 cf       	rjmp	.-50     	; 0x34a <_ZN14HardwareSerial5flushEv+0xc>
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <_ZN5Print5writeEPKc.constprop.2>:
     382:	61 15       	cp	r22, r1
     384:	71 05       	cpc	r23, r1
     386:	79 f0       	breq	.+30     	; 0x3a6 <_ZN5Print5writeEPKc.constprop.2+0x24>
     388:	fb 01       	movw	r30, r22
     38a:	01 90       	ld	r0, Z+
     38c:	00 20       	and	r0, r0
     38e:	e9 f7       	brne	.-6      	; 0x38a <_ZN5Print5writeEPKc.constprop.2+0x8>
     390:	31 97       	sbiw	r30, 0x01	; 1
     392:	af 01       	movw	r20, r30
     394:	46 1b       	sub	r20, r22
     396:	57 0b       	sbc	r21, r23
     398:	dc 01       	movw	r26, r24
     39a:	ed 91       	ld	r30, X+
     39c:	fc 91       	ld	r31, X
     39e:	02 80       	ldd	r0, Z+2	; 0x02
     3a0:	f3 81       	ldd	r31, Z+3	; 0x03
     3a2:	e0 2d       	mov	r30, r0
     3a4:	09 94       	ijmp
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	08 95       	ret

000003ac <__cxa_pure_virtual>:
     3ac:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <abort>

000003b0 <digitalWrite>:
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	ec 5d       	subi	r30, 0xDC	; 220
     3b6:	fe 4f       	sbci	r31, 0xFE	; 254
     3b8:	24 91       	lpm	r18, Z
     3ba:	fc 01       	movw	r30, r24
     3bc:	e0 5f       	subi	r30, 0xF0	; 240
     3be:	fe 4f       	sbci	r31, 0xFE	; 254
     3c0:	34 91       	lpm	r19, Z
     3c2:	fc 01       	movw	r30, r24
     3c4:	e4 50       	subi	r30, 0x04	; 4
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	e4 91       	lpm	r30, Z
     3ca:	ee 23       	and	r30, r30
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <digitalWrite+0x20>
     3ce:	3c c0       	rjmp	.+120    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     3d0:	22 23       	and	r18, r18
     3d2:	39 f1       	breq	.+78     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3d4:	23 30       	cpi	r18, 0x03	; 3
     3d6:	91 f0       	breq	.+36     	; 0x3fc <digitalWrite+0x4c>
     3d8:	38 f4       	brcc	.+14     	; 0x3e8 <digitalWrite+0x38>
     3da:	21 30       	cpi	r18, 0x01	; 1
     3dc:	a9 f0       	breq	.+42     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3de:	22 30       	cpi	r18, 0x02	; 2
     3e0:	01 f5       	brne	.+64     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3e2:	84 b5       	in	r24, 0x24	; 36
     3e4:	8f 7d       	andi	r24, 0xDF	; 223
     3e6:	12 c0       	rjmp	.+36     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3e8:	27 30       	cpi	r18, 0x07	; 7
     3ea:	91 f0       	breq	.+36     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3ec:	28 30       	cpi	r18, 0x08	; 8
     3ee:	a1 f0       	breq	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f0:	24 30       	cpi	r18, 0x04	; 4
     3f2:	b9 f4       	brne	.+46     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     3f8:	8f 7d       	andi	r24, 0xDF	; 223
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     400:	8f 77       	andi	r24, 0x7F	; 127
     402:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     406:	0d c0       	rjmp	.+26     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     408:	84 b5       	in	r24, 0x24	; 36
     40a:	8f 77       	andi	r24, 0x7F	; 127
     40c:	84 bd       	out	0x24, r24	; 36
     40e:	09 c0       	rjmp	.+18     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     410:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     414:	8f 77       	andi	r24, 0x7F	; 127
     416:	03 c0       	rjmp	.+6      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     418:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     41c:	8f 7d       	andi	r24, 0xDF	; 223
     41e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	ee 0f       	add	r30, r30
     426:	ff 1f       	adc	r31, r31
     428:	ee 50       	subi	r30, 0x0E	; 14
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	a5 91       	lpm	r26, Z+
     42e:	b4 91       	lpm	r27, Z
     430:	9f b7       	in	r25, 0x3f	; 63
     432:	f8 94       	cli
     434:	61 11       	cpse	r22, r1
     436:	04 c0       	rjmp	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     438:	8c 91       	ld	r24, X
     43a:	30 95       	com	r19
     43c:	38 23       	and	r19, r24
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	ec 91       	ld	r30, X
     442:	3e 2b       	or	r19, r30
     444:	3c 93       	st	X, r19
     446:	9f bf       	out	0x3f, r25	; 63
     448:	08 95       	ret

0000044a <pinMode>:
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	fc 01       	movw	r30, r24
     452:	e0 5f       	subi	r30, 0xF0	; 240
     454:	fe 4f       	sbci	r31, 0xFE	; 254
     456:	24 91       	lpm	r18, Z
     458:	fc 01       	movw	r30, r24
     45a:	e4 50       	subi	r30, 0x04	; 4
     45c:	ff 4f       	sbci	r31, 0xFF	; 255
     45e:	84 91       	lpm	r24, Z
     460:	88 23       	and	r24, r24
     462:	61 f1       	breq	.+88     	; 0x4bc <pinMode+0x72>
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	fc 01       	movw	r30, r24
     46c:	e8 51       	subi	r30, 0x18	; 24
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	c5 91       	lpm	r28, Z+
     472:	d4 91       	lpm	r29, Z
     474:	fc 01       	movw	r30, r24
     476:	ee 50       	subi	r30, 0x0E	; 14
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	a5 91       	lpm	r26, Z+
     47c:	b4 91       	lpm	r27, Z
     47e:	61 11       	cpse	r22, r1
     480:	09 c0       	rjmp	.+18     	; 0x494 <pinMode+0x4a>
     482:	9f b7       	in	r25, 0x3f	; 63
     484:	f8 94       	cli
     486:	88 81       	ld	r24, Y
     488:	20 95       	com	r18
     48a:	82 23       	and	r24, r18
     48c:	88 83       	st	Y, r24
     48e:	ec 91       	ld	r30, X
     490:	2e 23       	and	r18, r30
     492:	0b c0       	rjmp	.+22     	; 0x4aa <pinMode+0x60>
     494:	62 30       	cpi	r22, 0x02	; 2
     496:	61 f4       	brne	.+24     	; 0x4b0 <pinMode+0x66>
     498:	9f b7       	in	r25, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	88 81       	ld	r24, Y
     49e:	32 2f       	mov	r19, r18
     4a0:	30 95       	com	r19
     4a2:	83 23       	and	r24, r19
     4a4:	88 83       	st	Y, r24
     4a6:	ec 91       	ld	r30, X
     4a8:	2e 2b       	or	r18, r30
     4aa:	2c 93       	st	X, r18
     4ac:	9f bf       	out	0x3f, r25	; 63
     4ae:	06 c0       	rjmp	.+12     	; 0x4bc <pinMode+0x72>
     4b0:	8f b7       	in	r24, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	e8 81       	ld	r30, Y
     4b6:	2e 2b       	or	r18, r30
     4b8:	28 83       	st	Y, r18
     4ba:	8f bf       	out	0x3f, r24	; 63
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <millis>:
     4c2:	2f b7       	in	r18, 0x3f	; 63
     4c4:	f8 94       	cli
     4c6:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <timer0_millis>
     4ca:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <timer0_millis+0x1>
     4ce:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <timer0_millis+0x2>
     4d2:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <timer0_millis+0x3>
     4d6:	2f bf       	out	0x3f, r18	; 63
     4d8:	08 95       	ret

000004da <__vector_16>:
     4da:	1f 92       	push	r1
     4dc:	0f 92       	push	r0
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	0f 92       	push	r0
     4e2:	11 24       	eor	r1, r1
     4e4:	2f 93       	push	r18
     4e6:	3f 93       	push	r19
     4e8:	8f 93       	push	r24
     4ea:	9f 93       	push	r25
     4ec:	af 93       	push	r26
     4ee:	bf 93       	push	r27
     4f0:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <timer0_millis>
     4f4:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <timer0_millis+0x1>
     4f8:	a0 91 00 02 	lds	r26, 0x0200	; 0x800200 <timer0_millis+0x2>
     4fc:	b0 91 01 02 	lds	r27, 0x0201	; 0x800201 <timer0_millis+0x3>
     500:	30 91 fd 01 	lds	r19, 0x01FD	; 0x8001fd <timer0_fract>
     504:	23 e0       	ldi	r18, 0x03	; 3
     506:	23 0f       	add	r18, r19
     508:	2d 37       	cpi	r18, 0x7D	; 125
     50a:	20 f4       	brcc	.+8      	; 0x514 <__vector_16+0x3a>
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	a1 1d       	adc	r26, r1
     510:	b1 1d       	adc	r27, r1
     512:	05 c0       	rjmp	.+10     	; 0x51e <__vector_16+0x44>
     514:	26 e8       	ldi	r18, 0x86	; 134
     516:	23 0f       	add	r18, r19
     518:	02 96       	adiw	r24, 0x02	; 2
     51a:	a1 1d       	adc	r26, r1
     51c:	b1 1d       	adc	r27, r1
     51e:	20 93 fd 01 	sts	0x01FD, r18	; 0x8001fd <timer0_fract>
     522:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <timer0_millis>
     526:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <timer0_millis+0x1>
     52a:	a0 93 00 02 	sts	0x0200, r26	; 0x800200 <timer0_millis+0x2>
     52e:	b0 93 01 02 	sts	0x0201, r27	; 0x800201 <timer0_millis+0x3>
     532:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <timer0_overflow_count>
     536:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <timer0_overflow_count+0x1>
     53a:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <timer0_overflow_count+0x2>
     53e:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <timer0_overflow_count+0x3>
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	a1 1d       	adc	r26, r1
     546:	b1 1d       	adc	r27, r1
     548:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <timer0_overflow_count>
     54c:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <timer0_overflow_count+0x1>
     550:	a0 93 fb 01 	sts	0x01FB, r26	; 0x8001fb <timer0_overflow_count+0x2>
     554:	b0 93 fc 01 	sts	0x01FC, r27	; 0x8001fc <timer0_overflow_count+0x3>
     558:	bf 91       	pop	r27
     55a:	af 91       	pop	r26
     55c:	9f 91       	pop	r25
     55e:	8f 91       	pop	r24
     560:	3f 91       	pop	r19
     562:	2f 91       	pop	r18
     564:	0f 90       	pop	r0
     566:	0f be       	out	0x3f, r0	; 63
     568:	0f 90       	pop	r0
     56a:	1f 90       	pop	r1
     56c:	18 95       	reti

0000056e <_ZN6Stream9readBytesEPcj>:
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	ec 01       	movw	r28, r24
     588:	6a 01       	movw	r12, r20
     58a:	7b 01       	movw	r14, r22
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	10 e0       	ldi	r17, 0x00	; 0
     590:	0c 15       	cp	r16, r12
     592:	1d 05       	cpc	r17, r13
     594:	61 f1       	breq	.+88     	; 0x5ee <_ZN6Stream9readBytesEPcj+0x80>
     596:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
     59a:	68 87       	std	Y+8, r22	; 0x08
     59c:	79 87       	std	Y+9, r23	; 0x09
     59e:	8a 87       	std	Y+10, r24	; 0x0a
     5a0:	9b 87       	std	Y+11, r25	; 0x0b
     5a2:	e8 81       	ld	r30, Y
     5a4:	f9 81       	ldd	r31, Y+1	; 0x01
     5a6:	02 84       	ldd	r0, Z+10	; 0x0a
     5a8:	f3 85       	ldd	r31, Z+11	; 0x0b
     5aa:	e0 2d       	mov	r30, r0
     5ac:	ce 01       	movw	r24, r28
     5ae:	09 95       	icall
     5b0:	97 ff       	sbrs	r25, 7
     5b2:	17 c0       	rjmp	.+46     	; 0x5e2 <_ZN6Stream9readBytesEPcj+0x74>
     5b4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
     5b8:	88 84       	ldd	r8, Y+8	; 0x08
     5ba:	99 84       	ldd	r9, Y+9	; 0x09
     5bc:	aa 84       	ldd	r10, Y+10	; 0x0a
     5be:	bb 84       	ldd	r11, Y+11	; 0x0b
     5c0:	dc 01       	movw	r26, r24
     5c2:	cb 01       	movw	r24, r22
     5c4:	88 19       	sub	r24, r8
     5c6:	99 09       	sbc	r25, r9
     5c8:	aa 09       	sbc	r26, r10
     5ca:	bb 09       	sbc	r27, r11
     5cc:	8c 80       	ldd	r8, Y+4	; 0x04
     5ce:	9d 80       	ldd	r9, Y+5	; 0x05
     5d0:	ae 80       	ldd	r10, Y+6	; 0x06
     5d2:	bf 80       	ldd	r11, Y+7	; 0x07
     5d4:	88 15       	cp	r24, r8
     5d6:	99 05       	cpc	r25, r9
     5d8:	aa 05       	cpc	r26, r10
     5da:	bb 05       	cpc	r27, r11
     5dc:	10 f3       	brcs	.-60     	; 0x5a2 <_ZN6Stream9readBytesEPcj+0x34>
     5de:	68 01       	movw	r12, r16
     5e0:	06 c0       	rjmp	.+12     	; 0x5ee <_ZN6Stream9readBytesEPcj+0x80>
     5e2:	f7 01       	movw	r30, r14
     5e4:	81 93       	st	Z+, r24
     5e6:	7f 01       	movw	r14, r30
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
     5ea:	1f 4f       	sbci	r17, 0xFF	; 255
     5ec:	d1 cf       	rjmp	.-94     	; 0x590 <_ZN6Stream9readBytesEPcj+0x22>
     5ee:	c6 01       	movw	r24, r12
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	08 95       	ret

0000060a <_ZN5Print7printlnEv>:
     60a:	68 e5       	ldi	r22, 0x58	; 88
     60c:	71 e0       	ldi	r23, 0x01	; 1
     60e:	0c 94 c1 01 	jmp	0x382	; 0x382 <_ZN5Print5writeEPKc.constprop.2>

00000612 <_ZN5Print5printEmi>:
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	a1 97       	sbiw	r28, 0x21	; 33
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	5c 01       	movw	r10, r24
     638:	f4 2f       	mov	r31, r20
     63a:	e5 2f       	mov	r30, r21
     63c:	cb 01       	movw	r24, r22
     63e:	21 15       	cp	r18, r1
     640:	31 05       	cpc	r19, r1
     642:	59 f4       	brne	.+22     	; 0x65a <_ZN5Print5printEmi+0x48>
     644:	d5 01       	movw	r26, r10
     646:	8d 91       	ld	r24, X+
     648:	9c 91       	ld	r25, X
     64a:	dc 01       	movw	r26, r24
     64c:	2d 91       	ld	r18, X+
     64e:	3c 91       	ld	r19, X
     650:	64 2f       	mov	r22, r20
     652:	c5 01       	movw	r24, r10
     654:	f9 01       	movw	r30, r18
     656:	09 95       	icall
     658:	25 c0       	rjmp	.+74     	; 0x6a4 <_ZN5Print5printEmi+0x92>
     65a:	19 a2       	std	Y+33, r1	; 0x21
     65c:	22 30       	cpi	r18, 0x02	; 2
     65e:	08 f4       	brcc	.+2      	; 0x662 <_ZN5Print5printEmi+0x50>
     660:	2a e0       	ldi	r18, 0x0A	; 10
     662:	8e 01       	movw	r16, r28
     664:	0f 5d       	subi	r16, 0xDF	; 223
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	c2 2e       	mov	r12, r18
     66a:	d1 2c       	mov	r13, r1
     66c:	e1 2c       	mov	r14, r1
     66e:	f1 2c       	mov	r15, r1
     670:	6f 2f       	mov	r22, r31
     672:	7e 2f       	mov	r23, r30
     674:	a7 01       	movw	r20, r14
     676:	96 01       	movw	r18, r12
     678:	0e 94 df 1c 	call	0x39be	; 0x39be <__udivmodsi4>
     67c:	f2 2f       	mov	r31, r18
     67e:	e3 2f       	mov	r30, r19
     680:	ca 01       	movw	r24, r20
     682:	01 50       	subi	r16, 0x01	; 1
     684:	11 09       	sbc	r17, r1
     686:	6a 30       	cpi	r22, 0x0A	; 10
     688:	14 f4       	brge	.+4      	; 0x68e <_ZN5Print5printEmi+0x7c>
     68a:	60 5d       	subi	r22, 0xD0	; 208
     68c:	01 c0       	rjmp	.+2      	; 0x690 <_ZN5Print5printEmi+0x7e>
     68e:	69 5c       	subi	r22, 0xC9	; 201
     690:	d8 01       	movw	r26, r16
     692:	6c 93       	st	X, r22
     694:	23 2b       	or	r18, r19
     696:	24 2b       	or	r18, r20
     698:	25 2b       	or	r18, r21
     69a:	51 f7       	brne	.-44     	; 0x670 <_ZN5Print5printEmi+0x5e>
     69c:	b8 01       	movw	r22, r16
     69e:	c5 01       	movw	r24, r10
     6a0:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN5Print5writeEPKc.constprop.2>
     6a4:	a1 96       	adiw	r28, 0x21	; 33
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	f8 94       	cli
     6aa:	de bf       	out	0x3e, r29	; 62
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	cd bf       	out	0x3d, r28	; 61
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	cf 90       	pop	r12
     6c0:	bf 90       	pop	r11
     6c2:	af 90       	pop	r10
     6c4:	08 95       	ret

000006c6 <_ZN5Print5printEji>:
     6c6:	9a 01       	movw	r18, r20
     6c8:	ab 01       	movw	r20, r22
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	0c 94 09 03 	jmp	0x612	; 0x612 <_ZN5Print5printEmi>

000006d2 <_ZN5Print5printEc>:
     6d2:	dc 01       	movw	r26, r24
     6d4:	ed 91       	ld	r30, X+
     6d6:	fc 91       	ld	r31, X
     6d8:	01 90       	ld	r0, Z+
     6da:	f0 81       	ld	r31, Z
     6dc:	e0 2d       	mov	r30, r0
     6de:	09 94       	ijmp

000006e0 <_ZN5Print5printEPKc>:
     6e0:	0c 94 c1 01 	jmp	0x382	; 0x382 <_ZN5Print5writeEPKc.constprop.2>

000006e4 <__vector_19>:
     6e4:	1f 92       	push	r1
     6e6:	0f 92       	push	r0
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	0f 92       	push	r0
     6ec:	11 24       	eor	r1, r1
     6ee:	2f 93       	push	r18
     6f0:	3f 93       	push	r19
     6f2:	4f 93       	push	r20
     6f4:	5f 93       	push	r21
     6f6:	6f 93       	push	r22
     6f8:	7f 93       	push	r23
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	af 93       	push	r26
     700:	bf 93       	push	r27
     702:	ef 93       	push	r30
     704:	ff 93       	push	r31
     706:	8c e5       	ldi	r24, 0x5C	; 92
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	0e 94 30 01 	call	0x260	; 0x260 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	7f 91       	pop	r23
     71c:	6f 91       	pop	r22
     71e:	5f 91       	pop	r21
     720:	4f 91       	pop	r20
     722:	3f 91       	pop	r19
     724:	2f 91       	pop	r18
     726:	0f 90       	pop	r0
     728:	0f be       	out	0x3f, r0	; 63
     72a:	0f 90       	pop	r0
     72c:	1f 90       	pop	r1
     72e:	18 95       	reti

00000730 <__vector_18>:
     730:	1f 92       	push	r1
     732:	0f 92       	push	r0
     734:	0f b6       	in	r0, 0x3f	; 63
     736:	0f 92       	push	r0
     738:	11 24       	eor	r1, r1
     73a:	2f 93       	push	r18
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	ef 93       	push	r30
     742:	ff 93       	push	r31
     744:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <__data_end+0x10>
     748:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <__data_end+0x11>
     74c:	80 81       	ld	r24, Z
     74e:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <__data_end+0x16>
     752:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <__data_end+0x17>
     756:	82 fd       	sbrc	r24, 2
     758:	12 c0       	rjmp	.+36     	; 0x77e <__vector_18+0x4e>
     75a:	90 81       	ld	r25, Z
     75c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <__data_end+0x19>
     760:	8f 5f       	subi	r24, 0xFF	; 255
     762:	8f 73       	andi	r24, 0x3F	; 63
     764:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <__data_end+0x1a>
     768:	82 17       	cp	r24, r18
     76a:	51 f0       	breq	.+20     	; 0x780 <__vector_18+0x50>
     76c:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <__data_end+0x19>
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	e4 5a       	subi	r30, 0xA4	; 164
     774:	fe 4f       	sbci	r31, 0xFE	; 254
     776:	95 8f       	std	Z+29, r25	; 0x1d
     778:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <__data_end+0x19>
     77c:	01 c0       	rjmp	.+2      	; 0x780 <__vector_18+0x50>
     77e:	80 81       	ld	r24, Z
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	2f 91       	pop	r18
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	0f 90       	pop	r0
     790:	1f 90       	pop	r1
     792:	18 95       	reti

00000794 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     794:	cf 93       	push	r28
  uint8_t sreg = SREG;
     796:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     798:	f8 94       	cli
  if (!initialized) {
     79a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZN8SPIClass11initializedE>
     79e:	81 11       	cpse	r24, r1
     7a0:	27 c0       	rjmp	.+78     	; 0x7f0 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     7a2:	e6 e0       	ldi	r30, 0x06	; 6
     7a4:	f1 e0       	ldi	r31, 0x01	; 1
     7a6:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
     7a8:	ea e1       	ldi	r30, 0x1A	; 26
     7aa:	f1 e0       	ldi	r31, 0x01	; 1
     7ac:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	ee 0f       	add	r30, r30
     7b4:	ff 1f       	adc	r31, r31
     7b6:	e8 51       	subi	r30, 0x18	; 24
     7b8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ba:	a5 91       	lpm	r26, Z+
     7bc:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     7be:	ec 91       	ld	r30, X
     7c0:	e9 23       	and	r30, r25
     7c2:	21 f4       	brne	.+8      	; 0x7cc <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	8a e0       	ldi	r24, 0x0A	; 10
     7c8:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     7cc:	61 e0       	ldi	r22, 0x01	; 1
     7ce:	8a e0       	ldi	r24, 0x0A	; 10
     7d0:	0e 94 25 02 	call	0x44a	; 0x44a <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     7d4:	8c b5       	in	r24, 0x2c	; 44
     7d6:	80 61       	ori	r24, 0x10	; 16
     7d8:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     7da:	8c b5       	in	r24, 0x2c	; 44
     7dc:	80 64       	ori	r24, 0x40	; 64
     7de:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	8d e0       	ldi	r24, 0x0D	; 13
     7e4:	0e 94 25 02 	call	0x44a	; 0x44a <pinMode>
    pinMode(MOSI, OUTPUT);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	8b e0       	ldi	r24, 0x0B	; 11
     7ec:	0e 94 25 02 	call	0x44a	; 0x44a <pinMode>
  }
  initialized++; // reference count
     7f0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <_ZN8SPIClass11initializedE>
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <_ZN8SPIClass11initializedE>
  SREG = sreg;
     7fa:	cf bf       	out	0x3f, r28	; 63
}
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	08 95       	ret

00000806 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     806:	08 95       	ret

00000808 <_ZN5SDLib4File5writeEh>:
// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
     812:	69 83       	std	Y+1, r22	; 0x01
     814:	dc 01       	movw	r26, r24
     816:	ed 91       	ld	r30, X+
     818:	fc 91       	ld	r31, X
     81a:	02 80       	ldd	r0, Z+2	; 0x02
     81c:	f3 81       	ldd	r31, Z+3	; 0x03
     81e:	e0 2d       	mov	r30, r0
     820:	41 e0       	ldi	r20, 0x01	; 1
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	be 01       	movw	r22, r28
     826:	6f 5f       	subi	r22, 0xFF	; 255
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	09 95       	icall
     82c:	0f 90       	pop	r0
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <_ZN5SDLib4File5writeEPKhj>:
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	ec 01       	movw	r28, r24
     83a:	89 8d       	ldd	r24, Y+25	; 0x19
     83c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	39 f4       	brne	.+14     	; 0x850 <_ZN5SDLib4File5writeEPKhj+0x1c>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9b 83       	std	Y+3, r25	; 0x03
     848:	8a 83       	std	Y+2, r24	; 0x02
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0b c0       	rjmp	.+22     	; 0x866 <_ZN5SDLib4File5writeEPKhj+0x32>
     850:	fc 01       	movw	r30, r24
     852:	13 82       	std	Z+3, r1	; 0x03
     854:	12 82       	std	Z+2, r1	; 0x02
     856:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN6SdFile5writeEPKvj>
     85a:	e9 8d       	ldd	r30, Y+25	; 0x19
     85c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     85e:	22 81       	ldd	r18, Z+2	; 0x02
     860:	33 81       	ldd	r19, Z+3	; 0x03
     862:	23 2b       	or	r18, r19
     864:	71 f7       	brne	.-36     	; 0x842 <_ZN5SDLib4File5writeEPKhj+0xe>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	08 95       	ret

0000086c <_ZN5SDLib4File5flushEv>:
     86c:	fc 01       	movw	r30, r24
     86e:	81 8d       	ldd	r24, Z+25	; 0x19
     870:	92 8d       	ldd	r25, Z+26	; 0x1a
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	11 f0       	breq	.+4      	; 0x87a <_ZN5SDLib4File5flushEv+0xe>
     876:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <_ZN6SdFile4syncEv>
     87a:	08 95       	ret

0000087c <_ZN6SdFile4readEv>:
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	1f 92       	push	r1
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	41 e0       	ldi	r20, 0x01	; 1
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	be 01       	movw	r22, r28
     88c:	6f 5f       	subi	r22, 0xFF	; 255
     88e:	7f 4f       	sbci	r23, 0xFF	; 255
     890:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN6SdFile4readEPvj>
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	19 f4       	brne	.+6      	; 0x89e <_ZN6SdFile4readEv+0x22>
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <_ZN6SdFile4readEv+0x26>
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
     8a2:	0f 90       	pop	r0
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <_ZN5SDLib4File4readEv>:
     8aa:	fc 01       	movw	r30, r24
     8ac:	81 8d       	ldd	r24, Z+25	; 0x19
     8ae:	92 8d       	ldd	r25, Z+26	; 0x1a
     8b0:	00 97       	sbiw	r24, 0x00	; 0
     8b2:	11 f0       	breq	.+4      	; 0x8b8 <_ZN5SDLib4File4readEv+0xe>
     8b4:	0c 94 3e 04 	jmp	0x87c	; 0x87c <_ZN6SdFile4readEv>
     8b8:	8f ef       	ldi	r24, 0xFF	; 255
     8ba:	9f ef       	ldi	r25, 0xFF	; 255
     8bc:	08 95       	ret

000008be <_ZN5SDLib4File4peekEv>:
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	fc 01       	movw	r30, r24
     8c8:	81 8d       	ldd	r24, Z+25	; 0x19
     8ca:	92 8d       	ldd	r25, Z+26	; 0x1a
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	b9 f0       	breq	.+46     	; 0x8fe <_ZN5SDLib4File4peekEv+0x40>
     8d0:	ef 01       	movw	r28, r30
     8d2:	0e 94 3e 04 	call	0x87c	; 0x87c <_ZN6SdFile4readEv>
     8d6:	8c 01       	movw	r16, r24
     8d8:	0f 3f       	cpi	r16, 0xFF	; 255
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	18 07       	cpc	r17, r24
     8de:	91 f0       	breq	.+36     	; 0x904 <__stack+0x5>
     8e0:	89 8d       	ldd	r24, Y+25	; 0x19
     8e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8e4:	fc 01       	movw	r30, r24
     8e6:	42 85       	ldd	r20, Z+10	; 0x0a
     8e8:	53 85       	ldd	r21, Z+11	; 0x0b
     8ea:	64 85       	ldd	r22, Z+12	; 0x0c
     8ec:	75 85       	ldd	r23, Z+13	; 0x0d
     8ee:	41 50       	subi	r20, 0x01	; 1
     8f0:	51 09       	sbc	r21, r1
     8f2:	61 09       	sbc	r22, r1
     8f4:	71 09       	sbc	r23, r1
     8f6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN6SdFile7seekSetEm>
     8fa:	c8 01       	movw	r24, r16
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <__stack+0x9>
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0x9>
     904:	8f ef       	ldi	r24, 0xFF	; 255
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	08 95       	ret

00000912 <_ZN5SDLib4FileC1E6SdFilePKc>:
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
     920:	7b 01       	movw	r14, r22
     922:	8a 01       	movw	r16, r20
     924:	1b 82       	std	Y+3, r1	; 0x03
     926:	1a 82       	std	Y+2, r1	; 0x02
     928:	88 ee       	ldi	r24, 0xE8	; 232
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	a0 e0       	ldi	r26, 0x00	; 0
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	8c 83       	std	Y+4, r24	; 0x04
     932:	9d 83       	std	Y+5, r25	; 0x05
     934:	ae 83       	std	Y+6, r26	; 0x06
     936:	bf 83       	std	Y+7, r27	; 0x07
     938:	80 e2       	ldi	r24, 0x20	; 32
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	99 83       	std	Y+1, r25	; 0x01
     93e:	88 83       	st	Y, r24
     940:	8d e1       	ldi	r24, 0x1D	; 29
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <malloc>
     948:	9a 8f       	std	Y+26, r25	; 0x1a
     94a:	89 8f       	std	Y+25, r24	; 0x19
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	79 f0       	breq	.+30     	; 0x96e <_ZN5SDLib4FileC1E6SdFilePKc+0x5c>
     950:	2d e1       	ldi	r18, 0x1D	; 29
     952:	f7 01       	movw	r30, r14
     954:	dc 01       	movw	r26, r24
     956:	01 90       	ld	r0, Z+
     958:	0d 92       	st	X+, r0
     95a:	2a 95       	dec	r18
     95c:	e1 f7       	brne	.-8      	; 0x956 <_ZN5SDLib4FileC1E6SdFilePKc+0x44>
     95e:	4c e0       	ldi	r20, 0x0C	; 12
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	b8 01       	movw	r22, r16
     964:	ce 01       	movw	r24, r28
     966:	0c 96       	adiw	r24, 0x0c	; 12
     968:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <strncpy>
     96c:	18 8e       	std	Y+24, r1	; 0x18
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	1f 91       	pop	r17
     974:	0f 91       	pop	r16
     976:	ff 90       	pop	r15
     978:	ef 90       	pop	r14
     97a:	08 95       	ret

0000097c <_ZN5SDLib4FileC1Ev>:
     97c:	fc 01       	movw	r30, r24
     97e:	13 82       	std	Z+3, r1	; 0x03
     980:	12 82       	std	Z+2, r1	; 0x02
     982:	88 ee       	ldi	r24, 0xE8	; 232
     984:	93 e0       	ldi	r25, 0x03	; 3
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	84 83       	std	Z+4, r24	; 0x04
     98c:	95 83       	std	Z+5, r25	; 0x05
     98e:	a6 83       	std	Z+6, r26	; 0x06
     990:	b7 83       	std	Z+7, r27	; 0x07
     992:	80 e2       	ldi	r24, 0x20	; 32
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	91 83       	std	Z+1, r25	; 0x01
     998:	80 83       	st	Z, r24
     99a:	12 8e       	std	Z+26, r1	; 0x1a
     99c:	11 8e       	std	Z+25, r1	; 0x19
     99e:	14 86       	std	Z+12, r1	; 0x0c
     9a0:	08 95       	ret

000009a2 <_ZN5SDLib4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     9a2:	fc 01       	movw	r30, r24
     9a4:	81 8d       	ldd	r24, Z+25	; 0x19
     9a6:	92 8d       	ldd	r25, Z+26	; 0x1a
     9a8:	00 97       	sbiw	r24, 0x00	; 0
     9aa:	29 f0       	breq	.+10     	; 0x9b6 <_ZN5SDLib4File4seekEm+0x14>

  return _file->seekSet(pos);
     9ac:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN6SdFile7seekSetEm>
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	81 11       	cpse	r24, r1
     9b4:	01 c0       	rjmp	.+2      	; 0x9b8 <_ZN5SDLib4File4seekEm+0x16>
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     9b6:	90 e0       	ldi	r25, 0x00	; 0

  return _file->seekSet(pos);
}
     9b8:	89 2f       	mov	r24, r25
     9ba:	08 95       	ret

000009bc <_ZN5SDLib4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
     9bc:	dc 01       	movw	r26, r24
     9be:	59 96       	adiw	r26, 0x19	; 25
     9c0:	ed 91       	ld	r30, X+
     9c2:	fc 91       	ld	r31, X
     9c4:	5a 97       	sbiw	r26, 0x1a	; 26
     9c6:	30 97       	sbiw	r30, 0x00	; 0
     9c8:	29 f0       	breq	.+10     	; 0x9d4 <_ZN5SDLib4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     9ca:	62 85       	ldd	r22, Z+10	; 0x0a
     9cc:	73 85       	ldd	r23, Z+11	; 0x0b
     9ce:	84 85       	ldd	r24, Z+12	; 0x0c
     9d0:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
     9d2:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     9d4:	6f ef       	ldi	r22, 0xFF	; 255
     9d6:	7f ef       	ldi	r23, 0xFF	; 255
     9d8:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
     9da:	08 95       	ret

000009dc <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
     9dc:	dc 01       	movw	r26, r24
     9de:	59 96       	adiw	r26, 0x19	; 25
     9e0:	ed 91       	ld	r30, X+
     9e2:	fc 91       	ld	r31, X
     9e4:	5a 97       	sbiw	r26, 0x1a	; 26
     9e6:	30 97       	sbiw	r30, 0x00	; 0
     9e8:	29 f0       	breq	.+10     	; 0x9f4 <_ZN5SDLib4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     9ea:	63 89       	ldd	r22, Z+19	; 0x13
     9ec:	74 89       	ldd	r23, Z+20	; 0x14
     9ee:	85 89       	ldd	r24, Z+21	; 0x15
     9f0:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
     9f2:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
     9fa:	08 95       	ret

000009fc <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
  if (! _file) return 0;
     a08:	fc 01       	movw	r30, r24
     a0a:	21 8d       	ldd	r18, Z+25	; 0x19
     a0c:	32 8d       	ldd	r19, Z+26	; 0x1a
     a0e:	23 2b       	or	r18, r19
     a10:	d9 f0       	breq	.+54     	; 0xa48 <_ZN5SDLib4File9availableEv+0x4c>
     a12:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
     a14:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN5SDLib4File4sizeEv>
     a18:	6b 01       	movw	r12, r22
     a1a:	7c 01       	movw	r14, r24
     a1c:	ce 01       	movw	r24, r28
     a1e:	0e 94 de 04 	call	0x9bc	; 0x9bc <_ZN5SDLib4File8positionEv>

  return n > 0X7FFF ? 0X7FFF : n;
     a22:	a7 01       	movw	r20, r14
     a24:	96 01       	movw	r18, r12
     a26:	26 1b       	sub	r18, r22
     a28:	37 0b       	sbc	r19, r23
     a2a:	48 0b       	sbc	r20, r24
     a2c:	59 0b       	sbc	r21, r25
     a2e:	da 01       	movw	r26, r20
     a30:	c9 01       	movw	r24, r18
     a32:	81 15       	cp	r24, r1
     a34:	30 e8       	ldi	r19, 0x80	; 128
     a36:	93 07       	cpc	r25, r19
     a38:	a1 05       	cpc	r26, r1
     a3a:	b1 05       	cpc	r27, r1
     a3c:	38 f0       	brcs	.+14     	; 0xa4c <_ZN5SDLib4File9availableEv+0x50>
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	9f e7       	ldi	r25, 0x7F	; 127
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <_ZN5SDLib4File9availableEv+0x50>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <_ZN5SDLib4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ec 01       	movw	r28, r24
  if (_file) {
     a60:	89 8d       	ldd	r24, Y+25	; 0x19
     a62:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	41 f0       	breq	.+16     	; 0xa78 <_ZN5SDLib4File5closeEv+0x1e>
    _file->close();
     a68:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN6SdFile5closeEv>
    free(_file); 
     a6c:	89 8d       	ldd	r24, Y+25	; 0x19
     a6e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a70:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <free>
    _file = 0;
     a74:	1a 8e       	std	Y+26, r1	; 0x1a
     a76:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <_ZN5SDLib4FilecvbEv>:

File::operator bool() {
  if (_file) 
     a7e:	dc 01       	movw	r26, r24
     a80:	59 96       	adiw	r26, 0x19	; 25
     a82:	ed 91       	ld	r30, X+
     a84:	fc 91       	ld	r31, X
     a86:	5a 97       	sbiw	r26, 0x1a	; 26
     a88:	30 97       	sbiw	r30, 0x00	; 0
     a8a:	21 f0       	breq	.+8      	; 0xa94 <_ZN5SDLib4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	95 81       	ldd	r25, Z+5	; 0x05
     a90:	91 11       	cpse	r25, r1
     a92:	01 c0       	rjmp	.+2      	; 0xa96 <_ZN5SDLib4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
     a94:	80 e0       	ldi	r24, 0x00	; 0
}
     a96:	08 95       	ret

00000a98 <_ZN8SdVolume4initEP7Sd2Card>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
     aa2:	8b 01       	movw	r16, r22
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <_ZN8SdVolume4initEP7Sd2Cardh>
     aaa:	81 11       	cpse	r24, r1
     aac:	09 c0       	rjmp	.+18     	; 0xac0 <_ZN8SdVolume4initEP7Sd2Card+0x28>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	b8 01       	movw	r22, r16
     ab2:	ce 01       	movw	r24, r28
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <_ZN8SdVolume4initEP7Sd2Cardh>
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <_ZN5SDLib7SDClass5beginEh>:
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	ec 01       	movw	r28, r24
     ad6:	16 2f       	mov	r17, r22
     ad8:	8f a5       	ldd	r24, Y+47	; 0x2f
     ada:	88 23       	and	r24, r24
     adc:	21 f0       	breq	.+8      	; 0xae6 <_ZN5SDLib7SDClass5beginEh+0x1a>
     ade:	ce 01       	movw	r24, r28
     ae0:	8a 96       	adiw	r24, 0x2a	; 42
     ae2:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN6SdFile5closeEv>
     ae6:	41 2f       	mov	r20, r17
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 71 08 	call	0x10e2	; 0x10e2 <_ZN7Sd2Card4initEhh>
     af0:	88 23       	and	r24, r24
     af2:	89 f0       	breq	.+34     	; 0xb16 <_ZN5SDLib7SDClass5beginEh+0x4a>
     af4:	8e 01       	movw	r16, r28
     af6:	04 5f       	subi	r16, 0xF4	; 244
     af8:	1f 4f       	sbci	r17, 0xFF	; 255
     afa:	be 01       	movw	r22, r28
     afc:	c8 01       	movw	r24, r16
     afe:	0e 94 4c 05 	call	0xa98	; 0xa98 <_ZN8SdVolume4initEP7Sd2Card>
     b02:	88 23       	and	r24, r24
     b04:	41 f0       	breq	.+16     	; 0xb16 <_ZN5SDLib7SDClass5beginEh+0x4a>
     b06:	b8 01       	movw	r22, r16
     b08:	ce 01       	movw	r24, r28
     b0a:	8a 96       	adiw	r24, 0x2a	; 42
     b0c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile8openRootEP8SdVolume>
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	81 11       	cpse	r24, r1
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <_ZN5SDLib7SDClass5beginEh+0x4c>
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	89 2f       	mov	r24, r25
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	1f 91       	pop	r17
     b20:	0f 91       	pop	r16
     b22:	08 95       	ret

00000b24 <_ZN6SdFileC1ERKS_>:
     b24:	fc 01       	movw	r30, r24
     b26:	db 01       	movw	r26, r22
     b28:	12 96       	adiw	r26, 0x02	; 2
     b2a:	8d 91       	ld	r24, X+
     b2c:	9c 91       	ld	r25, X
     b2e:	13 97       	sbiw	r26, 0x03	; 3
     b30:	93 83       	std	Z+3, r25	; 0x03
     b32:	82 83       	std	Z+2, r24	; 0x02
     b34:	84 e3       	ldi	r24, 0x34	; 52
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	91 83       	std	Z+1, r25	; 0x01
     b3a:	80 83       	st	Z, r24
     b3c:	14 96       	adiw	r26, 0x04	; 4
     b3e:	8c 91       	ld	r24, X
     b40:	14 97       	sbiw	r26, 0x04	; 4
     b42:	84 83       	std	Z+4, r24	; 0x04
     b44:	15 96       	adiw	r26, 0x05	; 5
     b46:	8c 91       	ld	r24, X
     b48:	15 97       	sbiw	r26, 0x05	; 5
     b4a:	85 83       	std	Z+5, r24	; 0x05
     b4c:	16 96       	adiw	r26, 0x06	; 6
     b4e:	4d 91       	ld	r20, X+
     b50:	5d 91       	ld	r21, X+
     b52:	6d 91       	ld	r22, X+
     b54:	7c 91       	ld	r23, X
     b56:	19 97       	sbiw	r26, 0x09	; 9
     b58:	46 83       	std	Z+6, r20	; 0x06
     b5a:	57 83       	std	Z+7, r21	; 0x07
     b5c:	60 87       	std	Z+8, r22	; 0x08
     b5e:	71 87       	std	Z+9, r23	; 0x09
     b60:	1a 96       	adiw	r26, 0x0a	; 10
     b62:	4d 91       	ld	r20, X+
     b64:	5d 91       	ld	r21, X+
     b66:	6d 91       	ld	r22, X+
     b68:	7c 91       	ld	r23, X
     b6a:	1d 97       	sbiw	r26, 0x0d	; 13
     b6c:	42 87       	std	Z+10, r20	; 0x0a
     b6e:	53 87       	std	Z+11, r21	; 0x0b
     b70:	64 87       	std	Z+12, r22	; 0x0c
     b72:	75 87       	std	Z+13, r23	; 0x0d
     b74:	1e 96       	adiw	r26, 0x0e	; 14
     b76:	4d 91       	ld	r20, X+
     b78:	5d 91       	ld	r21, X+
     b7a:	6d 91       	ld	r22, X+
     b7c:	7c 91       	ld	r23, X
     b7e:	51 97       	sbiw	r26, 0x11	; 17
     b80:	46 87       	std	Z+14, r20	; 0x0e
     b82:	57 87       	std	Z+15, r21	; 0x0f
     b84:	60 8b       	std	Z+16, r22	; 0x10
     b86:	71 8b       	std	Z+17, r23	; 0x11
     b88:	52 96       	adiw	r26, 0x12	; 18
     b8a:	8c 91       	ld	r24, X
     b8c:	52 97       	sbiw	r26, 0x12	; 18
     b8e:	82 8b       	std	Z+18, r24	; 0x12
     b90:	53 96       	adiw	r26, 0x13	; 19
     b92:	4d 91       	ld	r20, X+
     b94:	5d 91       	ld	r21, X+
     b96:	6d 91       	ld	r22, X+
     b98:	7c 91       	ld	r23, X
     b9a:	56 97       	sbiw	r26, 0x16	; 22
     b9c:	43 8b       	std	Z+19, r20	; 0x13
     b9e:	54 8b       	std	Z+20, r21	; 0x14
     ba0:	65 8b       	std	Z+21, r22	; 0x15
     ba2:	76 8b       	std	Z+22, r23	; 0x16
     ba4:	57 96       	adiw	r26, 0x17	; 23
     ba6:	4d 91       	ld	r20, X+
     ba8:	5d 91       	ld	r21, X+
     baa:	6d 91       	ld	r22, X+
     bac:	7c 91       	ld	r23, X
     bae:	5a 97       	sbiw	r26, 0x1a	; 26
     bb0:	47 8b       	std	Z+23, r20	; 0x17
     bb2:	50 8f       	std	Z+24, r21	; 0x18
     bb4:	61 8f       	std	Z+25, r22	; 0x19
     bb6:	72 8f       	std	Z+26, r23	; 0x1a
     bb8:	5b 96       	adiw	r26, 0x1b	; 27
     bba:	8d 91       	ld	r24, X+
     bbc:	9c 91       	ld	r25, X
     bbe:	5c 97       	sbiw	r26, 0x1c	; 28
     bc0:	94 8f       	std	Z+28, r25	; 0x1c
     bc2:	83 8f       	std	Z+27, r24	; 0x1b
     bc4:	08 95       	ret

00000bc6 <_ZN5SDLib7SDClass12getParentDirEPKcPi>:
     bc6:	4f 92       	push	r4
     bc8:	5f 92       	push	r5
     bca:	6f 92       	push	r6
     bcc:	7f 92       	push	r7
     bce:	8f 92       	push	r8
     bd0:	9f 92       	push	r9
     bd2:	af 92       	push	r10
     bd4:	bf 92       	push	r11
     bd6:	cf 92       	push	r12
     bd8:	df 92       	push	r13
     bda:	ef 92       	push	r14
     bdc:	ff 92       	push	r15
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	c7 54       	subi	r28, 0x47	; 71
     bec:	d1 09       	sbc	r29, r1
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	f8 94       	cli
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	0f be       	out	0x3f, r0	; 63
     bf6:	cd bf       	out	0x3d, r28	; 61
     bf8:	5c 01       	movw	r10, r24
     bfa:	4a 01       	movw	r8, r20
     bfc:	39 01       	movw	r6, r18
     bfe:	19 a2       	std	Y+33, r1	; 0x21
     c00:	18 a2       	std	Y+32, r1	; 0x20
     c02:	84 e3       	ldi	r24, 0x34	; 52
     c04:	91 e0       	ldi	r25, 0x01	; 1
     c06:	9f 8f       	std	Y+31, r25	; 0x1f
     c08:	8e 8f       	std	Y+30, r24	; 0x1e
     c0a:	1b a2       	std	Y+35, r1	; 0x23
     c0c:	1c 82       	std	Y+4, r1	; 0x04
     c0e:	1b 82       	std	Y+3, r1	; 0x03
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	1e 82       	std	Y+6, r1	; 0x06
     c16:	64 5f       	subi	r22, 0xF4	; 244
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	6e 01       	movw	r12, r28
     c1c:	8e e1       	ldi	r24, 0x1E	; 30
     c1e:	c8 0e       	add	r12, r24
     c20:	d1 1c       	adc	r13, r1
     c22:	c6 01       	movw	r24, r12
     c24:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN6SdFile8openRootEP8SdVolume>
     c28:	74 01       	movw	r14, r8
     c2a:	8e 01       	movw	r16, r28
     c2c:	0f 5f       	subi	r16, 0xFF	; 255
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	5c 2c       	mov	r5, r12
     c32:	4d 2c       	mov	r4, r13
     c34:	6f e2       	ldi	r22, 0x2F	; 47
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	c7 01       	movw	r24, r14
     c3a:	0e 94 4d 1f 	call	0x3e9a	; 0x3e9a <strchr>
     c3e:	00 97       	sbiw	r24, 0x00	; 0
     c40:	09 f4       	brne	.+2      	; 0xc44 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x7e>
     c42:	43 c0       	rjmp	.+134    	; 0xcca <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x104>
     c44:	f7 01       	movw	r30, r14
     c46:	20 81       	ld	r18, Z
     c48:	2f 32       	cpi	r18, 0x2F	; 47
     c4a:	71 f4       	brne	.+28     	; 0xc68 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xa2>
     c4c:	ff ef       	ldi	r31, 0xFF	; 255
     c4e:	ef 1a       	sub	r14, r31
     c50:	ff 0a       	sbc	r15, r31
     c52:	90 2f       	mov	r25, r16
     c54:	81 2f       	mov	r24, r17
     c56:	05 2d       	mov	r16, r5
     c58:	14 2d       	mov	r17, r4
     c5a:	2c 01       	movw	r4, r24
     c5c:	c2 01       	movw	r24, r4
     c5e:	50 2e       	mov	r5, r16
     c60:	41 2e       	mov	r4, r17
     c62:	09 2f       	mov	r16, r25
     c64:	18 2f       	mov	r17, r24
     c66:	e6 cf       	rjmp	.-52     	; 0xc34 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x6e>
     c68:	8e 19       	sub	r24, r14
     c6a:	8d 30       	cpi	r24, 0x0D	; 13
     c6c:	08 f0       	brcs	.+2      	; 0xc70 <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xaa>
     c6e:	8c e0       	ldi	r24, 0x0C	; 12
     c70:	c8 2e       	mov	r12, r24
     c72:	d1 2c       	mov	r13, r1
     c74:	a6 01       	movw	r20, r12
     c76:	b7 01       	movw	r22, r14
     c78:	ce 01       	movw	r24, r28
     c7a:	cb 96       	adiw	r24, 0x3b	; 59
     c7c:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <strncpy>
     c80:	eb e3       	ldi	r30, 0x3B	; 59
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	ec 0f       	add	r30, r28
     c86:	fd 1f       	adc	r31, r29
     c88:	ec 0d       	add	r30, r12
     c8a:	fd 1d       	adc	r31, r13
     c8c:	10 82       	st	Z, r1
     c8e:	c8 01       	movw	r24, r16
     c90:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN6SdFile5closeEv>
     c94:	21 e0       	ldi	r18, 0x01	; 1
     c96:	ae 01       	movw	r20, r28
     c98:	45 5c       	subi	r20, 0xC5	; 197
     c9a:	5f 4f       	sbci	r21, 0xFF	; 255
     c9c:	65 2d       	mov	r22, r5
     c9e:	74 2d       	mov	r23, r4
     ca0:	c8 01       	movw	r24, r16
     ca2:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <_ZN6SdFile4openEPS_PKch>
     ca6:	81 11       	cpse	r24, r1
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <_ZN5SDLib7SDClass12getParentDirEPKcPi+0xf6>
     caa:	f5 01       	movw	r30, r10
     cac:	13 82       	std	Z+3, r1	; 0x03
     cae:	12 82       	std	Z+2, r1	; 0x02
     cb0:	84 e3       	ldi	r24, 0x34	; 52
     cb2:	91 e0       	ldi	r25, 0x01	; 1
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
     cb8:	15 82       	std	Z+5, r1	; 0x05
     cba:	11 c0       	rjmp	.+34     	; 0xcde <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x118>
     cbc:	ec 0c       	add	r14, r12
     cbe:	fd 1c       	adc	r15, r13
     cc0:	85 2d       	mov	r24, r5
     cc2:	94 2d       	mov	r25, r4
     cc4:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN6SdFile5closeEv>
     cc8:	c9 cf       	rjmp	.-110    	; 0xc5c <_ZN5SDLib7SDClass12getParentDirEPKcPi+0x96>
     cca:	e8 18       	sub	r14, r8
     ccc:	f9 08       	sbc	r15, r9
     cce:	f3 01       	movw	r30, r6
     cd0:	f1 82       	std	Z+1, r15	; 0x01
     cd2:	e0 82       	st	Z, r14
     cd4:	65 2d       	mov	r22, r5
     cd6:	74 2d       	mov	r23, r4
     cd8:	c5 01       	movw	r24, r10
     cda:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN6SdFileC1ERKS_>
     cde:	c5 01       	movw	r24, r10
     ce0:	c9 5b       	subi	r28, 0xB9	; 185
     ce2:	df 4f       	sbci	r29, 0xFF	; 255
     ce4:	0f b6       	in	r0, 0x3f	; 63
     ce6:	f8 94       	cli
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	cd bf       	out	0x3d, r28	; 61
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	bf 90       	pop	r11
     d00:	af 90       	pop	r10
     d02:	9f 90       	pop	r9
     d04:	8f 90       	pop	r8
     d06:	7f 90       	pop	r7
     d08:	6f 90       	pop	r6
     d0a:	5f 90       	pop	r5
     d0c:	4f 90       	pop	r4
     d0e:	08 95       	ret

00000d10 <_ZN5SDLib7SDClass4openEPKch>:
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	c9 55       	subi	r28, 0x59	; 89
     d24:	d1 09       	sbc	r29, r1
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	7c 01       	movw	r14, r24
     d32:	8a 01       	movw	r16, r20
     d34:	d2 2e       	mov	r13, r18
     d36:	9e 01       	movw	r18, r28
     d38:	28 5a       	subi	r18, 0xA8	; 168
     d3a:	3f 4f       	sbci	r19, 0xFF	; 255
     d3c:	ce 01       	movw	r24, r28
     d3e:	cb 96       	adiw	r24, 0x3b	; 59
     d40:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <_ZN5SDLib7SDClass12getParentDirEPKcPi>
     d44:	6a 96       	adiw	r28, 0x1a	; 26
     d46:	8e ad       	ldd	r24, Y+62	; 0x3e
     d48:	9f ad       	ldd	r25, Y+63	; 0x3f
     d4a:	6a 97       	sbiw	r28, 0x1a	; 26
     d4c:	08 0f       	add	r16, r24
     d4e:	19 1f       	adc	r17, r25
     d50:	f8 01       	movw	r30, r16
     d52:	80 81       	ld	r24, Z
     d54:	81 11       	cpse	r24, r1
     d56:	0a c0       	rjmp	.+20     	; 0xd6c <_ZN5SDLib7SDClass4openEPKch+0x5c>
     d58:	be 01       	movw	r22, r28
     d5a:	65 5c       	subi	r22, 0xC5	; 197
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN6SdFileC1ERKS_>
     d66:	4e e2       	ldi	r20, 0x2E	; 46
     d68:	51 e0       	ldi	r21, 0x01	; 1
     d6a:	33 c0       	rjmp	.+102    	; 0xdd2 <_ZN5SDLib7SDClass4openEPKch+0xc2>
     d6c:	19 a2       	std	Y+33, r1	; 0x21
     d6e:	18 a2       	std	Y+32, r1	; 0x20
     d70:	84 e3       	ldi	r24, 0x34	; 52
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	9f 8f       	std	Y+31, r25	; 0x1f
     d76:	8e 8f       	std	Y+30, r24	; 0x1e
     d78:	1b a2       	std	Y+35, r1	; 0x23
     d7a:	21 96       	adiw	r28, 0x01	; 1
     d7c:	8f ad       	ldd	r24, Y+63	; 0x3f
     d7e:	21 97       	sbiw	r28, 0x01	; 1
     d80:	81 11       	cpse	r24, r1
     d82:	04 c0       	rjmp	.+8      	; 0xd8c <_ZN5SDLib7SDClass4openEPKch+0x7c>
     d84:	c7 01       	movw	r24, r14
     d86:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5SDLib4FileC1Ev>
     d8a:	29 c0       	rjmp	.+82     	; 0xdde <_ZN5SDLib7SDClass4openEPKch+0xce>
     d8c:	2d 2d       	mov	r18, r13
     d8e:	a8 01       	movw	r20, r16
     d90:	be 01       	movw	r22, r28
     d92:	65 5c       	subi	r22, 0xC5	; 197
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	ce 01       	movw	r24, r28
     d98:	4e 96       	adiw	r24, 0x1e	; 30
     d9a:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <_ZN6SdFile4openEPS_PKch>
     d9e:	88 23       	and	r24, r24
     da0:	89 f3       	breq	.-30     	; 0xd84 <_ZN5SDLib7SDClass4openEPKch+0x74>
     da2:	ce 01       	movw	r24, r28
     da4:	cb 96       	adiw	r24, 0x3b	; 59
     da6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <_ZN6SdFile5closeEv>
     daa:	8d 2d       	mov	r24, r13
     dac:	86 70       	andi	r24, 0x06	; 6
     dae:	86 30       	cpi	r24, 0x06	; 6
     db0:	41 f4       	brne	.+16     	; 0xdc2 <_ZN5SDLib7SDClass4openEPKch+0xb2>
     db2:	49 a9       	ldd	r20, Y+49	; 0x31
     db4:	5a a9       	ldd	r21, Y+50	; 0x32
     db6:	6b a9       	ldd	r22, Y+51	; 0x33
     db8:	7c a9       	ldd	r23, Y+52	; 0x34
     dba:	ce 01       	movw	r24, r28
     dbc:	4e 96       	adiw	r24, 0x1e	; 30
     dbe:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN6SdFile7seekSetEm>
     dc2:	be 01       	movw	r22, r28
     dc4:	62 5e       	subi	r22, 0xE2	; 226
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 92 05 	call	0xb24	; 0xb24 <_ZN6SdFileC1ERKS_>
     dd0:	a8 01       	movw	r20, r16
     dd2:	be 01       	movw	r22, r28
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	c7 01       	movw	r24, r14
     dda:	0e 94 89 04 	call	0x912	; 0x912 <_ZN5SDLib4FileC1E6SdFilePKc>
     dde:	c7 01       	movw	r24, r14
     de0:	c7 5a       	subi	r28, 0xA7	; 167
     de2:	df 4f       	sbci	r29, 0xFF	; 255
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	08 95       	ret

00000dfe <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     dfe:	e6 e0       	ldi	r30, 0x06	; 6
     e00:	f2 e0       	ldi	r31, 0x02	; 2
     e02:	15 82       	std	Z+5, r1	; 0x05
     e04:	16 82       	std	Z+6, r1	; 0x06
     e06:	11 86       	std	Z+9, r1	; 0x09
     e08:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	a0 e0       	ldi	r26, 0x00	; 0
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	84 87       	std	Z+12, r24	; 0x0c
     e14:	95 87       	std	Z+13, r25	; 0x0d
     e16:	a6 87       	std	Z+14, r26	; 0x0e
     e18:	b7 87       	std	Z+15, r27	; 0x0f
     e1a:	13 a2       	std	Z+35, r1	; 0x23
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     e1c:	15 a6       	std	Z+45, r1	; 0x2d
     e1e:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     e20:	84 e3       	ldi	r24, 0x34	; 52
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	93 a7       	std	Z+43, r25	; 0x2b
     e26:	82 a7       	std	Z+42, r24	; 0x2a
     e28:	17 a6       	std	Z+47, r1	; 0x2f
     e2a:	08 95       	ret

00000e2c <_ZN8SPIClass14endTransactionEv.part.3>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
     e2c:	9f b7       	in	r25, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <_ZN8SPIClass13interruptModeE>
     e34:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZN8SPIClass13interruptSaveE>
     e38:	21 30       	cpi	r18, 0x01	; 1
     e3a:	19 f4       	brne	.+6      	; 0xe42 <_ZN8SPIClass14endTransactionEv.part.3+0x16>
     e3c:	8d bb       	out	0x1d, r24	; 29
     e3e:	9f bf       	out	0x3f, r25	; 63
     e40:	08 95       	ret
     e42:	8f bf       	out	0x3f, r24	; 63
     e44:	08 95       	ret

00000e46 <_ZN11SPISettingsC1Emhh>:
     e46:	0f 93       	push	r16
     e48:	fc 01       	movw	r30, r24
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	92 e1       	ldi	r25, 0x12	; 18
     e4e:	aa e7       	ldi	r26, 0x7A	; 122
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	48 17       	cp	r20, r24
     e56:	59 07       	cpc	r21, r25
     e58:	6a 07       	cpc	r22, r26
     e5a:	7b 07       	cpc	r23, r27
     e5c:	40 f4       	brcc	.+16     	; 0xe6e <_ZN11SPISettingsC1Emhh+0x28>
     e5e:	b6 95       	lsr	r27
     e60:	a7 95       	ror	r26
     e62:	97 95       	ror	r25
     e64:	87 95       	ror	r24
     e66:	3f 5f       	subi	r19, 0xFF	; 255
     e68:	36 30       	cpi	r19, 0x06	; 6
     e6a:	a1 f7       	brne	.-24     	; 0xe54 <_ZN11SPISettingsC1Emhh+0xe>
     e6c:	37 e0       	ldi	r19, 0x07	; 7
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	93 27       	eor	r25, r19
     e72:	22 23       	and	r18, r18
     e74:	11 f0       	breq	.+4      	; 0xe7a <_ZN11SPISettingsC1Emhh+0x34>
     e76:	20 e5       	ldi	r18, 0x50	; 80
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <_ZN11SPISettingsC1Emhh+0x36>
     e7a:	20 e7       	ldi	r18, 0x70	; 112
     e7c:	0c 70       	andi	r16, 0x0C	; 12
     e7e:	89 2f       	mov	r24, r25
     e80:	86 95       	lsr	r24
     e82:	08 2b       	or	r16, r24
     e84:	02 2b       	or	r16, r18
     e86:	00 83       	st	Z, r16
     e88:	91 70       	andi	r25, 0x01	; 1
     e8a:	91 83       	std	Z+1, r25	; 0x01
     e8c:	0f 91       	pop	r16
     e8e:	08 95       	ret

00000e90 <_ZN8SPIClass16beginTransactionE11SPISettings>:
     e90:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <_ZN8SPIClass13interruptModeE>
     e94:	22 23       	and	r18, r18
     e96:	99 f0       	breq	.+38     	; 0xebe <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     e98:	4f b7       	in	r20, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <_ZN8SPIClass13interruptModeE>
     ea0:	21 30       	cpi	r18, 0x01	; 1
     ea2:	59 f4       	brne	.+22     	; 0xeba <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     ea4:	2d b3       	in	r18, 0x1d	; 29
     ea6:	20 93 02 02 	sts	0x0202, r18	; 0x800202 <_ZN8SPIClass13interruptSaveE>
     eaa:	3d b3       	in	r19, 0x1d	; 29
     eac:	20 91 03 02 	lds	r18, 0x0203	; 0x800203 <_ZN8SPIClass13interruptMaskE>
     eb0:	20 95       	com	r18
     eb2:	23 23       	and	r18, r19
     eb4:	2d bb       	out	0x1d, r18	; 29
     eb6:	4f bf       	out	0x3f, r20	; 63
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     eba:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <_ZN8SPIClass13interruptSaveE>
     ebe:	8c bd       	out	0x2c, r24	; 44
     ec0:	9d bd       	out	0x2d, r25	; 45
     ec2:	08 95       	ret

00000ec4 <_ZN8SPIClass8transferEh>:
     ec4:	8e bd       	out	0x2e, r24	; 46
     ec6:	00 00       	nop
     ec8:	0d b4       	in	r0, 0x2d	; 45
     eca:	07 fe       	sbrs	r0, 7
     ecc:	fd cf       	rjmp	.-6      	; 0xec8 <_ZN8SPIClass8transferEh+0x4>
     ece:	8e b5       	in	r24, 0x2e	; 46
     ed0:	08 95       	ret

00000ed2 <_ZL6spiRecv>:
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	0c 94 62 07 	jmp	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>

00000ed8 <_ZN7Sd2Card14chipSelectHighEv>:
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	fc 01       	movw	r30, r24
     edc:	84 81       	ldd	r24, Z+4	; 0x04
     ede:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <digitalWrite>
     ee2:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_ZL20chip_select_asserted>
     ee6:	88 23       	and	r24, r24
     ee8:	39 f0       	breq	.+14     	; 0xef8 <_ZN7Sd2Card14chipSelectHighEv+0x20>
     eea:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <_ZL20chip_select_asserted>
     eee:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZN8SPIClass13interruptModeE>
     ef2:	81 11       	cpse	r24, r1
     ef4:	0c 94 16 07 	jmp	0xe2c	; 0xe2c <_ZN8SPIClass14endTransactionEv.part.3>
     ef8:	08 95       	ret

00000efa <_ZN7Sd2Card13chipSelectLowEv>:
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	ec 01       	movw	r28, r24
     f00:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <_ZL20chip_select_asserted>
     f04:	81 11       	cpse	r24, r1
     f06:	09 c0       	rjmp	.+18     	; 0xf1a <_ZN7Sd2Card13chipSelectLowEv+0x20>
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <_ZL20chip_select_asserted>
     f0e:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <_ZL8settings>
     f12:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <_ZL8settings+0x1>
     f16:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN8SPIClass16beginTransactionE11SPISettings>
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	8c 81       	ldd	r24, Y+4	; 0x04
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <digitalWrite>

00000f26 <_ZN7Sd2Card7readEndEv>:
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	8e 81       	ldd	r24, Y+6	; 0x06
     f2e:	88 23       	and	r24, r24
     f30:	89 f0       	breq	.+34     	; 0xf54 <_ZN7Sd2Card7readEndEv+0x2e>
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	9c 01       	movw	r18, r24
     f38:	2f 5f       	subi	r18, 0xFF	; 255
     f3a:	3f 4f       	sbci	r19, 0xFF	; 255
     f3c:	38 87       	std	Y+8, r19	; 0x08
     f3e:	2f 83       	std	Y+7, r18	; 0x07
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	92 40       	sbci	r25, 0x02	; 2
     f44:	18 f4       	brcc	.+6      	; 0xf4c <_ZN7Sd2Card7readEndEv+0x26>
     f46:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
     f4a:	f3 cf       	rjmp	.-26     	; 0xf32 <_ZN7Sd2Card7readEndEv+0xc>
     f4c:	ce 01       	movw	r24, r28
     f4e:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
     f52:	1e 82       	std	Y+6, r1	; 0x06
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <_ZN7Sd2Card10setSckRateEh>:
     f5a:	0f 93       	push	r16
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	00 d0       	rcall	.+0      	; 0xf62 <_ZN7Sd2Card10setSckRateEh+0x8>
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	67 30       	cpi	r22, 0x07	; 7
     f68:	28 f0       	brcs	.+10     	; 0xf74 <_ZN7Sd2Card10setSckRateEh+0x1a>
     f6a:	26 e1       	ldi	r18, 0x16	; 22
     f6c:	fc 01       	movw	r30, r24
     f6e:	25 83       	std	Z+5, r18	; 0x05
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	47 c0       	rjmp	.+142    	; 0x1002 <_ZN7Sd2Card10setSckRateEh+0xa8>
     f74:	62 30       	cpi	r22, 0x02	; 2
     f76:	f9 f0       	breq	.+62     	; 0xfb6 <_ZN7Sd2Card10setSckRateEh+0x5c>
     f78:	58 f4       	brcc	.+22     	; 0xf90 <_ZN7Sd2Card10setSckRateEh+0x36>
     f7a:	66 23       	and	r22, r22
     f7c:	a9 f0       	breq	.+42     	; 0xfa8 <_ZN7Sd2Card10setSckRateEh+0x4e>
     f7e:	61 30       	cpi	r22, 0x01	; 1
     f80:	79 f5       	brne	.+94     	; 0xfe0 <_ZN7Sd2Card10setSckRateEh+0x86>
     f82:	00 e0       	ldi	r16, 0x00	; 0
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	59 e0       	ldi	r21, 0x09	; 9
     f8a:	6d e3       	ldi	r22, 0x3D	; 61
     f8c:	70 e0       	ldi	r23, 0x00	; 0
     f8e:	2e c0       	rjmp	.+92     	; 0xfec <_ZN7Sd2Card10setSckRateEh+0x92>
     f90:	64 30       	cpi	r22, 0x04	; 4
     f92:	f9 f0       	breq	.+62     	; 0xfd2 <_ZN7Sd2Card10setSckRateEh+0x78>
     f94:	b8 f0       	brcs	.+46     	; 0xfc4 <_ZN7Sd2Card10setSckRateEh+0x6a>
     f96:	65 30       	cpi	r22, 0x05	; 5
     f98:	19 f5       	brne	.+70     	; 0xfe0 <_ZN7Sd2Card10setSckRateEh+0x86>
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	21 e0       	ldi	r18, 0x01	; 1
     f9e:	40 e9       	ldi	r20, 0x90	; 144
     fa0:	50 ed       	ldi	r21, 0xD0	; 208
     fa2:	63 e0       	ldi	r22, 0x03	; 3
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	22 c0       	rjmp	.+68     	; 0xfec <_ZN7Sd2Card10setSckRateEh+0x92>
     fa8:	00 e0       	ldi	r16, 0x00	; 0
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	40 e4       	ldi	r20, 0x40	; 64
     fae:	58 e7       	ldi	r21, 0x78	; 120
     fb0:	6d e7       	ldi	r22, 0x7D	; 125
     fb2:	71 e0       	ldi	r23, 0x01	; 1
     fb4:	1b c0       	rjmp	.+54     	; 0xfec <_ZN7Sd2Card10setSckRateEh+0x92>
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	21 e0       	ldi	r18, 0x01	; 1
     fba:	40 e8       	ldi	r20, 0x80	; 128
     fbc:	54 e8       	ldi	r21, 0x84	; 132
     fbe:	6e e1       	ldi	r22, 0x1E	; 30
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	14 c0       	rjmp	.+40     	; 0xfec <_ZN7Sd2Card10setSckRateEh+0x92>
     fc4:	00 e0       	ldi	r16, 0x00	; 0
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	40 e4       	ldi	r20, 0x40	; 64
     fca:	52 e4       	ldi	r21, 0x42	; 66
     fcc:	6f e0       	ldi	r22, 0x0F	; 15
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <_ZN7Sd2Card10setSckRateEh+0x92>
     fd2:	00 e0       	ldi	r16, 0x00	; 0
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	40 e2       	ldi	r20, 0x20	; 32
     fd8:	51 ea       	ldi	r21, 0xA1	; 161
     fda:	67 e0       	ldi	r22, 0x07	; 7
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	06 c0       	rjmp	.+12     	; 0xfec <_ZN7Sd2Card10setSckRateEh+0x92>
     fe0:	00 e0       	ldi	r16, 0x00	; 0
     fe2:	21 e0       	ldi	r18, 0x01	; 1
     fe4:	48 e4       	ldi	r20, 0x48	; 72
     fe6:	58 ee       	ldi	r21, 0xE8	; 232
     fe8:	61 e0       	ldi	r22, 0x01	; 1
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	ce 01       	movw	r24, r28
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN11SPISettingsC1Emhh>
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <_ZL8settings+0x1>
     ffc:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <_ZL8settings>
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <_ZN7Sd2Card11waitNotBusyEj>:
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	eb 01       	movw	r28, r22
    1018:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    101c:	8b 01       	movw	r16, r22
    101e:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    1022:	8f 3f       	cpi	r24, 0xFF	; 255
    1024:	49 f0       	breq	.+18     	; 0x1038 <_ZN7Sd2Card11waitNotBusyEj+0x2a>
    1026:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    102a:	60 1b       	sub	r22, r16
    102c:	71 0b       	sbc	r23, r17
    102e:	6c 17       	cp	r22, r28
    1030:	7d 07       	cpc	r23, r29
    1032:	a8 f3       	brcs	.-22     	; 0x101e <_ZN7Sd2Card11waitNotBusyEj+0x10>
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	01 c0       	rjmp	.+2      	; 0x103a <_ZN7Sd2Card11waitNotBusyEj+0x2c>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <_ZN7Sd2Card11cardCommandEhm>:
    1044:	8f 92       	push	r8
    1046:	9f 92       	push	r9
    1048:	af 92       	push	r10
    104a:	bf 92       	push	r11
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	f6 2e       	mov	r15, r22
    105a:	49 01       	movw	r8, r18
    105c:	5a 01       	movw	r10, r20
    105e:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN7Sd2Card7readEndEv>
    1062:	ce 01       	movw	r24, r28
    1064:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN7Sd2Card13chipSelectLowEv>
    1068:	6c e2       	ldi	r22, 0x2C	; 44
    106a:	71 e0       	ldi	r23, 0x01	; 1
    106c:	ce 01       	movw	r24, r28
    106e:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN7Sd2Card11waitNotBusyEj>
    1072:	8f 2d       	mov	r24, r15
    1074:	80 64       	ori	r24, 0x40	; 64
    1076:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    107a:	08 e1       	ldi	r16, 0x18	; 24
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	d5 01       	movw	r26, r10
    1080:	c4 01       	movw	r24, r8
    1082:	00 2e       	mov	r0, r16
    1084:	04 c0       	rjmp	.+8      	; 0x108e <_ZN7Sd2Card11cardCommandEhm+0x4a>
    1086:	b6 95       	lsr	r27
    1088:	a7 95       	ror	r26
    108a:	97 95       	ror	r25
    108c:	87 95       	ror	r24
    108e:	0a 94       	dec	r0
    1090:	d2 f7       	brpl	.-12     	; 0x1086 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1092:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    1096:	08 50       	subi	r16, 0x08	; 8
    1098:	11 09       	sbc	r17, r1
    109a:	08 3f       	cpi	r16, 0xF8	; 248
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	18 07       	cpc	r17, r24
    10a0:	71 f7       	brne	.-36     	; 0x107e <_ZN7Sd2Card11cardCommandEhm+0x3a>
    10a2:	ff 20       	and	r15, r15
    10a4:	29 f0       	breq	.+10     	; 0x10b0 <_ZN7Sd2Card11cardCommandEhm+0x6c>
    10a6:	88 e0       	ldi	r24, 0x08	; 8
    10a8:	f8 12       	cpse	r15, r24
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <_ZN7Sd2Card11cardCommandEhm+0x70>
    10ac:	87 e8       	ldi	r24, 0x87	; 135
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <_ZN7Sd2Card11cardCommandEhm+0x72>
    10b0:	85 e9       	ldi	r24, 0x95	; 149
    10b2:	01 c0       	rjmp	.+2      	; 0x10b6 <_ZN7Sd2Card11cardCommandEhm+0x72>
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    10c0:	8a 87       	std	Y+10, r24	; 0x0a
    10c2:	87 ff       	sbrs	r24, 7
    10c4:	04 c0       	rjmp	.+8      	; 0x10ce <_ZN7Sd2Card11cardCommandEhm+0x8a>
    10c6:	1f 3f       	cpi	r17, 0xFF	; 255
    10c8:	11 f0       	breq	.+4      	; 0x10ce <_ZN7Sd2Card11cardCommandEhm+0x8a>
    10ca:	1f 5f       	subi	r17, 0xFF	; 255
    10cc:	f7 cf       	rjmp	.-18     	; 0x10bc <_ZN7Sd2Card11cardCommandEhm+0x78>
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	1f 91       	pop	r17
    10d4:	0f 91       	pop	r16
    10d6:	ff 90       	pop	r15
    10d8:	bf 90       	pop	r11
    10da:	af 90       	pop	r10
    10dc:	9f 90       	pop	r9
    10de:	8f 90       	pop	r8
    10e0:	08 95       	ret

000010e2 <_ZN7Sd2Card4initEhh>:
    10e2:	7f 92       	push	r7
    10e4:	8f 92       	push	r8
    10e6:	9f 92       	push	r9
    10e8:	af 92       	push	r10
    10ea:	bf 92       	push	r11
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <_ZN7Sd2Card4initEhh+0x1c>
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	7c 01       	movw	r14, r24
    1104:	76 2e       	mov	r7, r22
    1106:	fc 01       	movw	r30, r24
    1108:	13 86       	std	Z+11, r1	; 0x0b
    110a:	11 86       	std	Z+9, r1	; 0x09
    110c:	16 82       	std	Z+6, r1	; 0x06
    110e:	15 82       	std	Z+5, r1	; 0x05
    1110:	44 83       	std	Z+4, r20	; 0x04
    1112:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    1116:	6b 01       	movw	r12, r22
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	f7 01       	movw	r30, r14
    111c:	84 81       	ldd	r24, Z+4	; 0x04
    111e:	0e 94 25 02 	call	0x44a	; 0x44a <pinMode>
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	f7 01       	movw	r30, r14
    1126:	84 81       	ldd	r24, Z+4	; 0x04
    1128:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <digitalWrite>
    112c:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN8SPIClass5beginEv>
    1130:	00 e0       	ldi	r16, 0x00	; 0
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	40 e9       	ldi	r20, 0x90	; 144
    1136:	50 ed       	ldi	r21, 0xD0	; 208
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	ce 01       	movw	r24, r28
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN11SPISettingsC1Emhh>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	9a 81       	ldd	r25, Y+2	; 0x02
    1148:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <_ZL8settings+0x1>
    114c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <_ZL8settings>
    1150:	0e 94 48 07 	call	0xe90	; 0xe90 <_ZN8SPIClass16beginTransactionE11SPISettings>
    1154:	1a e0       	ldi	r17, 0x0A	; 10
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    115c:	11 50       	subi	r17, 0x01	; 1
    115e:	d9 f7       	brne	.-10     	; 0x1156 <_ZN7Sd2Card4initEhh+0x74>
    1160:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <_ZN8SPIClass13interruptModeE>
    1164:	81 11       	cpse	r24, r1
    1166:	0e 94 16 07 	call	0xe2c	; 0xe2c <_ZN8SPIClass14endTransactionEv.part.3>
    116a:	c7 01       	movw	r24, r14
    116c:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN7Sd2Card13chipSelectLowEv>
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	c7 01       	movw	r24, r14
    117a:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    117e:	08 2f       	mov	r16, r24
    1180:	f7 01       	movw	r30, r14
    1182:	82 87       	std	Z+10, r24	; 0x0a
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	49 f0       	breq	.+18     	; 0x119a <_ZN7Sd2Card4initEhh+0xb8>
    1188:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    118c:	6c 19       	sub	r22, r12
    118e:	7d 09       	sbc	r23, r13
    1190:	61 3d       	cpi	r22, 0xD1	; 209
    1192:	77 40       	sbci	r23, 0x07	; 7
    1194:	68 f3       	brcs	.-38     	; 0x1170 <_ZN7Sd2Card4initEhh+0x8e>
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	50 c0       	rjmp	.+160    	; 0x123a <_ZN7Sd2Card4initEhh+0x158>
    119a:	2a ea       	ldi	r18, 0xAA	; 170
    119c:	31 e0       	ldi	r19, 0x01	; 1
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	68 e0       	ldi	r22, 0x08	; 8
    11a4:	c7 01       	movw	r24, r14
    11a6:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    11aa:	82 ff       	sbrs	r24, 2
    11ac:	03 c0       	rjmp	.+6      	; 0x11b4 <_ZN7Sd2Card4initEhh+0xd2>
    11ae:	f7 01       	movw	r30, r14
    11b0:	03 87       	std	Z+11, r16	; 0x0b
    11b2:	0e c0       	rjmp	.+28     	; 0x11d0 <_ZN7Sd2Card4initEhh+0xee>
    11b4:	04 e0       	ldi	r16, 0x04	; 4
    11b6:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    11ba:	f7 01       	movw	r30, r14
    11bc:	82 87       	std	Z+10, r24	; 0x0a
    11be:	01 50       	subi	r16, 0x01	; 1
    11c0:	d1 f7       	brne	.-12     	; 0x11b6 <_ZN7Sd2Card4initEhh+0xd4>
    11c2:	8a 3a       	cpi	r24, 0xAA	; 170
    11c4:	11 f0       	breq	.+4      	; 0x11ca <_ZN7Sd2Card4initEhh+0xe8>
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	39 c0       	rjmp	.+114    	; 0x123c <_ZN7Sd2Card4initEhh+0x15a>
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	f7 01       	movw	r30, r14
    11ce:	83 87       	std	Z+11, r24	; 0x0b
    11d0:	f7 01       	movw	r30, r14
    11d2:	83 85       	ldd	r24, Z+11	; 0x0b
    11d4:	82 30       	cpi	r24, 0x02	; 2
    11d6:	21 f0       	breq	.+8      	; 0x11e0 <_ZN7Sd2Card4initEhh+0xfe>
    11d8:	81 2c       	mov	r8, r1
    11da:	91 2c       	mov	r9, r1
    11dc:	54 01       	movw	r10, r8
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <_ZN7Sd2Card4initEhh+0x108>
    11e0:	81 2c       	mov	r8, r1
    11e2:	91 2c       	mov	r9, r1
    11e4:	a1 2c       	mov	r10, r1
    11e6:	80 e4       	ldi	r24, 0x40	; 64
    11e8:	b8 2e       	mov	r11, r24
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	a9 01       	movw	r20, r18
    11f0:	67 e3       	ldi	r22, 0x37	; 55
    11f2:	c7 01       	movw	r24, r14
    11f4:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    11f8:	a5 01       	movw	r20, r10
    11fa:	94 01       	movw	r18, r8
    11fc:	69 e2       	ldi	r22, 0x29	; 41
    11fe:	c7 01       	movw	r24, r14
    1200:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    1204:	f7 01       	movw	r30, r14
    1206:	82 87       	std	Z+10, r24	; 0x0a
    1208:	88 23       	and	r24, r24
    120a:	49 f0       	breq	.+18     	; 0x121e <_ZN7Sd2Card4initEhh+0x13c>
    120c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    1210:	6c 19       	sub	r22, r12
    1212:	7d 09       	sbc	r23, r13
    1214:	61 3d       	cpi	r22, 0xD1	; 209
    1216:	77 40       	sbci	r23, 0x07	; 7
    1218:	40 f3       	brcs	.-48     	; 0x11ea <_ZN7Sd2Card4initEhh+0x108>
    121a:	88 e0       	ldi	r24, 0x08	; 8
    121c:	0e c0       	rjmp	.+28     	; 0x123a <_ZN7Sd2Card4initEhh+0x158>
    121e:	f7 01       	movw	r30, r14
    1220:	83 85       	ldd	r24, Z+11	; 0x0b
    1222:	82 30       	cpi	r24, 0x02	; 2
    1224:	f1 f4       	brne	.+60     	; 0x1262 <_ZN7Sd2Card4initEhh+0x180>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	a9 01       	movw	r20, r18
    122c:	6a e3       	ldi	r22, 0x3A	; 58
    122e:	c7 01       	movw	r24, r14
    1230:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    1234:	88 23       	and	r24, r24
    1236:	39 f0       	breq	.+14     	; 0x1246 <_ZN7Sd2Card4initEhh+0x164>
    1238:	86 e0       	ldi	r24, 0x06	; 6
    123a:	f7 01       	movw	r30, r14
    123c:	85 83       	std	Z+5, r24	; 0x05
    123e:	c7 01       	movw	r24, r14
    1240:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    1244:	16 c0       	rjmp	.+44     	; 0x1272 <_ZN7Sd2Card4initEhh+0x190>
    1246:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    124a:	80 7c       	andi	r24, 0xC0	; 192
    124c:	80 3c       	cpi	r24, 0xC0	; 192
    124e:	19 f4       	brne	.+6      	; 0x1256 <_ZN7Sd2Card4initEhh+0x174>
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	f7 01       	movw	r30, r14
    1254:	83 87       	std	Z+11, r24	; 0x0b
    1256:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    125a:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    125e:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    1262:	c7 01       	movw	r24, r14
    1264:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    1268:	67 2d       	mov	r22, r7
    126a:	c7 01       	movw	r24, r14
    126c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <_ZN7Sd2Card10setSckRateEh>
    1270:	18 2f       	mov	r17, r24
    1272:	81 2f       	mov	r24, r17
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	9f 90       	pop	r9
    128e:	8f 90       	pop	r8
    1290:	7f 90       	pop	r7
    1292:	08 95       	ret

00001294 <_ZN7Sd2Card14waitStartBlockEv>:
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	ec 01       	movw	r28, r24
    129e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    12a2:	8b 01       	movw	r16, r22
    12a4:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    12a8:	8a 87       	std	Y+10, r24	; 0x0a
    12aa:	8f 3f       	cpi	r24, 0xFF	; 255
    12ac:	49 f4       	brne	.+18     	; 0x12c0 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
    12ae:	0e 94 61 02 	call	0x4c2	; 0x4c2 <millis>
    12b2:	60 1b       	sub	r22, r16
    12b4:	71 0b       	sbc	r23, r17
    12b6:	6d 32       	cpi	r22, 0x2D	; 45
    12b8:	71 40       	sbci	r23, 0x01	; 1
    12ba:	a0 f3       	brcs	.-24     	; 0x12a4 <_ZN7Sd2Card14waitStartBlockEv+0x10>
    12bc:	8f e0       	ldi	r24, 0x0F	; 15
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <_ZN7Sd2Card14waitStartBlockEv+0x32>
    12c0:	8e 3f       	cpi	r24, 0xFE	; 254
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
    12c4:	8d e0       	ldi	r24, 0x0D	; 13
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <_ZN7Sd2Card14waitStartBlockEv+0x40>
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	08 95       	ret

000012de <_ZN7Sd2Card8readDataEmjjPh.part.6>:
    12de:	cf 92       	push	r12
    12e0:	df 92       	push	r13
    12e2:	ef 92       	push	r14
    12e4:	ff 92       	push	r15
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	69 01       	movw	r12, r18
    12f2:	c8 01       	movw	r24, r16
    12f4:	82 0f       	add	r24, r18
    12f6:	93 1f       	adc	r25, r19
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	92 40       	sbci	r25, 0x02	; 2
    12fc:	08 f0       	brcs	.+2      	; 0x1300 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
    12fe:	5c c0       	rjmp	.+184    	; 0x13b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	88 23       	and	r24, r24
    1304:	71 f0       	breq	.+28     	; 0x1322 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1306:	88 81       	ld	r24, Y
    1308:	99 81       	ldd	r25, Y+1	; 0x01
    130a:	aa 81       	ldd	r26, Y+2	; 0x02
    130c:	bb 81       	ldd	r27, Y+3	; 0x03
    130e:	84 17       	cp	r24, r20
    1310:	95 07       	cpc	r25, r21
    1312:	a6 07       	cpc	r26, r22
    1314:	b7 07       	cpc	r27, r23
    1316:	29 f4       	brne	.+10     	; 0x1322 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
    1318:	8f 81       	ldd	r24, Y+7	; 0x07
    131a:	98 85       	ldd	r25, Y+8	; 0x08
    131c:	c8 16       	cp	r12, r24
    131e:	d9 06       	cpc	r13, r25
    1320:	10 f5       	brcc	.+68     	; 0x1366 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1322:	48 83       	st	Y, r20
    1324:	59 83       	std	Y+1, r21	; 0x01
    1326:	6a 83       	std	Y+2, r22	; 0x02
    1328:	7b 83       	std	Y+3, r23	; 0x03
    132a:	8b 85       	ldd	r24, Y+11	; 0x0b
    132c:	83 30       	cpi	r24, 0x03	; 3
    132e:	39 f0       	breq	.+14     	; 0x133e <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	44 0f       	add	r20, r20
    1334:	55 1f       	adc	r21, r21
    1336:	66 1f       	adc	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	8a 95       	dec	r24
    133c:	d1 f7       	brne	.-12     	; 0x1332 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
    133e:	9a 01       	movw	r18, r20
    1340:	ab 01       	movw	r20, r22
    1342:	61 e1       	ldi	r22, 0x11	; 17
    1344:	ce 01       	movw	r24, r28
    1346:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    134a:	88 23       	and	r24, r24
    134c:	19 f0       	breq	.+6      	; 0x1354 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
    134e:	83 e0       	ldi	r24, 0x03	; 3
    1350:	8d 83       	std	Y+5, r24	; 0x05
    1352:	32 c0       	rjmp	.+100    	; 0x13b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    1354:	ce 01       	movw	r24, r28
    1356:	0e 94 4a 09 	call	0x1294	; 0x1294 <_ZN7Sd2Card14waitStartBlockEv>
    135a:	88 23       	and	r24, r24
    135c:	69 f1       	breq	.+90     	; 0x13b8 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
    135e:	18 86       	std	Y+8, r1	; 0x08
    1360:	1f 82       	std	Y+7, r1	; 0x07
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	8e 83       	std	Y+6, r24	; 0x06
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	8c 15       	cp	r24, r12
    136c:	9d 05       	cpc	r25, r13
    136e:	40 f4       	brcc	.+16     	; 0x1380 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
    1370:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	98 87       	std	Y+8, r25	; 0x08
    137c:	8f 83       	std	Y+7, r24	; 0x07
    137e:	f3 cf       	rjmp	.-26     	; 0x1366 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
    1380:	67 01       	movw	r12, r14
    1382:	e0 0e       	add	r14, r16
    1384:	f1 1e       	adc	r15, r17
    1386:	ce 14       	cp	r12, r14
    1388:	df 04       	cpc	r13, r15
    138a:	31 f0       	breq	.+12     	; 0x1398 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
    138c:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    1390:	f6 01       	movw	r30, r12
    1392:	81 93       	st	Z+, r24
    1394:	6f 01       	movw	r12, r30
    1396:	f7 cf       	rjmp	.-18     	; 0x1386 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
    1398:	8f 81       	ldd	r24, Y+7	; 0x07
    139a:	98 85       	ldd	r25, Y+8	; 0x08
    139c:	08 0f       	add	r16, r24
    139e:	19 1f       	adc	r17, r25
    13a0:	18 87       	std	Y+8, r17	; 0x08
    13a2:	0f 83       	std	Y+7, r16	; 0x07
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	88 23       	and	r24, r24
    13a8:	19 f0       	breq	.+6      	; 0x13b0 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
    13aa:	01 15       	cp	r16, r1
    13ac:	12 40       	sbci	r17, 0x02	; 2
    13ae:	48 f0       	brcs	.+18     	; 0x13c2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    13b0:	ce 01       	movw	r24, r28
    13b2:	0e 94 93 07 	call	0xf26	; 0xf26 <_ZN7Sd2Card7readEndEv>
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
    13b8:	ce 01       	movw	r24, r28
    13ba:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret

000013d6 <_ZN7Sd2Card8readDataEmjjPh>:
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	01 15       	cp	r16, r1
    13e0:	11 05       	cpc	r17, r1
    13e2:	19 f0       	breq	.+6      	; 0x13ea <_ZN7Sd2Card8readDataEmjjPh+0x14>
    13e4:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN7Sd2Card8readDataEmjjPh.part.6>
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <_ZN7Sd2Card8readDataEmjjPh+0x16>
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	08 95       	ret

000013f6 <_ZN7Sd2Card9readBlockEmPh>:
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	79 01       	movw	r14, r18
    1400:	00 e0       	ldi	r16, 0x00	; 0
    1402:	12 e0       	ldi	r17, 0x02	; 2
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	0e 94 6f 09 	call	0x12de	; 0x12de <_ZN7Sd2Card8readDataEmjjPh.part.6>
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	08 95       	ret

00001416 <_ZN7Sd2Card9writeDataEhPKh>:
    1416:	ef 92       	push	r14
    1418:	ff 92       	push	r15
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	cf 93       	push	r28
    1420:	df 93       	push	r29
    1422:	8c 01       	movw	r16, r24
    1424:	86 2f       	mov	r24, r22
    1426:	7a 01       	movw	r14, r20
    1428:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    142c:	e7 01       	movw	r28, r14
    142e:	8e ef       	ldi	r24, 0xFE	; 254
    1430:	f8 1a       	sub	r15, r24
    1432:	89 91       	ld	r24, Y+
    1434:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    1438:	ce 15       	cp	r28, r14
    143a:	df 05       	cpc	r29, r15
    143c:	d1 f7       	brne	.-12     	; 0x1432 <_ZN7Sd2Card9writeDataEhPKh+0x1c>
    143e:	8f ef       	ldi	r24, 0xFF	; 255
    1440:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    1444:	8f ef       	ldi	r24, 0xFF	; 255
    1446:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN8SPIClass8transferEh>
    144a:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    144e:	f8 01       	movw	r30, r16
    1450:	82 87       	std	Z+10, r24	; 0x0a
    1452:	8f 71       	andi	r24, 0x1F	; 31
    1454:	85 30       	cpi	r24, 0x05	; 5
    1456:	39 f0       	breq	.+14     	; 0x1466 <_ZN7Sd2Card9writeDataEhPKh+0x50>
    1458:	81 e1       	ldi	r24, 0x11	; 17
    145a:	85 83       	std	Z+5, r24	; 0x05
    145c:	c8 01       	movw	r24, r16
    145e:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <_ZN7Sd2Card9writeDataEhPKh+0x52>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	08 95       	ret

00001476 <_ZN7Sd2Card10writeBlockEmPKh>:
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	89 01       	movw	r16, r18
    1482:	41 15       	cp	r20, r1
    1484:	51 05       	cpc	r21, r1
    1486:	61 05       	cpc	r22, r1
    1488:	71 05       	cpc	r23, r1
    148a:	11 f4       	brne	.+4      	; 0x1490 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
    148c:	82 e1       	ldi	r24, 0x12	; 18
    148e:	32 c0       	rjmp	.+100    	; 0x14f4 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    1490:	8b 85       	ldd	r24, Y+11	; 0x0b
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	39 f0       	breq	.+14     	; 0x14a4 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	44 0f       	add	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	66 1f       	adc	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	8a 95       	dec	r24
    14a2:	d1 f7       	brne	.-12     	; 0x1498 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
    14a4:	9a 01       	movw	r18, r20
    14a6:	ab 01       	movw	r20, r22
    14a8:	68 e1       	ldi	r22, 0x18	; 24
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    14b0:	88 23       	and	r24, r24
    14b2:	11 f0       	breq	.+4      	; 0x14b8 <_ZN7Sd2Card10writeBlockEmPKh+0x42>
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	1e c0       	rjmp	.+60     	; 0x14f4 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    14b8:	a8 01       	movw	r20, r16
    14ba:	6e ef       	ldi	r22, 0xFE	; 254
    14bc:	ce 01       	movw	r24, r28
    14be:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN7Sd2Card9writeDataEhPKh>
    14c2:	88 23       	and	r24, r24
    14c4:	c1 f0       	breq	.+48     	; 0x14f6 <_ZN7Sd2Card10writeBlockEmPKh+0x80>
    14c6:	68 e5       	ldi	r22, 0x58	; 88
    14c8:	72 e0       	ldi	r23, 0x02	; 2
    14ca:	ce 01       	movw	r24, r28
    14cc:	0e 94 07 08 	call	0x100e	; 0x100e <_ZN7Sd2Card11waitNotBusyEj>
    14d0:	81 11       	cpse	r24, r1
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <_ZN7Sd2Card10writeBlockEmPKh+0x62>
    14d4:	85 e1       	ldi	r24, 0x15	; 21
    14d6:	0e c0       	rjmp	.+28     	; 0x14f4 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	6d e0       	ldi	r22, 0x0D	; 13
    14e0:	ce 01       	movw	r24, r28
    14e2:	0e 94 22 08 	call	0x1044	; 0x1044 <_ZN7Sd2Card11cardCommandEhm>
    14e6:	81 11       	cpse	r24, r1
    14e8:	04 c0       	rjmp	.+8      	; 0x14f2 <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
    14ea:	0e 94 69 07 	call	0xed2	; 0xed2 <_ZL6spiRecv>
    14ee:	88 23       	and	r24, r24
    14f0:	39 f0       	breq	.+14     	; 0x1500 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    14f2:	84 e1       	ldi	r24, 0x14	; 20
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	ce 01       	movw	r24, r28
    14f8:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	04 c0       	rjmp	.+8      	; 0x1508 <_ZN7Sd2Card10writeBlockEmPKh+0x92>
    1500:	ce 01       	movw	r24, r28
    1502:	0e 94 6c 07 	call	0xed8	; 0xed8 <_ZN7Sd2Card14chipSelectHighEv>
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	1f 91       	pop	r17
    150e:	0f 91       	pop	r16
    1510:	08 95       	ret

00001512 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    1512:	e0 e5       	ldi	r30, 0x50	; 80
    1514:	f2 e0       	ldi	r31, 0x02	; 2
    1516:	80 e5       	ldi	r24, 0x50	; 80
    1518:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    151a:	11 82       	std	Z+1, r1	; 0x01
    151c:	08 95       	ret

0000151e <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
    1524:	9c 01       	movw	r18, r24
    1526:	2a 5f       	subi	r18, 0xFA	; 250
    1528:	3f 4f       	sbci	r19, 0xFF	; 255
    152a:	41 e0       	ldi	r20, 0x01	; 1
    152c:	50 e0       	ldi	r21, 0x00	; 0
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1534:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1536:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <_ZN8SdVolume15allocContiguousEmPm>
    153a:	88 23       	and	r24, r24
    153c:	a1 f0       	breq	.+40     	; 0x1566 <_ZN6SdFile10addClusterEv+0x48>
    153e:	8f 89       	ldd	r24, Y+23	; 0x17
    1540:	98 8d       	ldd	r25, Y+24	; 0x18
    1542:	a9 8d       	ldd	r26, Y+25	; 0x19
    1544:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1546:	89 2b       	or	r24, r25
    1548:	8a 2b       	or	r24, r26
    154a:	8b 2b       	or	r24, r27
    154c:	59 f4       	brne	.+22     	; 0x1564 <_ZN6SdFile10addClusterEv+0x46>
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	a8 85       	ldd	r26, Y+8	; 0x08
    1554:	b9 85       	ldd	r27, Y+9	; 0x09
    1556:	8f 8b       	std	Y+23, r24	; 0x17
    1558:	98 8f       	std	Y+24, r25	; 0x18
    155a:	a9 8f       	std	Y+25, r26	; 0x19
    155c:	ba 8f       	std	Y+26, r27	; 0x1a
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	80 68       	ori	r24, 0x80	; 128
    1562:	8c 83       	std	Y+4, r24	; 0x04
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	08 95       	ret

0000156c <_ZN6SdFile13addDirClusterEv>:
    156c:	cf 92       	push	r12
    156e:	df 92       	push	r13
    1570:	ef 92       	push	r14
    1572:	ff 92       	push	r15
    1574:	1f 93       	push	r17
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
    157a:	ec 01       	movw	r28, r24
    157c:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN6SdFile10addClusterEv>
    1580:	81 11       	cpse	r24, r1
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <_ZN6SdFile13addDirClusterEv+0x1c>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	4a c0       	rjmp	.+148    	; 0x161c <_ZN6SdFile13addDirClusterEv+0xb0>
    1588:	eb 8d       	ldd	r30, Y+27	; 0x1b
    158a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    158c:	ce 80       	ldd	r12, Y+6	; 0x06
    158e:	df 80       	ldd	r13, Y+7	; 0x07
    1590:	e8 84       	ldd	r14, Y+8	; 0x08
    1592:	f9 84       	ldd	r15, Y+9	; 0x09
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	c8 1a       	sub	r12, r24
    1598:	d1 08       	sbc	r13, r1
    159a:	e1 08       	sbc	r14, r1
    159c:	f1 08       	sbc	r15, r1
    159e:	05 84       	ldd	r0, Z+13	; 0x0d
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <_ZN6SdFile13addDirClusterEv+0x3e>
    15a2:	cc 0c       	add	r12, r12
    15a4:	dd 1c       	adc	r13, r13
    15a6:	ee 1c       	adc	r14, r14
    15a8:	ff 1c       	adc	r15, r15
    15aa:	0a 94       	dec	r0
    15ac:	d2 f7       	brpl	.-12     	; 0x15a2 <_ZN6SdFile13addDirClusterEv+0x36>
    15ae:	86 85       	ldd	r24, Z+14	; 0x0e
    15b0:	97 85       	ldd	r25, Z+15	; 0x0f
    15b2:	a0 89       	ldd	r26, Z+16	; 0x10
    15b4:	b1 89       	ldd	r27, Z+17	; 0x11
    15b6:	c8 0e       	add	r12, r24
    15b8:	d9 1e       	adc	r13, r25
    15ba:	ea 1e       	adc	r14, r26
    15bc:	fb 1e       	adc	r15, r27
    15be:	14 81       	ldd	r17, Z+4	; 0x04
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	c8 1a       	sub	r12, r24
    15c4:	d1 08       	sbc	r13, r1
    15c6:	e1 08       	sbc	r14, r1
    15c8:	f1 08       	sbc	r15, r1
    15ca:	11 23       	and	r17, r17
    15cc:	61 f0       	breq	.+24     	; 0x15e6 <_ZN6SdFile13addDirClusterEv+0x7a>
    15ce:	c7 01       	movw	r24, r14
    15d0:	b6 01       	movw	r22, r12
    15d2:	61 0f       	add	r22, r17
    15d4:	71 1d       	adc	r23, r1
    15d6:	81 1d       	adc	r24, r1
    15d8:	91 1d       	adc	r25, r1
    15da:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN8SdVolume14cacheZeroBlockEm>
    15de:	88 23       	and	r24, r24
    15e0:	89 f2       	breq	.-94     	; 0x1584 <_ZN6SdFile13addDirClusterEv+0x18>
    15e2:	11 50       	subi	r17, 0x01	; 1
    15e4:	f2 cf       	rjmp	.-28     	; 0x15ca <_ZN6SdFile13addDirClusterEv+0x5e>
    15e6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    15e8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	92 e0       	ldi	r25, 0x02	; 2
    15ee:	a0 e0       	ldi	r26, 0x00	; 0
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	05 84       	ldd	r0, Z+13	; 0x0d
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <_ZN6SdFile13addDirClusterEv+0x92>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	aa 1f       	adc	r26, r26
    15fc:	bb 1f       	adc	r27, r27
    15fe:	0a 94       	dec	r0
    1600:	d2 f7       	brpl	.-12     	; 0x15f6 <_ZN6SdFile13addDirClusterEv+0x8a>
    1602:	4b 89       	ldd	r20, Y+19	; 0x13
    1604:	5c 89       	ldd	r21, Y+20	; 0x14
    1606:	6d 89       	ldd	r22, Y+21	; 0x15
    1608:	7e 89       	ldd	r23, Y+22	; 0x16
    160a:	84 0f       	add	r24, r20
    160c:	95 1f       	adc	r25, r21
    160e:	a6 1f       	adc	r26, r22
    1610:	b7 1f       	adc	r27, r23
    1612:	8b 8b       	std	Y+19, r24	; 0x13
    1614:	9c 8b       	std	Y+20, r25	; 0x14
    1616:	ad 8b       	std	Y+21, r26	; 0x15
    1618:	be 8b       	std	Y+22, r27	; 0x16
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	1f 91       	pop	r17
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	08 95       	ret

0000162c <_ZN6SdFile13cacheDirEntryEh>:
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
    1632:	46 2f       	mov	r20, r22
    1634:	6e 85       	ldd	r22, Y+14	; 0x0e
    1636:	7f 85       	ldd	r23, Y+15	; 0x0f
    1638:	88 89       	ldd	r24, Y+16	; 0x10
    163a:	99 89       	ldd	r25, Y+17	; 0x11
    163c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    1640:	88 23       	and	r24, r24
    1642:	41 f0       	breq	.+16     	; 0x1654 <_ZN6SdFile13cacheDirEntryEh+0x28>
    1644:	8a 89       	ldd	r24, Y+18	; 0x12
    1646:	20 e2       	ldi	r18, 0x20	; 32
    1648:	82 9f       	mul	r24, r18
    164a:	c0 01       	movw	r24, r0
    164c:	11 24       	eor	r1, r1
    164e:	85 5a       	subi	r24, 0xA5	; 165
    1650:	9d 4f       	sbci	r25, 0xFD	; 253
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <_ZN6SdFile13cacheDirEntryEh+0x2c>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <_ZN6SdFile10make83NameEPKcPh>:
    165e:	fb 01       	movw	r30, r22
    1660:	9b 01       	movw	r18, r22
    1662:	25 5f       	subi	r18, 0xF5	; 245
    1664:	3f 4f       	sbci	r19, 0xFF	; 255
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	41 93       	st	Z+, r20
    166a:	e2 17       	cp	r30, r18
    166c:	f3 07       	cpc	r31, r19
    166e:	e1 f7       	brne	.-8      	; 0x1668 <_ZN6SdFile10make83NameEPKcPh+0xa>
    1670:	dc 01       	movw	r26, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	27 e0       	ldi	r18, 0x07	; 7
    1676:	8d 91       	ld	r24, X+
    1678:	88 23       	and	r24, r24
    167a:	19 f1       	breq	.+70     	; 0x16c2 <_ZN6SdFile10make83NameEPKcPh+0x64>
    167c:	8e 32       	cpi	r24, 0x2E	; 46
    167e:	29 f4       	brne	.+10     	; 0x168a <_ZN6SdFile10make83NameEPKcPh+0x2c>
    1680:	2a 30       	cpi	r18, 0x0A	; 10
    1682:	21 f1       	breq	.+72     	; 0x16cc <_ZN6SdFile10make83NameEPKcPh+0x6e>
    1684:	98 e0       	ldi	r25, 0x08	; 8
    1686:	2a e0       	ldi	r18, 0x0A	; 10
    1688:	f6 cf       	rjmp	.-20     	; 0x1676 <_ZN6SdFile10make83NameEPKcPh+0x18>
    168a:	e8 e7       	ldi	r30, 0x78	; 120
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	34 91       	lpm	r19, Z
    1690:	33 23       	and	r19, r19
    1692:	21 f0       	breq	.+8      	; 0x169c <_ZN6SdFile10make83NameEPKcPh+0x3e>
    1694:	31 96       	adiw	r30, 0x01	; 1
    1696:	83 13       	cpse	r24, r19
    1698:	fa cf       	rjmp	.-12     	; 0x168e <_ZN6SdFile10make83NameEPKcPh+0x30>
    169a:	18 c0       	rjmp	.+48     	; 0x16cc <_ZN6SdFile10make83NameEPKcPh+0x6e>
    169c:	29 17       	cp	r18, r25
    169e:	b0 f0       	brcs	.+44     	; 0x16cc <_ZN6SdFile10make83NameEPKcPh+0x6e>
    16a0:	3f ed       	ldi	r19, 0xDF	; 223
    16a2:	38 0f       	add	r19, r24
    16a4:	3e 35       	cpi	r19, 0x5E	; 94
    16a6:	90 f4       	brcc	.+36     	; 0x16cc <_ZN6SdFile10make83NameEPKcPh+0x6e>
    16a8:	31 e0       	ldi	r19, 0x01	; 1
    16aa:	39 0f       	add	r19, r25
    16ac:	fb 01       	movw	r30, r22
    16ae:	e9 0f       	add	r30, r25
    16b0:	f1 1d       	adc	r31, r1
    16b2:	9f e9       	ldi	r25, 0x9F	; 159
    16b4:	98 0f       	add	r25, r24
    16b6:	9a 31       	cpi	r25, 0x1A	; 26
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <_ZN6SdFile10make83NameEPKcPh+0x5e>
    16ba:	80 52       	subi	r24, 0x20	; 32
    16bc:	80 83       	st	Z, r24
    16be:	93 2f       	mov	r25, r19
    16c0:	da cf       	rjmp	.-76     	; 0x1676 <_ZN6SdFile10make83NameEPKcPh+0x18>
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	fb 01       	movw	r30, r22
    16c6:	90 81       	ld	r25, Z
    16c8:	90 32       	cpi	r25, 0x20	; 32
    16ca:	09 f4       	brne	.+2      	; 0x16ce <_ZN6SdFile10make83NameEPKcPh+0x70>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	08 95       	ret

000016d0 <_ZN6SdFile8openRootEP8SdVolume>:
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	fc 01       	movw	r30, r24
    16da:	25 81       	ldd	r18, Z+5	; 0x05
    16dc:	22 23       	and	r18, r18
    16de:	11 f0       	breq	.+4      	; 0x16e4 <_ZN6SdFile8openRootEP8SdVolume+0x14>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	42 c0       	rjmp	.+132    	; 0x1768 <_ZN6SdFile8openRootEP8SdVolume+0x98>
    16e4:	8b 01       	movw	r16, r22
    16e6:	ec 01       	movw	r28, r24
    16e8:	fb 01       	movw	r30, r22
    16ea:	87 89       	ldd	r24, Z+23	; 0x17
    16ec:	80 31       	cpi	r24, 0x10	; 16
    16ee:	b1 f4       	brne	.+44     	; 0x171c <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	1f 8a       	std	Y+23, r1	; 0x17
    16f6:	18 8e       	std	Y+24, r1	; 0x18
    16f8:	19 8e       	std	Y+25, r1	; 0x19
    16fa:	1a 8e       	std	Y+26, r1	; 0x1a
    16fc:	80 8d       	ldd	r24, Z+24	; 0x18
    16fe:	91 8d       	ldd	r25, Z+25	; 0x19
    1700:	a0 e0       	ldi	r26, 0x00	; 0
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	25 e0       	ldi	r18, 0x05	; 5
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	aa 1f       	adc	r26, r26
    170c:	bb 1f       	adc	r27, r27
    170e:	2a 95       	dec	r18
    1710:	d1 f7       	brne	.-12     	; 0x1706 <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1712:	8b 8b       	std	Y+19, r24	; 0x13
    1714:	9c 8b       	std	Y+20, r25	; 0x14
    1716:	ad 8b       	std	Y+21, r26	; 0x15
    1718:	be 8b       	std	Y+22, r27	; 0x16
    171a:	15 c0       	rjmp	.+42     	; 0x1746 <_ZN6SdFile8openRootEP8SdVolume+0x76>
    171c:	80 32       	cpi	r24, 0x20	; 32
    171e:	01 f7       	brne	.-64     	; 0x16e0 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1720:	83 e0       	ldi	r24, 0x03	; 3
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	fb 01       	movw	r30, r22
    1726:	42 8d       	ldd	r20, Z+26	; 0x1a
    1728:	53 8d       	ldd	r21, Z+27	; 0x1b
    172a:	64 8d       	ldd	r22, Z+28	; 0x1c
    172c:	75 8d       	ldd	r23, Z+29	; 0x1d
    172e:	4f 8b       	std	Y+23, r20	; 0x17
    1730:	58 8f       	std	Y+24, r21	; 0x18
    1732:	69 8f       	std	Y+25, r22	; 0x19
    1734:	7a 8f       	std	Y+26, r23	; 0x1a
    1736:	9e 01       	movw	r18, r28
    1738:	2d 5e       	subi	r18, 0xED	; 237
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	c8 01       	movw	r24, r16
    173e:	0e 94 c8 12 	call	0x2590	; 0x2590 <_ZNK8SdVolume9chainSizeEmPm>
    1742:	88 23       	and	r24, r24
    1744:	69 f2       	breq	.-102    	; 0x16e0 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1746:	1c 8f       	std	Y+28, r17	; 0x1c
    1748:	0b 8f       	std	Y+27, r16	; 0x1b
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	8c 83       	std	Y+4, r24	; 0x04
    174e:	1e 82       	std	Y+6, r1	; 0x06
    1750:	1f 82       	std	Y+7, r1	; 0x07
    1752:	18 86       	std	Y+8, r1	; 0x08
    1754:	19 86       	std	Y+9, r1	; 0x09
    1756:	1a 86       	std	Y+10, r1	; 0x0a
    1758:	1b 86       	std	Y+11, r1	; 0x0b
    175a:	1c 86       	std	Y+12, r1	; 0x0c
    175c:	1d 86       	std	Y+13, r1	; 0x0d
    175e:	1e 86       	std	Y+14, r1	; 0x0e
    1760:	1f 86       	std	Y+15, r1	; 0x0f
    1762:	18 8a       	std	Y+16, r1	; 0x10
    1764:	19 8a       	std	Y+17, r1	; 0x11
    1766:	1a 8a       	std	Y+18, r1	; 0x12
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <_ZN6SdFile4readEPvj>:
    1772:	2f 92       	push	r2
    1774:	3f 92       	push	r3
    1776:	4f 92       	push	r4
    1778:	5f 92       	push	r5
    177a:	6f 92       	push	r6
    177c:	7f 92       	push	r7
    177e:	8f 92       	push	r8
    1780:	9f 92       	push	r9
    1782:	af 92       	push	r10
    1784:	bf 92       	push	r11
    1786:	cf 92       	push	r12
    1788:	df 92       	push	r13
    178a:	ef 92       	push	r14
    178c:	ff 92       	push	r15
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
    1796:	ec 01       	movw	r28, r24
    1798:	5b 01       	movw	r10, r22
    179a:	4a 01       	movw	r8, r20
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	81 11       	cpse	r24, r1
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <_ZN6SdFile4readEPvj+0x36>
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	d7 c0       	rjmp	.+430    	; 0x1956 <_ZN6SdFile4readEPvj+0x1e4>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	80 ff       	sbrs	r24, 0
    17ac:	fa cf       	rjmp	.-12     	; 0x17a2 <_ZN6SdFile4readEPvj+0x30>
    17ae:	4b 88       	ldd	r4, Y+19	; 0x13
    17b0:	5c 88       	ldd	r5, Y+20	; 0x14
    17b2:	6d 88       	ldd	r6, Y+21	; 0x15
    17b4:	7e 88       	ldd	r7, Y+22	; 0x16
    17b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    17b8:	5b 85       	ldd	r21, Y+11	; 0x0b
    17ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    17bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    17be:	c4 01       	movw	r24, r8
    17c0:	a0 e0       	ldi	r26, 0x00	; 0
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	93 01       	movw	r18, r6
    17c6:	82 01       	movw	r16, r4
    17c8:	04 1b       	sub	r16, r20
    17ca:	15 0b       	sbc	r17, r21
    17cc:	26 0b       	sbc	r18, r22
    17ce:	37 0b       	sbc	r19, r23
    17d0:	08 17       	cp	r16, r24
    17d2:	19 07       	cpc	r17, r25
    17d4:	2a 07       	cpc	r18, r26
    17d6:	3b 07       	cpc	r19, r27
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <_ZN6SdFile4readEPvj+0x6e>
    17da:	42 01       	movw	r8, r4
    17dc:	84 1a       	sub	r8, r20
    17de:	95 0a       	sbc	r9, r21
    17e0:	24 01       	movw	r4, r8
    17e2:	1e 01       	movw	r2, r28
    17e4:	26 e0       	ldi	r18, 0x06	; 6
    17e6:	22 0e       	add	r2, r18
    17e8:	31 1c       	adc	r3, r1
    17ea:	41 14       	cp	r4, r1
    17ec:	51 04       	cpc	r5, r1
    17ee:	09 f4       	brne	.+2      	; 0x17f2 <_ZN6SdFile4readEPvj+0x80>
    17f0:	7e c0       	rjmp	.+252    	; 0x18ee <_ZN6SdFile4readEPvj+0x17c>
    17f2:	4a 85       	ldd	r20, Y+10	; 0x0a
    17f4:	5b 85       	ldd	r21, Y+11	; 0x0b
    17f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    17f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    17fa:	6a 01       	movw	r12, r20
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	d8 22       	and	r13, r24
    1800:	ed 81       	ldd	r30, Y+5	; 0x05
    1802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1806:	8a 01       	movw	r16, r20
    1808:	9b 01       	movw	r18, r22
    180a:	f9 e0       	ldi	r31, 0x09	; 9
    180c:	36 95       	lsr	r19
    180e:	27 95       	ror	r18
    1810:	17 95       	ror	r17
    1812:	07 95       	ror	r16
    1814:	fa 95       	dec	r31
    1816:	d1 f7       	brne	.-12     	; 0x180c <_ZN6SdFile4readEPvj+0x9a>
    1818:	e2 30       	cpi	r30, 0x02	; 2
    181a:	61 f4       	brne	.+24     	; 0x1834 <_ZN6SdFile4readEPvj+0xc2>
    181c:	fc 01       	movw	r30, r24
    181e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1820:	93 8d       	ldd	r25, Z+27	; 0x1b
    1822:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1824:	b5 8d       	ldd	r27, Z+29	; 0x1d
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	60 0f       	add	r22, r16
    182c:	71 1f       	adc	r23, r17
    182e:	82 1f       	adc	r24, r18
    1830:	93 1f       	adc	r25, r19
    1832:	3f c0       	rjmp	.+126    	; 0x18b2 <_ZN6SdFile4readEPvj+0x140>
    1834:	fc 01       	movw	r30, r24
    1836:	74 80       	ldd	r7, Z+4	; 0x04
    1838:	7a 94       	dec	r7
    183a:	70 22       	and	r7, r16
    183c:	c1 14       	cp	r12, r1
    183e:	d1 04       	cpc	r13, r1
    1840:	c9 f4       	brne	.+50     	; 0x1874 <_ZN6SdFile4readEPvj+0x102>
    1842:	71 10       	cpse	r7, r1
    1844:	17 c0       	rjmp	.+46     	; 0x1874 <_ZN6SdFile4readEPvj+0x102>
    1846:	45 2b       	or	r20, r21
    1848:	46 2b       	or	r20, r22
    184a:	47 2b       	or	r20, r23
    184c:	49 f4       	brne	.+18     	; 0x1860 <_ZN6SdFile4readEPvj+0xee>
    184e:	8f 89       	ldd	r24, Y+23	; 0x17
    1850:	98 8d       	ldd	r25, Y+24	; 0x18
    1852:	a9 8d       	ldd	r26, Y+25	; 0x19
    1854:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1856:	8e 83       	std	Y+6, r24	; 0x06
    1858:	9f 83       	std	Y+7, r25	; 0x07
    185a:	a8 87       	std	Y+8, r26	; 0x08
    185c:	b9 87       	std	Y+9, r27	; 0x09
    185e:	0a c0       	rjmp	.+20     	; 0x1874 <_ZN6SdFile4readEPvj+0x102>
    1860:	4e 81       	ldd	r20, Y+6	; 0x06
    1862:	5f 81       	ldd	r21, Y+7	; 0x07
    1864:	68 85       	ldd	r22, Y+8	; 0x08
    1866:	79 85       	ldd	r23, Y+9	; 0x09
    1868:	91 01       	movw	r18, r2
    186a:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <_ZN6SdFile4readEPvj+0x102>
    1872:	97 cf       	rjmp	.-210    	; 0x17a2 <_ZN6SdFile4readEPvj+0x30>
    1874:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1876:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1878:	8e 81       	ldd	r24, Y+6	; 0x06
    187a:	9f 81       	ldd	r25, Y+7	; 0x07
    187c:	a8 85       	ldd	r26, Y+8	; 0x08
    187e:	b9 85       	ldd	r27, Y+9	; 0x09
    1880:	02 97       	sbiw	r24, 0x02	; 2
    1882:	a1 09       	sbc	r26, r1
    1884:	b1 09       	sbc	r27, r1
    1886:	05 84       	ldd	r0, Z+13	; 0x0d
    1888:	04 c0       	rjmp	.+8      	; 0x1892 <_ZN6SdFile4readEPvj+0x120>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	aa 1f       	adc	r26, r26
    1890:	bb 1f       	adc	r27, r27
    1892:	0a 94       	dec	r0
    1894:	d2 f7       	brpl	.-12     	; 0x188a <_ZN6SdFile4readEPvj+0x118>
    1896:	46 85       	ldd	r20, Z+14	; 0x0e
    1898:	57 85       	ldd	r21, Z+15	; 0x0f
    189a:	60 89       	ldd	r22, Z+16	; 0x10
    189c:	71 89       	ldd	r23, Z+17	; 0x11
    189e:	84 0f       	add	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	a6 1f       	adc	r26, r22
    18a4:	b7 1f       	adc	r27, r23
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	67 0d       	add	r22, r7
    18ac:	71 1d       	adc	r23, r1
    18ae:	81 1d       	adc	r24, r1
    18b0:	91 1d       	adc	r25, r1
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	32 e0       	ldi	r19, 0x02	; 2
    18b6:	2c 19       	sub	r18, r12
    18b8:	3d 09       	sbc	r19, r13
    18ba:	32 01       	movw	r6, r4
    18bc:	24 15       	cp	r18, r4
    18be:	35 05       	cpc	r19, r5
    18c0:	08 f4       	brcc	.+2      	; 0x18c4 <_ZN6SdFile4readEPvj+0x152>
    18c2:	39 01       	movw	r6, r18
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	26 fd       	sbrc	r18, 6
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <_ZN6SdFile4readEPvj+0x160>
    18ca:	61 14       	cp	r6, r1
    18cc:	f2 e0       	ldi	r31, 0x02	; 2
    18ce:	7f 06       	cpc	r7, r31
    18d0:	79 f5       	brne	.+94     	; 0x1930 <_ZN6SdFile4readEPvj+0x1be>
    18d2:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    18d6:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    18da:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    18de:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    18e2:	60 17       	cp	r22, r16
    18e4:	71 07       	cpc	r23, r17
    18e6:	82 07       	cpc	r24, r18
    18e8:	93 07       	cpc	r25, r19
    18ea:	19 f4       	brne	.+6      	; 0x18f2 <_ZN6SdFile4readEPvj+0x180>
    18ec:	21 c0       	rjmp	.+66     	; 0x1930 <_ZN6SdFile4readEPvj+0x1be>
    18ee:	c4 01       	movw	r24, r8
    18f0:	32 c0       	rjmp	.+100    	; 0x1956 <_ZN6SdFile4readEPvj+0x1e4>
    18f2:	75 01       	movw	r14, r10
    18f4:	83 01       	movw	r16, r6
    18f6:	96 01       	movw	r18, r12
    18f8:	ab 01       	movw	r20, r22
    18fa:	bc 01       	movw	r22, r24
    18fc:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_ZN8SdVolume7sdCard_E>
    1900:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <_ZN8SdVolume7sdCard_E+0x1>
    1904:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <_ZN7Sd2Card8readDataEmjjPh>
    1908:	88 23       	and	r24, r24
    190a:	09 f4       	brne	.+2      	; 0x190e <_ZN6SdFile4readEPvj+0x19c>
    190c:	4a cf       	rjmp	.-364    	; 0x17a2 <_ZN6SdFile4readEPvj+0x30>
    190e:	a6 0c       	add	r10, r6
    1910:	b7 1c       	adc	r11, r7
    1912:	8a 85       	ldd	r24, Y+10	; 0x0a
    1914:	9b 85       	ldd	r25, Y+11	; 0x0b
    1916:	ac 85       	ldd	r26, Y+12	; 0x0c
    1918:	bd 85       	ldd	r27, Y+13	; 0x0d
    191a:	86 0d       	add	r24, r6
    191c:	97 1d       	adc	r25, r7
    191e:	a1 1d       	adc	r26, r1
    1920:	b1 1d       	adc	r27, r1
    1922:	8a 87       	std	Y+10, r24	; 0x0a
    1924:	9b 87       	std	Y+11, r25	; 0x0b
    1926:	ac 87       	std	Y+12, r26	; 0x0c
    1928:	bd 87       	std	Y+13, r27	; 0x0d
    192a:	46 18       	sub	r4, r6
    192c:	57 08       	sbc	r5, r7
    192e:	5d cf       	rjmp	.-326    	; 0x17ea <_ZN6SdFile4readEPvj+0x78>
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    1936:	88 23       	and	r24, r24
    1938:	09 f4       	brne	.+2      	; 0x193c <_ZN6SdFile4readEPvj+0x1ca>
    193a:	33 cf       	rjmp	.-410    	; 0x17a2 <_ZN6SdFile4readEPvj+0x30>
    193c:	f6 01       	movw	r30, r12
    193e:	e5 5a       	subi	r30, 0xA5	; 165
    1940:	fd 4f       	sbci	r31, 0xFD	; 253
    1942:	d5 01       	movw	r26, r10
    1944:	cf 01       	movw	r24, r30
    1946:	86 0d       	add	r24, r6
    1948:	97 1d       	adc	r25, r7
    194a:	8e 17       	cp	r24, r30
    194c:	9f 07       	cpc	r25, r31
    194e:	f9 f2       	breq	.-66     	; 0x190e <_ZN6SdFile4readEPvj+0x19c>
    1950:	21 91       	ld	r18, Z+
    1952:	2d 93       	st	X+, r18
    1954:	fa cf       	rjmp	.-12     	; 0x194a <_ZN6SdFile4readEPvj+0x1d8>
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	9f 90       	pop	r9
    196c:	8f 90       	pop	r8
    196e:	7f 90       	pop	r7
    1970:	6f 90       	pop	r6
    1972:	5f 90       	pop	r5
    1974:	4f 90       	pop	r4
    1976:	3f 90       	pop	r3
    1978:	2f 90       	pop	r2
    197a:	08 95       	ret

0000197c <_ZN6SdFile12readDirCacheEv>:
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	1f 92       	push	r1
    1988:	cd b7       	in	r28, 0x3d	; 61
    198a:	de b7       	in	r29, 0x3e	; 62
    198c:	fc 01       	movw	r30, r24
    198e:	25 81       	ldd	r18, Z+5	; 0x05
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	18 f4       	brcc	.+6      	; 0x199a <_ZN6SdFile12readDirCacheEv+0x1e>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	33 c0       	rjmp	.+102    	; 0x1a00 <_ZN6SdFile12readDirCacheEv+0x84>
    199a:	8c 01       	movw	r16, r24
    199c:	fc 01       	movw	r30, r24
    199e:	42 85       	ldd	r20, Z+10	; 0x0a
    19a0:	53 85       	ldd	r21, Z+11	; 0x0b
    19a2:	64 85       	ldd	r22, Z+12	; 0x0c
    19a4:	75 85       	ldd	r23, Z+13	; 0x0d
    19a6:	85 e0       	ldi	r24, 0x05	; 5
    19a8:	76 95       	lsr	r23
    19aa:	67 95       	ror	r22
    19ac:	57 95       	ror	r21
    19ae:	47 95       	ror	r20
    19b0:	8a 95       	dec	r24
    19b2:	d1 f7       	brne	.-12     	; 0x19a8 <_ZN6SdFile12readDirCacheEv+0x2c>
    19b4:	f4 2f       	mov	r31, r20
    19b6:	ff 70       	andi	r31, 0x0F	; 15
    19b8:	ff 2e       	mov	r15, r31
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	be 01       	movw	r22, r28
    19c0:	6f 5f       	subi	r22, 0xFF	; 255
    19c2:	7f 4f       	sbci	r23, 0xFF	; 255
    19c4:	c8 01       	movw	r24, r16
    19c6:	0e 94 b9 0b 	call	0x1772	; 0x1772 <_ZN6SdFile4readEPvj>
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	19 f4       	brne	.+6      	; 0x19d4 <_ZN6SdFile12readDirCacheEv+0x58>
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <_ZN6SdFile12readDirCacheEv+0x5c>
    19d4:	8f ef       	ldi	r24, 0xFF	; 255
    19d6:	9f ef       	ldi	r25, 0xFF	; 255
    19d8:	01 96       	adiw	r24, 0x01	; 1
    19da:	e1 f2       	breq	.-72     	; 0x1994 <_ZN6SdFile12readDirCacheEv+0x18>
    19dc:	f8 01       	movw	r30, r16
    19de:	82 85       	ldd	r24, Z+10	; 0x0a
    19e0:	93 85       	ldd	r25, Z+11	; 0x0b
    19e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    19e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    19e6:	4f 96       	adiw	r24, 0x1f	; 31
    19e8:	a1 1d       	adc	r26, r1
    19ea:	b1 1d       	adc	r27, r1
    19ec:	82 87       	std	Z+10, r24	; 0x0a
    19ee:	93 87       	std	Z+11, r25	; 0x0b
    19f0:	a4 87       	std	Z+12, r26	; 0x0c
    19f2:	b5 87       	std	Z+13, r27	; 0x0d
    19f4:	f0 e2       	ldi	r31, 0x20	; 32
    19f6:	ff 9e       	mul	r15, r31
    19f8:	c0 01       	movw	r24, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	85 5a       	subi	r24, 0xA5	; 165
    19fe:	9d 4f       	sbci	r25, 0xFD	; 253
    1a00:	0f 90       	pop	r0
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	08 95       	ret

00001a0e <_ZN6SdFile7seekSetEm>:
    1a0e:	8f 92       	push	r8
    1a10:	9f 92       	push	r9
    1a12:	af 92       	push	r10
    1a14:	bf 92       	push	r11
    1a16:	cf 92       	push	r12
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <_ZN6SdFile7seekSetEm+0x24>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	78 c0       	rjmp	.+240    	; 0x1b22 <_ZN6SdFile7seekSetEm+0x114>
    1a32:	0b 89       	ldd	r16, Y+19	; 0x13
    1a34:	1c 89       	ldd	r17, Y+20	; 0x14
    1a36:	2d 89       	ldd	r18, Y+21	; 0x15
    1a38:	3e 89       	ldd	r19, Y+22	; 0x16
    1a3a:	04 17       	cp	r16, r20
    1a3c:	15 07       	cpc	r17, r21
    1a3e:	26 07       	cpc	r18, r22
    1a40:	37 07       	cpc	r19, r23
    1a42:	a8 f3       	brcs	.-22     	; 0x1a2e <_ZN6SdFile7seekSetEm+0x20>
    1a44:	6a 01       	movw	r12, r20
    1a46:	7b 01       	movw	r14, r22
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	29 f4       	brne	.+10     	; 0x1a56 <_ZN6SdFile7seekSetEm+0x48>
    1a4c:	ca 86       	std	Y+10, r12	; 0x0a
    1a4e:	db 86       	std	Y+11, r13	; 0x0b
    1a50:	ec 86       	std	Y+12, r14	; 0x0c
    1a52:	fd 86       	std	Y+13, r15	; 0x0d
    1a54:	0d c0       	rjmp	.+26     	; 0x1a70 <_ZN6SdFile7seekSetEm+0x62>
    1a56:	c1 14       	cp	r12, r1
    1a58:	d1 04       	cpc	r13, r1
    1a5a:	e1 04       	cpc	r14, r1
    1a5c:	f1 04       	cpc	r15, r1
    1a5e:	51 f4       	brne	.+20     	; 0x1a74 <_ZN6SdFile7seekSetEm+0x66>
    1a60:	1e 82       	std	Y+6, r1	; 0x06
    1a62:	1f 82       	std	Y+7, r1	; 0x07
    1a64:	18 86       	std	Y+8, r1	; 0x08
    1a66:	19 86       	std	Y+9, r1	; 0x09
    1a68:	1a 86       	std	Y+10, r1	; 0x0a
    1a6a:	1b 86       	std	Y+11, r1	; 0x0b
    1a6c:	1c 86       	std	Y+12, r1	; 0x0c
    1a6e:	1d 86       	std	Y+13, r1	; 0x0d
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	57 c0       	rjmp	.+174    	; 0x1b22 <_ZN6SdFile7seekSetEm+0x114>
    1a74:	8a 84       	ldd	r8, Y+10	; 0x0a
    1a76:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a78:	ac 84       	ldd	r10, Y+12	; 0x0c
    1a7a:	bd 84       	ldd	r11, Y+13	; 0x0d
    1a7c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1a7e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1a80:	25 85       	ldd	r18, Z+13	; 0x0d
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	27 5f       	subi	r18, 0xF7	; 247
    1a86:	3f 4f       	sbci	r19, 0xFF	; 255
    1a88:	b5 01       	movw	r22, r10
    1a8a:	a4 01       	movw	r20, r8
    1a8c:	41 50       	subi	r20, 0x01	; 1
    1a8e:	51 09       	sbc	r21, r1
    1a90:	61 09       	sbc	r22, r1
    1a92:	71 09       	sbc	r23, r1
    1a94:	02 2e       	mov	r0, r18
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <_ZN6SdFile7seekSetEm+0x92>
    1a98:	76 95       	lsr	r23
    1a9a:	67 95       	ror	r22
    1a9c:	57 95       	ror	r21
    1a9e:	47 95       	ror	r20
    1aa0:	0a 94       	dec	r0
    1aa2:	d2 f7       	brpl	.-12     	; 0x1a98 <_ZN6SdFile7seekSetEm+0x8a>
    1aa4:	d7 01       	movw	r26, r14
    1aa6:	c6 01       	movw	r24, r12
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	a1 09       	sbc	r26, r1
    1aac:	b1 09       	sbc	r27, r1
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <_ZN6SdFile7seekSetEm+0xaa>
    1ab0:	b6 95       	lsr	r27
    1ab2:	a7 95       	ror	r26
    1ab4:	97 95       	ror	r25
    1ab6:	87 95       	ror	r24
    1ab8:	2a 95       	dec	r18
    1aba:	d2 f7       	brpl	.-12     	; 0x1ab0 <_ZN6SdFile7seekSetEm+0xa2>
    1abc:	84 17       	cp	r24, r20
    1abe:	95 07       	cpc	r25, r21
    1ac0:	a6 07       	cpc	r26, r22
    1ac2:	b7 07       	cpc	r27, r23
    1ac4:	20 f0       	brcs	.+8      	; 0x1ace <_ZN6SdFile7seekSetEm+0xc0>
    1ac6:	89 28       	or	r8, r9
    1ac8:	8a 28       	or	r8, r10
    1aca:	8b 28       	or	r8, r11
    1acc:	71 f4       	brne	.+28     	; 0x1aea <_ZN6SdFile7seekSetEm+0xdc>
    1ace:	4f 89       	ldd	r20, Y+23	; 0x17
    1ad0:	58 8d       	ldd	r21, Y+24	; 0x18
    1ad2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ad4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ad6:	4e 83       	std	Y+6, r20	; 0x06
    1ad8:	5f 83       	std	Y+7, r21	; 0x07
    1ada:	68 87       	std	Y+8, r22	; 0x08
    1adc:	79 87       	std	Y+9, r23	; 0x09
    1ade:	4c 01       	movw	r8, r24
    1ae0:	5d 01       	movw	r10, r26
    1ae2:	8e 01       	movw	r16, r28
    1ae4:	0a 5f       	subi	r16, 0xFA	; 250
    1ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae8:	16 c0       	rjmp	.+44     	; 0x1b16 <_ZN6SdFile7seekSetEm+0x108>
    1aea:	84 1b       	sub	r24, r20
    1aec:	95 0b       	sbc	r25, r21
    1aee:	a6 0b       	sbc	r26, r22
    1af0:	b7 0b       	sbc	r27, r23
    1af2:	f5 cf       	rjmp	.-22     	; 0x1ade <_ZN6SdFile7seekSetEm+0xd0>
    1af4:	4e 81       	ldd	r20, Y+6	; 0x06
    1af6:	5f 81       	ldd	r21, Y+7	; 0x07
    1af8:	68 85       	ldd	r22, Y+8	; 0x08
    1afa:	79 85       	ldd	r23, Y+9	; 0x09
    1afc:	98 01       	movw	r18, r16
    1afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b02:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    1b06:	91 e0       	ldi	r25, 0x01	; 1
    1b08:	89 1a       	sub	r8, r25
    1b0a:	91 08       	sbc	r9, r1
    1b0c:	a1 08       	sbc	r10, r1
    1b0e:	b1 08       	sbc	r11, r1
    1b10:	88 23       	and	r24, r24
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <_ZN6SdFile7seekSetEm+0x108>
    1b14:	8c cf       	rjmp	.-232    	; 0x1a2e <_ZN6SdFile7seekSetEm+0x20>
    1b16:	81 14       	cp	r8, r1
    1b18:	91 04       	cpc	r9, r1
    1b1a:	a1 04       	cpc	r10, r1
    1b1c:	b1 04       	cpc	r11, r1
    1b1e:	51 f7       	brne	.-44     	; 0x1af4 <_ZN6SdFile7seekSetEm+0xe6>
    1b20:	95 cf       	rjmp	.-214    	; 0x1a4c <_ZN6SdFile7seekSetEm+0x3e>
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	df 90       	pop	r13
    1b30:	cf 90       	pop	r12
    1b32:	bf 90       	pop	r11
    1b34:	af 90       	pop	r10
    1b36:	9f 90       	pop	r9
    1b38:	8f 90       	pop	r8
    1b3a:	08 95       	ret

00001b3c <_ZN6SdFile4syncEv>:
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	cf 93       	push	r28
    1b42:	df 93       	push	r29
    1b44:	ec 01       	movw	r28, r24
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	88 23       	and	r24, r24
    1b4a:	c9 f1       	breq	.+114    	; 0x1bbe <_ZN6SdFile4syncEv+0x82>
    1b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4e:	87 ff       	sbrs	r24, 7
    1b50:	30 c0       	rjmp	.+96     	; 0x1bb2 <_ZN6SdFile4syncEv+0x76>
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	ce 01       	movw	r24, r28
    1b56:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN6SdFile13cacheDirEntryEh>
    1b5a:	8c 01       	movw	r16, r24
    1b5c:	89 2b       	or	r24, r25
    1b5e:	79 f1       	breq	.+94     	; 0x1bbe <_ZN6SdFile4syncEv+0x82>
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	48 f4       	brcc	.+18     	; 0x1b78 <_ZN6SdFile4syncEv+0x3c>
    1b66:	8b 89       	ldd	r24, Y+19	; 0x13
    1b68:	9c 89       	ldd	r25, Y+20	; 0x14
    1b6a:	ad 89       	ldd	r26, Y+21	; 0x15
    1b6c:	be 89       	ldd	r27, Y+22	; 0x16
    1b6e:	f8 01       	movw	r30, r16
    1b70:	84 8f       	std	Z+28, r24	; 0x1c
    1b72:	95 8f       	std	Z+29, r25	; 0x1d
    1b74:	a6 8f       	std	Z+30, r26	; 0x1e
    1b76:	b7 8f       	std	Z+31, r27	; 0x1f
    1b78:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7c:	a9 8d       	ldd	r26, Y+25	; 0x19
    1b7e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1b80:	f8 01       	movw	r30, r16
    1b82:	93 8f       	std	Z+27, r25	; 0x1b
    1b84:	82 8f       	std	Z+26, r24	; 0x1a
    1b86:	b5 8b       	std	Z+21, r27	; 0x15
    1b88:	a4 8b       	std	Z+20, r26	; 0x14
    1b8a:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <_ZN6SdFile9dateTime_E>
    1b8e:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <_ZN6SdFile9dateTime_E+0x1>
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	59 f0       	breq	.+22     	; 0x1bac <_ZN6SdFile4syncEv+0x70>
    1b96:	b8 01       	movw	r22, r16
    1b98:	6a 5e       	subi	r22, 0xEA	; 234
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	48 96       	adiw	r24, 0x18	; 24
    1ba0:	09 95       	icall
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 8d       	ldd	r24, Z+24	; 0x18
    1ba6:	91 8d       	ldd	r25, Z+25	; 0x19
    1ba8:	93 8b       	std	Z+19, r25	; 0x13
    1baa:	82 8b       	std	Z+18, r24	; 0x12
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	8f 77       	andi	r24, 0x7F	; 127
    1bb0:	8c 83       	std	Y+4, r24	; 0x04
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <_ZN8SdVolume10cacheFlushEv>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <_ZN6SdFile5closeEv>:
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	ec 01       	movw	r28, r24
    1bd0:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN6SdFile4syncEv>
    1bd4:	88 23       	and	r24, r24
    1bd6:	11 f0       	breq	.+4      	; 0x1bdc <_ZN6SdFile5closeEv+0x12>
    1bd8:	1d 82       	std	Y+5, r1	; 0x05
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <_ZN6SdFile8truncateEm>:
    1be2:	4f 92       	push	r4
    1be4:	5f 92       	push	r5
    1be6:	6f 92       	push	r6
    1be8:	7f 92       	push	r7
    1bea:	8f 92       	push	r8
    1bec:	9f 92       	push	r9
    1bee:	af 92       	push	r10
    1bf0:	bf 92       	push	r11
    1bf2:	ef 92       	push	r14
    1bf4:	ff 92       	push	r15
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <_ZN6SdFile8truncateEm+0x1e>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <_ZN6SdFile8truncateEm+0x20>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	fc 01       	movw	r30, r24
    1c08:	85 81       	ldd	r24, Z+5	; 0x05
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	e9 f4       	brne	.+58     	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1c0e:	84 81       	ldd	r24, Z+4	; 0x04
    1c10:	81 ff       	sbrs	r24, 1
    1c12:	1a c0       	rjmp	.+52     	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1c14:	83 89       	ldd	r24, Z+19	; 0x13
    1c16:	94 89       	ldd	r25, Z+20	; 0x14
    1c18:	a5 89       	ldd	r26, Z+21	; 0x15
    1c1a:	b6 89       	ldd	r27, Z+22	; 0x16
    1c1c:	84 17       	cp	r24, r20
    1c1e:	95 07       	cpc	r25, r21
    1c20:	a6 07       	cpc	r26, r22
    1c22:	b7 07       	cpc	r27, r23
    1c24:	88 f0       	brcs	.+34     	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1c26:	89 2b       	or	r24, r25
    1c28:	8a 2b       	or	r24, r26
    1c2a:	8b 2b       	or	r24, r27
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <_ZN6SdFile8truncateEm+0x4e>
    1c2e:	79 c0       	rjmp	.+242    	; 0x1d22 <_ZN6SdFile8truncateEm+0x140>
    1c30:	4a 01       	movw	r8, r20
    1c32:	5b 01       	movw	r10, r22
    1c34:	7f 01       	movw	r14, r30
    1c36:	42 84       	ldd	r4, Z+10	; 0x0a
    1c38:	53 84       	ldd	r5, Z+11	; 0x0b
    1c3a:	64 84       	ldd	r6, Z+12	; 0x0c
    1c3c:	75 84       	ldd	r7, Z+13	; 0x0d
    1c3e:	cf 01       	movw	r24, r30
    1c40:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN6SdFile7seekSetEm>
    1c44:	81 11       	cpse	r24, r1
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <_ZN6SdFile8truncateEm+0x6a>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	6c c0       	rjmp	.+216    	; 0x1d24 <_ZN6SdFile8truncateEm+0x142>
    1c4c:	f7 01       	movw	r30, r14
    1c4e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c50:	94 8d       	ldd	r25, Z+28	; 0x1c
    1c52:	81 14       	cp	r8, r1
    1c54:	91 04       	cpc	r9, r1
    1c56:	a1 04       	cpc	r10, r1
    1c58:	b1 04       	cpc	r11, r1
    1c5a:	71 f4       	brne	.+28     	; 0x1c78 <_ZN6SdFile8truncateEm+0x96>
    1c5c:	47 89       	ldd	r20, Z+23	; 0x17
    1c5e:	50 8d       	ldd	r21, Z+24	; 0x18
    1c60:	61 8d       	ldd	r22, Z+25	; 0x19
    1c62:	72 8d       	ldd	r23, Z+26	; 0x1a
    1c64:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN8SdVolume9freeChainEm>
    1c68:	88 23       	and	r24, r24
    1c6a:	71 f3       	breq	.-36     	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1c6c:	f7 01       	movw	r30, r14
    1c6e:	17 8a       	std	Z+23, r1	; 0x17
    1c70:	10 8e       	std	Z+24, r1	; 0x18
    1c72:	11 8e       	std	Z+25, r1	; 0x19
    1c74:	12 8e       	std	Z+26, r1	; 0x1a
    1c76:	3a c0       	rjmp	.+116    	; 0x1cec <_ZN6SdFile8truncateEm+0x10a>
    1c78:	f7 01       	movw	r30, r14
    1c7a:	46 81       	ldd	r20, Z+6	; 0x06
    1c7c:	57 81       	ldd	r21, Z+7	; 0x07
    1c7e:	60 85       	ldd	r22, Z+8	; 0x08
    1c80:	71 85       	ldd	r23, Z+9	; 0x09
    1c82:	9e 01       	movw	r18, r28
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
    1c86:	3f 4f       	sbci	r19, 0xFF	; 255
    1c88:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    1c8c:	88 23       	and	r24, r24
    1c8e:	e1 f2       	breq	.-72     	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1c90:	49 81       	ldd	r20, Y+1	; 0x01
    1c92:	5a 81       	ldd	r21, Y+2	; 0x02
    1c94:	6b 81       	ldd	r22, Y+3	; 0x03
    1c96:	7c 81       	ldd	r23, Y+4	; 0x04
    1c98:	f7 01       	movw	r30, r14
    1c9a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c9c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	27 89       	ldd	r18, Z+23	; 0x17
    1ca2:	20 31       	cpi	r18, 0x10	; 16
    1ca4:	29 f0       	breq	.+10     	; 0x1cb0 <_ZN6SdFile8truncateEm+0xce>
    1ca6:	08 ef       	ldi	r16, 0xF8	; 248
    1ca8:	1f ef       	ldi	r17, 0xFF	; 255
    1caa:	2f ef       	ldi	r18, 0xFF	; 255
    1cac:	3f e0       	ldi	r19, 0x0F	; 15
    1cae:	04 c0       	rjmp	.+8      	; 0x1cb8 <_ZN6SdFile8truncateEm+0xd6>
    1cb0:	08 ef       	ldi	r16, 0xF8	; 248
    1cb2:	1f ef       	ldi	r17, 0xFF	; 255
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 17       	cp	r20, r16
    1cba:	51 07       	cpc	r21, r17
    1cbc:	62 07       	cpc	r22, r18
    1cbe:	73 07       	cpc	r23, r19
    1cc0:	a8 f4       	brcc	.+42     	; 0x1cec <_ZN6SdFile8truncateEm+0x10a>
    1cc2:	0e 94 e7 14 	call	0x29ce	; 0x29ce <_ZN8SdVolume9freeChainEm>
    1cc6:	88 23       	and	r24, r24
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <_ZN6SdFile8truncateEm+0xea>
    1cca:	be cf       	rjmp	.-132    	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1ccc:	f7 01       	movw	r30, r14
    1cce:	46 81       	ldd	r20, Z+6	; 0x06
    1cd0:	57 81       	ldd	r21, Z+7	; 0x07
    1cd2:	60 85       	ldd	r22, Z+8	; 0x08
    1cd4:	71 85       	ldd	r23, Z+9	; 0x09
    1cd6:	0f ef       	ldi	r16, 0xFF	; 255
    1cd8:	1f ef       	ldi	r17, 0xFF	; 255
    1cda:	2f ef       	ldi	r18, 0xFF	; 255
    1cdc:	3f e0       	ldi	r19, 0x0F	; 15
    1cde:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ce0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1ce2:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN8SdVolume6fatPutEmm>
    1ce6:	88 23       	and	r24, r24
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <_ZN6SdFile8truncateEm+0x10a>
    1cea:	ae cf       	rjmp	.-164    	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1cec:	f7 01       	movw	r30, r14
    1cee:	83 8a       	std	Z+19, r8	; 0x13
    1cf0:	94 8a       	std	Z+20, r9	; 0x14
    1cf2:	a5 8a       	std	Z+21, r10	; 0x15
    1cf4:	b6 8a       	std	Z+22, r11	; 0x16
    1cf6:	84 81       	ldd	r24, Z+4	; 0x04
    1cf8:	80 68       	ori	r24, 0x80	; 128
    1cfa:	84 83       	std	Z+4, r24	; 0x04
    1cfc:	c7 01       	movw	r24, r14
    1cfe:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN6SdFile4syncEv>
    1d02:	88 23       	and	r24, r24
    1d04:	09 f4       	brne	.+2      	; 0x1d08 <_ZN6SdFile8truncateEm+0x126>
    1d06:	a0 cf       	rjmp	.-192    	; 0x1c48 <_ZN6SdFile8truncateEm+0x66>
    1d08:	b5 01       	movw	r22, r10
    1d0a:	a4 01       	movw	r20, r8
    1d0c:	48 14       	cp	r4, r8
    1d0e:	59 04       	cpc	r5, r9
    1d10:	6a 04       	cpc	r6, r10
    1d12:	7b 04       	cpc	r7, r11
    1d14:	10 f4       	brcc	.+4      	; 0x1d1a <_ZN6SdFile8truncateEm+0x138>
    1d16:	b3 01       	movw	r22, r6
    1d18:	a2 01       	movw	r20, r4
    1d1a:	c7 01       	movw	r24, r14
    1d1c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN6SdFile7seekSetEm>
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <_ZN6SdFile8truncateEm+0x142>
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	bf 90       	pop	r11
    1d3a:	af 90       	pop	r10
    1d3c:	9f 90       	pop	r9
    1d3e:	8f 90       	pop	r8
    1d40:	7f 90       	pop	r7
    1d42:	6f 90       	pop	r6
    1d44:	5f 90       	pop	r5
    1d46:	4f 90       	pop	r4
    1d48:	08 95       	ret

00001d4a <_ZN6SdFile15openCachedEntryEhh>:
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ec 01       	movw	r28, r24
    1d52:	80 e2       	ldi	r24, 0x20	; 32
    1d54:	68 9f       	mul	r22, r24
    1d56:	f0 01       	movw	r30, r0
    1d58:	11 24       	eor	r1, r1
    1d5a:	e5 5a       	subi	r30, 0xA5	; 165
    1d5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d5e:	93 85       	ldd	r25, Z+11	; 0x0b
    1d60:	91 71       	andi	r25, 0x11	; 17
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <_ZN6SdFile15openCachedEntryEhh+0x24>
    1d64:	84 2f       	mov	r24, r20
    1d66:	82 74       	andi	r24, 0x42	; 66
    1d68:	11 f0       	breq	.+4      	; 0x1d6e <_ZN6SdFile15openCachedEntryEhh+0x24>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	52 c0       	rjmp	.+164    	; 0x1e12 <_ZN6SdFile15openCachedEntryEhh+0xc8>
    1d6e:	14 2f       	mov	r17, r20
    1d70:	6a 8b       	std	Y+18, r22	; 0x12
    1d72:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1d76:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1d7a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1d7e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1d82:	8e 87       	std	Y+14, r24	; 0x0e
    1d84:	9f 87       	std	Y+15, r25	; 0x0f
    1d86:	a8 8b       	std	Y+16, r26	; 0x10
    1d88:	b9 8b       	std	Y+17, r27	; 0x11
    1d8a:	44 89       	ldd	r20, Z+20	; 0x14
    1d8c:	55 89       	ldd	r21, Z+21	; 0x15
    1d8e:	60 e0       	ldi	r22, 0x00	; 0
    1d90:	70 e0       	ldi	r23, 0x00	; 0
    1d92:	ba 01       	movw	r22, r20
    1d94:	55 27       	eor	r21, r21
    1d96:	44 27       	eor	r20, r20
    1d98:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d9a:	93 8d       	ldd	r25, Z+27	; 0x1b
    1d9c:	a0 e0       	ldi	r26, 0x00	; 0
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	48 2b       	or	r20, r24
    1da2:	59 2b       	or	r21, r25
    1da4:	6a 2b       	or	r22, r26
    1da6:	7b 2b       	or	r23, r27
    1da8:	4f 8b       	std	Y+23, r20	; 0x17
    1daa:	58 8f       	std	Y+24, r21	; 0x18
    1dac:	69 8f       	std	Y+25, r22	; 0x19
    1dae:	7a 8f       	std	Y+26, r23	; 0x1a
    1db0:	83 85       	ldd	r24, Z+11	; 0x0b
    1db2:	88 71       	andi	r24, 0x18	; 24
    1db4:	51 f4       	brne	.+20     	; 0x1dca <_ZN6SdFile15openCachedEntryEhh+0x80>
    1db6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1db8:	95 8d       	ldd	r25, Z+29	; 0x1d
    1dba:	a6 8d       	ldd	r26, Z+30	; 0x1e
    1dbc:	b7 8d       	ldd	r27, Z+31	; 0x1f
    1dbe:	8b 8b       	std	Y+19, r24	; 0x13
    1dc0:	9c 8b       	std	Y+20, r25	; 0x14
    1dc2:	ad 8b       	std	Y+21, r26	; 0x15
    1dc4:	be 8b       	std	Y+22, r27	; 0x16
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	0c c0       	rjmp	.+24     	; 0x1de2 <_ZN6SdFile15openCachedEntryEhh+0x98>
    1dca:	80 31       	cpi	r24, 0x10	; 16
    1dcc:	71 f6       	brne	.-100    	; 0x1d6a <_ZN6SdFile15openCachedEntryEhh+0x20>
    1dce:	9e 01       	movw	r18, r28
    1dd0:	2d 5e       	subi	r18, 0xED	; 237
    1dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd8:	0e 94 c8 12 	call	0x2590	; 0x2590 <_ZNK8SdVolume9chainSizeEmPm>
    1ddc:	88 23       	and	r24, r24
    1dde:	29 f2       	breq	.-118    	; 0x1d6a <_ZN6SdFile15openCachedEntryEhh+0x20>
    1de0:	84 e0       	ldi	r24, 0x04	; 4
    1de2:	8d 83       	std	Y+5, r24	; 0x05
    1de4:	81 2f       	mov	r24, r17
    1de6:	8f 70       	andi	r24, 0x0F	; 15
    1de8:	8c 83       	std	Y+4, r24	; 0x04
    1dea:	1e 82       	std	Y+6, r1	; 0x06
    1dec:	1f 82       	std	Y+7, r1	; 0x07
    1dee:	18 86       	std	Y+8, r1	; 0x08
    1df0:	19 86       	std	Y+9, r1	; 0x09
    1df2:	1a 86       	std	Y+10, r1	; 0x0a
    1df4:	1b 86       	std	Y+11, r1	; 0x0b
    1df6:	1c 86       	std	Y+12, r1	; 0x0c
    1df8:	1d 86       	std	Y+13, r1	; 0x0d
    1dfa:	16 ff       	sbrs	r17, 6
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <_ZN6SdFile15openCachedEntryEhh+0xc6>
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	ba 01       	movw	r22, r20
    1e04:	ce 01       	movw	r24, r28
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <_ZN6SdFile8truncateEm>
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	08 95       	ret

00001e1a <_ZN6SdFile4openEPS_PKch>:
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	2b 97       	sbiw	r28, 0x0b	; 11
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	35 81       	ldd	r19, Z+5	; 0x05
    1e40:	31 11       	cpse	r19, r1
    1e42:	bf c0       	rjmp	.+382    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1e44:	c2 2e       	mov	r12, r18
    1e46:	8b 01       	movw	r16, r22
    1e48:	7c 01       	movw	r14, r24
    1e4a:	be 01       	movw	r22, r28
    1e4c:	6f 5f       	subi	r22, 0xFF	; 255
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	ca 01       	movw	r24, r20
    1e52:	0e 94 2f 0b 	call	0x165e	; 0x165e <_ZN6SdFile10make83NameEPKcPh>
    1e56:	88 23       	and	r24, r24
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <_ZN6SdFile4openEPS_PKch+0x42>
    1e5a:	b3 c0       	rjmp	.+358    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e60:	94 8d       	ldd	r25, Z+28	; 0x1c
    1e62:	f7 01       	movw	r30, r14
    1e64:	94 8f       	std	Z+28, r25	; 0x1c
    1e66:	83 8f       	std	Z+27, r24	; 0x1b
    1e68:	f8 01       	movw	r30, r16
    1e6a:	16 82       	std	Z+6, r1	; 0x06
    1e6c:	17 82       	std	Z+7, r1	; 0x07
    1e6e:	10 86       	std	Z+8, r1	; 0x08
    1e70:	11 86       	std	Z+9, r1	; 0x09
    1e72:	12 86       	std	Z+10, r1	; 0x0a
    1e74:	13 86       	std	Z+11, r1	; 0x0b
    1e76:	14 86       	std	Z+12, r1	; 0x0c
    1e78:	15 86       	std	Z+13, r1	; 0x0d
    1e7a:	d1 2c       	mov	r13, r1
    1e7c:	f8 01       	movw	r30, r16
    1e7e:	82 85       	ldd	r24, Z+10	; 0x0a
    1e80:	93 85       	ldd	r25, Z+11	; 0x0b
    1e82:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e84:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e86:	43 89       	ldd	r20, Z+19	; 0x13
    1e88:	54 89       	ldd	r21, Z+20	; 0x14
    1e8a:	65 89       	ldd	r22, Z+21	; 0x15
    1e8c:	76 89       	ldd	r23, Z+22	; 0x16
    1e8e:	84 17       	cp	r24, r20
    1e90:	95 07       	cpc	r25, r21
    1e92:	a6 07       	cpc	r26, r22
    1e94:	b7 07       	cpc	r27, r23
    1e96:	08 f0       	brcs	.+2      	; 0x1e9a <_ZN6SdFile4openEPS_PKch+0x80>
    1e98:	3e c0       	rjmp	.+124    	; 0x1f16 <_ZN6SdFile4openEPS_PKch+0xfc>
    1e9a:	25 e0       	ldi	r18, 0x05	; 5
    1e9c:	b6 95       	lsr	r27
    1e9e:	a7 95       	ror	r26
    1ea0:	97 95       	ror	r25
    1ea2:	87 95       	ror	r24
    1ea4:	2a 95       	dec	r18
    1ea6:	d1 f7       	brne	.-12     	; 0x1e9c <_ZN6SdFile4openEPS_PKch+0x82>
    1ea8:	f8 2f       	mov	r31, r24
    1eaa:	ff 70       	andi	r31, 0x0F	; 15
    1eac:	bf 2e       	mov	r11, r31
    1eae:	c8 01       	movw	r24, r16
    1eb0:	0e 94 be 0c 	call	0x197c	; 0x197c <_ZN6SdFile12readDirCacheEv>
    1eb4:	00 97       	sbiw	r24, 0x00	; 0
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <_ZN6SdFile4openEPS_PKch+0xa0>
    1eb8:	84 c0       	rjmp	.+264    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1eba:	fc 01       	movw	r30, r24
    1ebc:	20 81       	ld	r18, Z
    1ebe:	22 23       	and	r18, r18
    1ec0:	a1 f0       	breq	.+40     	; 0x1eea <_ZN6SdFile4openEPS_PKch+0xd0>
    1ec2:	25 3e       	cpi	r18, 0xE5	; 229
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <_ZN6SdFile4openEPS_PKch+0xae>
    1ec6:	7f c0       	rjmp	.+254    	; 0x1fc6 <_ZN6SdFile4openEPS_PKch+0x1ac>
    1ec8:	4b e0       	ldi	r20, 0x0B	; 11
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	bc 01       	movw	r22, r24
    1ece:	ce 01       	movw	r24, r28
    1ed0:	01 96       	adiw	r24, 0x01	; 1
    1ed2:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <memcmp>
    1ed6:	89 2b       	or	r24, r25
    1ed8:	89 f6       	brne	.-94     	; 0x1e7c <_ZN6SdFile4openEPS_PKch+0x62>
    1eda:	8c 2d       	mov	r24, r12
    1edc:	80 73       	andi	r24, 0x30	; 48
    1ede:	80 33       	cpi	r24, 0x30	; 48
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <_ZN6SdFile4openEPS_PKch+0xca>
    1ee2:	6f c0       	rjmp	.+222    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1ee4:	4c 2d       	mov	r20, r12
    1ee6:	6b 2d       	mov	r22, r11
    1ee8:	68 c0       	rjmp	.+208    	; 0x1fba <_ZN6SdFile4openEPS_PKch+0x1a0>
    1eea:	d1 10       	cpse	r13, r1
    1eec:	12 c0       	rjmp	.+36     	; 0x1f12 <_ZN6SdFile4openEPS_PKch+0xf8>
    1eee:	f7 01       	movw	r30, r14
    1ef0:	b2 8a       	std	Z+18, r11	; 0x12
    1ef2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1ef6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1efa:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1efe:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1f02:	46 87       	std	Z+14, r20	; 0x0e
    1f04:	57 87       	std	Z+15, r21	; 0x0f
    1f06:	60 8b       	std	Z+16, r22	; 0x10
    1f08:	71 8b       	std	Z+17, r23	; 0x11
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	80 81       	ld	r24, Z
    1f0e:	81 11       	cpse	r24, r1
    1f10:	5d c0       	rjmp	.+186    	; 0x1fcc <_ZN6SdFile4openEPS_PKch+0x1b2>
    1f12:	dd 24       	eor	r13, r13
    1f14:	d3 94       	inc	r13
    1f16:	8c 2d       	mov	r24, r12
    1f18:	82 71       	andi	r24, 0x12	; 18
    1f1a:	82 31       	cpi	r24, 0x12	; 18
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <_ZN6SdFile4openEPS_PKch+0x106>
    1f1e:	51 c0       	rjmp	.+162    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1f20:	dd 20       	and	r13, r13
    1f22:	41 f0       	breq	.+16     	; 0x1f34 <_ZN6SdFile4openEPS_PKch+0x11a>
    1f24:	61 e0       	ldi	r22, 0x01	; 1
    1f26:	c7 01       	movw	r24, r14
    1f28:	0e 94 16 0b 	call	0x162c	; 0x162c <_ZN6SdFile13cacheDirEntryEh>
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	89 2b       	or	r24, r25
    1f30:	79 f4       	brne	.+30     	; 0x1f50 <_ZN6SdFile4openEPS_PKch+0x136>
    1f32:	47 c0       	rjmp	.+142    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1f34:	f8 01       	movw	r30, r16
    1f36:	85 81       	ldd	r24, Z+5	; 0x05
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	09 f4       	brne	.+2      	; 0x1f3e <_ZN6SdFile4openEPS_PKch+0x124>
    1f3c:	42 c0       	rjmp	.+132    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1f3e:	c8 01       	movw	r24, r16
    1f40:	0e 94 b6 0a 	call	0x156c	; 0x156c <_ZN6SdFile13addDirClusterEv>
    1f44:	88 23       	and	r24, r24
    1f46:	e9 f1       	breq	.+122    	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1f48:	f7 01       	movw	r30, r14
    1f4a:	12 8a       	std	Z+18, r1	; 0x12
    1f4c:	0b e5       	ldi	r16, 0x5B	; 91
    1f4e:	12 e0       	ldi	r17, 0x02	; 2
    1f50:	80 e2       	ldi	r24, 0x20	; 32
    1f52:	f8 01       	movw	r30, r16
    1f54:	11 92       	st	Z+, r1
    1f56:	8a 95       	dec	r24
    1f58:	e9 f7       	brne	.-6      	; 0x1f54 <_ZN6SdFile4openEPS_PKch+0x13a>
    1f5a:	8b e0       	ldi	r24, 0x0B	; 11
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	31 96       	adiw	r30, 0x01	; 1
    1f60:	d8 01       	movw	r26, r16
    1f62:	01 90       	ld	r0, Z+
    1f64:	0d 92       	st	X+, r0
    1f66:	8a 95       	dec	r24
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <_ZN6SdFile4openEPS_PKch+0x148>
    1f6a:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <_ZN6SdFile9dateTime_E>
    1f6e:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <_ZN6SdFile9dateTime_E+0x1>
    1f72:	30 97       	sbiw	r30, 0x00	; 0
    1f74:	39 f0       	breq	.+14     	; 0x1f84 <_ZN6SdFile4openEPS_PKch+0x16a>
    1f76:	b8 01       	movw	r22, r16
    1f78:	62 5f       	subi	r22, 0xF2	; 242
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	c8 01       	movw	r24, r16
    1f7e:	40 96       	adiw	r24, 0x10	; 16
    1f80:	09 95       	icall
    1f82:	09 c0       	rjmp	.+18     	; 0x1f96 <_ZN6SdFile4openEPS_PKch+0x17c>
    1f84:	81 e2       	ldi	r24, 0x21	; 33
    1f86:	98 e2       	ldi	r25, 0x28	; 40
    1f88:	f8 01       	movw	r30, r16
    1f8a:	91 8b       	std	Z+17, r25	; 0x11
    1f8c:	80 8b       	std	Z+16, r24	; 0x10
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	98 e0       	ldi	r25, 0x08	; 8
    1f92:	97 87       	std	Z+15, r25	; 0x0f
    1f94:	86 87       	std	Z+14, r24	; 0x0e
    1f96:	f8 01       	movw	r30, r16
    1f98:	80 89       	ldd	r24, Z+16	; 0x10
    1f9a:	91 89       	ldd	r25, Z+17	; 0x11
    1f9c:	93 8b       	std	Z+19, r25	; 0x13
    1f9e:	82 8b       	std	Z+18, r24	; 0x12
    1fa0:	91 8f       	std	Z+25, r25	; 0x19
    1fa2:	80 8f       	std	Z+24, r24	; 0x18
    1fa4:	86 85       	ldd	r24, Z+14	; 0x0e
    1fa6:	97 85       	ldd	r25, Z+15	; 0x0f
    1fa8:	97 8b       	std	Z+23, r25	; 0x17
    1faa:	86 8b       	std	Z+22, r24	; 0x16
    1fac:	0e 94 ab 11 	call	0x2356	; 0x2356 <_ZN8SdVolume10cacheFlushEv>
    1fb0:	88 23       	and	r24, r24
    1fb2:	39 f0       	breq	.+14     	; 0x1fc2 <_ZN6SdFile4openEPS_PKch+0x1a8>
    1fb4:	4c 2d       	mov	r20, r12
    1fb6:	f7 01       	movw	r30, r14
    1fb8:	62 89       	ldd	r22, Z+18	; 0x12
    1fba:	c7 01       	movw	r24, r14
    1fbc:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <_ZN6SdFile15openCachedEntryEhh>
    1fc0:	08 c0       	rjmp	.+16     	; 0x1fd2 <_ZN6SdFile4openEPS_PKch+0x1b8>
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <_ZN6SdFile4openEPS_PKch+0x1b8>
    1fc6:	dd 20       	and	r13, r13
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <_ZN6SdFile4openEPS_PKch+0x1b2>
    1fca:	91 cf       	rjmp	.-222    	; 0x1eee <_ZN6SdFile4openEPS_PKch+0xd4>
    1fcc:	dd 24       	eor	r13, r13
    1fce:	d3 94       	inc	r13
    1fd0:	55 cf       	rjmp	.-342    	; 0x1e7c <_ZN6SdFile4openEPS_PKch+0x62>
    1fd2:	2b 96       	adiw	r28, 0x0b	; 11
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	ff 90       	pop	r15
    1fe8:	ef 90       	pop	r14
    1fea:	df 90       	pop	r13
    1fec:	cf 90       	pop	r12
    1fee:	bf 90       	pop	r11
    1ff0:	08 95       	ret

00001ff2 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1ff2:	2f 92       	push	r2
    1ff4:	3f 92       	push	r3
    1ff6:	4f 92       	push	r4
    1ff8:	5f 92       	push	r5
    1ffa:	6f 92       	push	r6
    1ffc:	7f 92       	push	r7
    1ffe:	8f 92       	push	r8
    2000:	9f 92       	push	r9
    2002:	af 92       	push	r10
    2004:	bf 92       	push	r11
    2006:	cf 92       	push	r12
    2008:	df 92       	push	r13
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	00 d0       	rcall	.+0      	; 0x2018 <_ZN6SdFile5writeEPKvj+0x26>
    2018:	00 d0       	rcall	.+0      	; 0x201a <_ZN6SdFile5writeEPKvj+0x28>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	8c 01       	movw	r16, r24
    2020:	6b 01       	movw	r12, r22
    2022:	1a 01       	movw	r2, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    2024:	dc 01       	movw	r26, r24
    2026:	15 96       	adiw	r26, 0x05	; 5
    2028:	8c 91       	ld	r24, X
    202a:	15 97       	sbiw	r26, 0x05	; 5
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	c9 f4       	brne	.+50     	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>
    2030:	14 96       	adiw	r26, 0x04	; 4
    2032:	8c 91       	ld	r24, X
    2034:	81 ff       	sbrs	r24, 1
    2036:	15 c0       	rjmp	.+42     	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2038:	82 ff       	sbrs	r24, 2
    203a:	1d c0       	rjmp	.+58     	; 0x2076 <_ZN6SdFile5writeEPKvj+0x84>
    203c:	f8 01       	movw	r30, r16
    203e:	43 89       	ldd	r20, Z+19	; 0x13
    2040:	54 89       	ldd	r21, Z+20	; 0x14
    2042:	65 89       	ldd	r22, Z+21	; 0x15
    2044:	76 89       	ldd	r23, Z+22	; 0x16
    2046:	82 85       	ldd	r24, Z+10	; 0x0a
    2048:	93 85       	ldd	r25, Z+11	; 0x0b
    204a:	a4 85       	ldd	r26, Z+12	; 0x0c
    204c:	b5 85       	ldd	r27, Z+13	; 0x0d
    204e:	84 17       	cp	r24, r20
    2050:	95 07       	cpc	r25, r21
    2052:	a6 07       	cpc	r26, r22
    2054:	b7 07       	cpc	r27, r23
    2056:	79 f0       	breq	.+30     	; 0x2076 <_ZN6SdFile5writeEPKvj+0x84>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2058:	c8 01       	movw	r24, r16
    205a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    205e:	81 11       	cpse	r24, r1
    2060:	0a c0       	rjmp	.+20     	; 0x2076 <_ZN6SdFile5writeEPKvj+0x84>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	d8 01       	movw	r26, r16
    2068:	13 96       	adiw	r26, 0x03	; 3
    206a:	9c 93       	st	X, r25
    206c:	8e 93       	st	-X, r24
    206e:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	48 c1       	rjmp	.+656    	; 0x2306 <_ZN6SdFile5writeEPKvj+0x314>
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2076:	41 01       	movw	r8, r2
    2078:	83 c0       	rjmp	.+262    	; 0x2180 <_ZN6SdFile5writeEPKvj+0x18e>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    207a:	5b 96       	adiw	r26, 0x1b	; 27
    207c:	8d 91       	ld	r24, X+
    207e:	9c 91       	ld	r25, X
    2080:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    2082:	fc 01       	movw	r30, r24
    2084:	74 80       	ldd	r7, Z+4	; 0x04
    2086:	2f ef       	ldi	r18, 0xFF	; 255
    2088:	27 0d       	add	r18, r7
    208a:	2a 01       	movw	r4, r20
    208c:	3b 01       	movw	r6, r22
    208e:	39 e0       	ldi	r19, 0x09	; 9
    2090:	76 94       	lsr	r7
    2092:	67 94       	ror	r6
    2094:	57 94       	ror	r5
    2096:	47 94       	ror	r4
    2098:	3a 95       	dec	r19
    209a:	d1 f7       	brne	.-12     	; 0x2090 <_ZN6SdFile5writeEPKvj+0x9e>
    209c:	72 2e       	mov	r7, r18
    209e:	74 20       	and	r7, r4
    uint16_t blockOffset = curPosition_ & 0X1FF;
    20a0:	7a 01       	movw	r14, r20
    20a2:	f1 e0       	ldi	r31, 0x01	; 1
    20a4:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    20a6:	77 20       	and	r7, r7
    20a8:	09 f4       	brne	.+2      	; 0x20ac <_ZN6SdFile5writeEPKvj+0xba>
    20aa:	76 c0       	rjmp	.+236    	; 0x2198 <_ZN6SdFile5writeEPKvj+0x1a6>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	92 e0       	ldi	r25, 0x02	; 2
    20b0:	8e 19       	sub	r24, r14
    20b2:	9f 09       	sbc	r25, r15
    20b4:	54 01       	movw	r10, r8
    20b6:	88 15       	cp	r24, r8
    20b8:	99 05       	cpc	r25, r9
    20ba:	08 f4       	brcc	.+2      	; 0x20be <_ZN6SdFile5writeEPKvj+0xcc>
    20bc:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    20be:	d8 01       	movw	r26, r16
    20c0:	5b 96       	adiw	r26, 0x1b	; 27
    20c2:	2d 91       	ld	r18, X+
    20c4:	3c 91       	ld	r19, X
    20c6:	5c 97       	sbiw	r26, 0x1c	; 28
    20c8:	16 96       	adiw	r26, 0x06	; 6
    20ca:	8d 91       	ld	r24, X+
    20cc:	9d 91       	ld	r25, X+
    20ce:	0d 90       	ld	r0, X+
    20d0:	bc 91       	ld	r27, X
    20d2:	a0 2d       	mov	r26, r0
    20d4:	02 97       	sbiw	r24, 0x02	; 2
    20d6:	a1 09       	sbc	r26, r1
    20d8:	b1 09       	sbc	r27, r1
    20da:	f9 01       	movw	r30, r18
    20dc:	05 84       	ldd	r0, Z+13	; 0x0d
    20de:	04 c0       	rjmp	.+8      	; 0x20e8 <_ZN6SdFile5writeEPKvj+0xf6>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	aa 1f       	adc	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	0a 94       	dec	r0
    20ea:	d2 f7       	brpl	.-12     	; 0x20e0 <_ZN6SdFile5writeEPKvj+0xee>
    20ec:	46 85       	ldd	r20, Z+14	; 0x0e
    20ee:	57 85       	ldd	r21, Z+15	; 0x0f
    20f0:	60 89       	ldd	r22, Z+16	; 0x10
    20f2:	71 89       	ldd	r23, Z+17	; 0x11
    20f4:	84 0f       	add	r24, r20
    20f6:	95 1f       	adc	r25, r21
    20f8:	a6 1f       	adc	r26, r22
    20fa:	b7 1f       	adc	r27, r23
    20fc:	9c 01       	movw	r18, r24
    20fe:	ad 01       	movw	r20, r26
    2100:	27 0d       	add	r18, r7
    2102:	31 1d       	adc	r19, r1
    2104:	41 1d       	adc	r20, r1
    2106:	51 1d       	adc	r21, r1
    2108:	29 01       	movw	r4, r18
    210a:	3a 01       	movw	r6, r20
    if (n == 512) {
    210c:	a1 14       	cp	r10, r1
    210e:	32 e0       	ldi	r19, 0x02	; 2
    2110:	b3 06       	cpc	r11, r19
    2112:	09 f0       	breq	.+2      	; 0x2116 <_ZN6SdFile5writeEPKvj+0x124>
    2114:	88 c0       	rjmp	.+272    	; 0x2226 <_ZN6SdFile5writeEPKvj+0x234>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2116:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    211a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    211e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2122:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2126:	48 16       	cp	r4, r24
    2128:	59 06       	cpc	r5, r25
    212a:	6a 06       	cpc	r6, r26
    212c:	7b 06       	cpc	r7, r27
    212e:	59 f4       	brne	.+22     	; 0x2146 <_ZN6SdFile5writeEPKvj+0x154>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2130:	8f ef       	ldi	r24, 0xFF	; 255
    2132:	9f ef       	ldi	r25, 0xFF	; 255
    2134:	dc 01       	movw	r26, r24
    2136:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    213a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    213e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2142:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2146:	96 01       	movw	r18, r12
    2148:	b3 01       	movw	r22, r6
    214a:	a2 01       	movw	r20, r4
    214c:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_ZN8SdVolume7sdCard_E>
    2150:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <_ZN8SdVolume7sdCard_E+0x1>
    2154:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2158:	88 23       	and	r24, r24
    215a:	09 f4       	brne	.+2      	; 0x215e <_ZN6SdFile5writeEPKvj+0x16c>
    215c:	82 cf       	rjmp	.-252    	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>
      src += 512;
    215e:	9e ef       	ldi	r25, 0xFE	; 254
    2160:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2162:	8a 18       	sub	r8, r10
    2164:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    2166:	f8 01       	movw	r30, r16
    2168:	82 85       	ldd	r24, Z+10	; 0x0a
    216a:	93 85       	ldd	r25, Z+11	; 0x0b
    216c:	a4 85       	ldd	r26, Z+12	; 0x0c
    216e:	b5 85       	ldd	r27, Z+13	; 0x0d
    2170:	8a 0d       	add	r24, r10
    2172:	9b 1d       	adc	r25, r11
    2174:	a1 1d       	adc	r26, r1
    2176:	b1 1d       	adc	r27, r1
    2178:	82 87       	std	Z+10, r24	; 0x0a
    217a:	93 87       	std	Z+11, r25	; 0x0b
    217c:	a4 87       	std	Z+12, r26	; 0x0c
    217e:	b5 87       	std	Z+13, r27	; 0x0d
    2180:	d8 01       	movw	r26, r16
    2182:	1a 96       	adiw	r26, 0x0a	; 10
    2184:	4d 91       	ld	r20, X+
    2186:	5d 91       	ld	r21, X+
    2188:	6d 91       	ld	r22, X+
    218a:	7c 91       	ld	r23, X
    218c:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    218e:	81 14       	cp	r8, r1
    2190:	91 04       	cpc	r9, r1
    2192:	09 f0       	breq	.+2      	; 0x2196 <_ZN6SdFile5writeEPKvj+0x1a4>
    2194:	72 cf       	rjmp	.-284    	; 0x207a <_ZN6SdFile5writeEPKvj+0x88>
    2196:	87 c0       	rjmp	.+270    	; 0x22a6 <_ZN6SdFile5writeEPKvj+0x2b4>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    2198:	e1 14       	cp	r14, r1
    219a:	f1 04       	cpc	r15, r1
    219c:	09 f0       	breq	.+2      	; 0x21a0 <_ZN6SdFile5writeEPKvj+0x1ae>
    219e:	86 cf       	rjmp	.-244    	; 0x20ac <_ZN6SdFile5writeEPKvj+0xba>
      // start of new cluster
      if (curCluster_ == 0) {
    21a0:	16 96       	adiw	r26, 0x06	; 6
    21a2:	4d 91       	ld	r20, X+
    21a4:	5d 91       	ld	r21, X+
    21a6:	6d 91       	ld	r22, X+
    21a8:	7c 91       	ld	r23, X
    21aa:	19 97       	sbiw	r26, 0x09	; 9
    21ac:	41 15       	cp	r20, r1
    21ae:	51 05       	cpc	r21, r1
    21b0:	61 05       	cpc	r22, r1
    21b2:	71 05       	cpc	r23, r1
    21b4:	59 f4       	brne	.+22     	; 0x21cc <_ZN6SdFile5writeEPKvj+0x1da>
        if (firstCluster_ == 0) {
    21b6:	57 96       	adiw	r26, 0x17	; 23
    21b8:	8d 91       	ld	r24, X+
    21ba:	9d 91       	ld	r25, X+
    21bc:	0d 90       	ld	r0, X+
    21be:	bc 91       	ld	r27, X
    21c0:	a0 2d       	mov	r26, r0
    21c2:	00 97       	sbiw	r24, 0x00	; 0
    21c4:	a1 05       	cpc	r26, r1
    21c6:	b1 05       	cpc	r27, r1
    21c8:	41 f5       	brne	.+80     	; 0x221a <_ZN6SdFile5writeEPKvj+0x228>
    21ca:	21 c0       	rjmp	.+66     	; 0x220e <_ZN6SdFile5writeEPKvj+0x21c>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    21cc:	9e 01       	movw	r18, r28
    21ce:	2f 5f       	subi	r18, 0xFF	; 255
    21d0:	3f 4f       	sbci	r19, 0xFF	; 255
    21d2:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    21d6:	88 23       	and	r24, r24
    21d8:	09 f4       	brne	.+2      	; 0x21dc <_ZN6SdFile5writeEPKvj+0x1ea>
    21da:	4b cf       	rjmp	.-362    	; 0x2072 <_ZN6SdFile5writeEPKvj+0x80>
        if (vol_->isEOC(next)) {
    21dc:	89 81       	ldd	r24, Y+1	; 0x01
    21de:	9a 81       	ldd	r25, Y+2	; 0x02
    21e0:	ab 81       	ldd	r26, Y+3	; 0x03
    21e2:	bc 81       	ldd	r27, Y+4	; 0x04
    21e4:	f8 01       	movw	r30, r16
    21e6:	23 8d       	ldd	r18, Z+27	; 0x1b
    21e8:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    21ea:	f9 01       	movw	r30, r18
    21ec:	27 89       	ldd	r18, Z+23	; 0x17
    21ee:	20 31       	cpi	r18, 0x10	; 16
    21f0:	29 f0       	breq	.+10     	; 0x21fc <_ZN6SdFile5writeEPKvj+0x20a>
    21f2:	48 ef       	ldi	r20, 0xF8	; 248
    21f4:	5f ef       	ldi	r21, 0xFF	; 255
    21f6:	6f ef       	ldi	r22, 0xFF	; 255
    21f8:	7f e0       	ldi	r23, 0x0F	; 15
    21fa:	04 c0       	rjmp	.+8      	; 0x2204 <_ZN6SdFile5writeEPKvj+0x212>
    21fc:	48 ef       	ldi	r20, 0xF8	; 248
    21fe:	5f ef       	ldi	r21, 0xFF	; 255
    2200:	60 e0       	ldi	r22, 0x00	; 0
    2202:	70 e0       	ldi	r23, 0x00	; 0
    2204:	84 17       	cp	r24, r20
    2206:	95 07       	cpc	r25, r21
    2208:	a6 07       	cpc	r26, r22
    220a:	b7 07       	cpc	r27, r23
    220c:	30 f0       	brcs	.+12     	; 0x221a <_ZN6SdFile5writeEPKvj+0x228>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    220e:	c8 01       	movw	r24, r16
    2210:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN6SdFile10addClusterEv>
    2214:	81 11       	cpse	r24, r1
    2216:	4a cf       	rjmp	.-364    	; 0x20ac <_ZN6SdFile5writeEPKvj+0xba>
    2218:	24 cf       	rjmp	.-440    	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>
        } else {
          curCluster_ = next;
    221a:	f8 01       	movw	r30, r16
    221c:	86 83       	std	Z+6, r24	; 0x06
    221e:	97 83       	std	Z+7, r25	; 0x07
    2220:	a0 87       	std	Z+8, r26	; 0x08
    2222:	b1 87       	std	Z+9, r27	; 0x09
    2224:	43 cf       	rjmp	.-378    	; 0x20ac <_ZN6SdFile5writeEPKvj+0xba>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2226:	e1 14       	cp	r14, r1
    2228:	f1 04       	cpc	r15, r1
    222a:	29 f5       	brne	.+74     	; 0x2276 <_ZN6SdFile5writeEPKvj+0x284>
    222c:	d8 01       	movw	r26, r16
    222e:	1a 96       	adiw	r26, 0x0a	; 10
    2230:	4d 91       	ld	r20, X+
    2232:	5d 91       	ld	r21, X+
    2234:	6d 91       	ld	r22, X+
    2236:	7c 91       	ld	r23, X
    2238:	1d 97       	sbiw	r26, 0x0d	; 13
    223a:	53 96       	adiw	r26, 0x13	; 19
    223c:	8d 91       	ld	r24, X+
    223e:	9d 91       	ld	r25, X+
    2240:	0d 90       	ld	r0, X+
    2242:	bc 91       	ld	r27, X
    2244:	a0 2d       	mov	r26, r0
    2246:	48 17       	cp	r20, r24
    2248:	59 07       	cpc	r21, r25
    224a:	6a 07       	cpc	r22, r26
    224c:	7b 07       	cpc	r23, r27
    224e:	98 f0       	brcs	.+38     	; 0x2276 <_ZN6SdFile5writeEPKvj+0x284>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2250:	0e 94 ab 11 	call	0x2356	; 0x2356 <_ZN8SdVolume10cacheFlushEv>
    2254:	88 23       	and	r24, r24
    2256:	09 f4       	brne	.+2      	; 0x225a <_ZN6SdFile5writeEPKvj+0x268>
    2258:	04 cf       	rjmp	.-504    	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>
        SdVolume::cacheBlockNumber_ = block;
    225a:	40 92 06 01 	sts	0x0106, r4	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    225e:	50 92 07 01 	sts	0x0107, r5	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2262:	60 92 08 01 	sts	0x0108, r6	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2266:	70 92 09 01 	sts	0x0109, r7	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    226a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
    226e:	81 60       	ori	r24, 0x01	; 1
    2270:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
    2274:	08 c0       	rjmp	.+16     	; 0x2286 <_ZN6SdFile5writeEPKvj+0x294>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2276:	41 e0       	ldi	r20, 0x01	; 1
    2278:	c3 01       	movw	r24, r6
    227a:	b2 01       	movw	r22, r4
    227c:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    2280:	88 23       	and	r24, r24
    2282:	09 f4       	brne	.+2      	; 0x2286 <_ZN6SdFile5writeEPKvj+0x294>
    2284:	ee ce       	rjmp	.-548    	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>
    2286:	d6 01       	movw	r26, r12
    2288:	f7 01       	movw	r30, r14
    228a:	e5 5a       	subi	r30, 0xA5	; 165
    228c:	fd 4f       	sbci	r31, 0xFD	; 253
    228e:	9f 01       	movw	r18, r30
    2290:	2a 0d       	add	r18, r10
    2292:	3b 1d       	adc	r19, r11
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    2294:	2e 17       	cp	r18, r30
    2296:	3f 07       	cpc	r19, r31
    2298:	19 f0       	breq	.+6      	; 0x22a0 <_ZN6SdFile5writeEPKvj+0x2ae>
    229a:	8d 91       	ld	r24, X+
    229c:	81 93       	st	Z+, r24
    229e:	fa cf       	rjmp	.-12     	; 0x2294 <_ZN6SdFile5writeEPKvj+0x2a2>
    22a0:	ca 0c       	add	r12, r10
    22a2:	db 1c       	adc	r13, r11
    22a4:	5e cf       	rjmp	.-324    	; 0x2162 <_ZN6SdFile5writeEPKvj+0x170>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    22a6:	d8 01       	movw	r26, r16
    22a8:	53 96       	adiw	r26, 0x13	; 19
    22aa:	cd 90       	ld	r12, X+
    22ac:	dd 90       	ld	r13, X+
    22ae:	ed 90       	ld	r14, X+
    22b0:	fc 90       	ld	r15, X
    22b2:	56 97       	sbiw	r26, 0x16	; 22
    22b4:	14 96       	adiw	r26, 0x04	; 4
    22b6:	8c 91       	ld	r24, X
    22b8:	c4 16       	cp	r12, r20
    22ba:	d5 06       	cpc	r13, r21
    22bc:	e6 06       	cpc	r14, r22
    22be:	f7 06       	cpc	r15, r23
    22c0:	40 f4       	brcc	.+16     	; 0x22d2 <_ZN6SdFile5writeEPKvj+0x2e0>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    22c2:	f8 01       	movw	r30, r16
    22c4:	43 8b       	std	Z+19, r20	; 0x13
    22c6:	54 8b       	std	Z+20, r21	; 0x14
    22c8:	65 8b       	std	Z+21, r22	; 0x15
    22ca:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    22cc:	80 68       	ori	r24, 0x80	; 128
    22ce:	84 83       	std	Z+4, r24	; 0x04
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <_ZN6SdFile5writeEPKvj+0x2fa>
  } else if (dateTime_ && nbyte) {
    22d2:	20 91 52 02 	lds	r18, 0x0252	; 0x800252 <_ZN6SdFile9dateTime_E>
    22d6:	30 91 53 02 	lds	r19, 0x0253	; 0x800253 <_ZN6SdFile9dateTime_E+0x1>
    22da:	23 2b       	or	r18, r19
    22dc:	39 f0       	breq	.+14     	; 0x22ec <_ZN6SdFile5writeEPKvj+0x2fa>
    22de:	21 14       	cp	r2, r1
    22e0:	31 04       	cpc	r3, r1
    22e2:	21 f0       	breq	.+8      	; 0x22ec <_ZN6SdFile5writeEPKvj+0x2fa>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    22e4:	80 68       	ori	r24, 0x80	; 128
    22e6:	d8 01       	movw	r26, r16
    22e8:	14 96       	adiw	r26, 0x04	; 4
    22ea:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    22ec:	f8 01       	movw	r30, r16
    22ee:	84 81       	ldd	r24, Z+4	; 0x04
    22f0:	83 fd       	sbrc	r24, 3
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <_ZN6SdFile5writeEPKvj+0x306>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    22f4:	c1 01       	movw	r24, r2
    22f6:	07 c0       	rjmp	.+14     	; 0x2306 <_ZN6SdFile5writeEPKvj+0x314>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    22f8:	c8 01       	movw	r24, r16
    22fa:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_ZN6SdFile4syncEv>
    22fe:	88 23       	and	r24, r24
    2300:	09 f4       	brne	.+2      	; 0x2304 <_ZN6SdFile5writeEPKvj+0x312>
    2302:	af ce       	rjmp	.-674    	; 0x2062 <_ZN6SdFile5writeEPKvj+0x70>
    2304:	f7 cf       	rjmp	.-18     	; 0x22f4 <_ZN6SdFile5writeEPKvj+0x302>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	1f 91       	pop	r17
    2314:	0f 91       	pop	r16
    2316:	ff 90       	pop	r15
    2318:	ef 90       	pop	r14
    231a:	df 90       	pop	r13
    231c:	cf 90       	pop	r12
    231e:	bf 90       	pop	r11
    2320:	af 90       	pop	r10
    2322:	9f 90       	pop	r9
    2324:	8f 90       	pop	r8
    2326:	7f 90       	pop	r7
    2328:	6f 90       	pop	r6
    232a:	5f 90       	pop	r5
    232c:	4f 90       	pop	r4
    232e:	3f 90       	pop	r3
    2330:	2f 90       	pop	r2
    2332:	08 95       	ret

00002334 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2334:	cf 93       	push	r28
    2336:	df 93       	push	r29
    2338:	1f 92       	push	r1
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	be 01       	movw	r22, r28
    2346:	6f 5f       	subi	r22, 0xFF	; 255
    2348:	7f 4f       	sbci	r23, 0xFF	; 255
    234a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <_ZN6SdFile5writeEPKvj>
}
    234e:	0f 90       	pop	r0
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	08 95       	ret

00002356 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2356:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
    235a:	88 23       	and	r24, r24
    235c:	a9 f1       	breq	.+106    	; 0x23c8 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    235e:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2362:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2366:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    236a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    236e:	2b e5       	ldi	r18, 0x5B	; 91
    2370:	32 e0       	ldi	r19, 0x02	; 2
    2372:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_ZN8SdVolume7sdCard_E>
    2376:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <_ZN8SdVolume7sdCard_E+0x1>
    237a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN7Sd2Card10writeBlockEmPKh>
    237e:	81 11       	cpse	r24, r1
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <_ZN8SdVolume10cacheFlushEv+0x30>
      return false;
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2386:	40 91 54 02 	lds	r20, 0x0254	; 0x800254 <_ZN8SdVolume17cacheMirrorBlock_E>
    238a:	50 91 55 02 	lds	r21, 0x0255	; 0x800255 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    238e:	60 91 56 02 	lds	r22, 0x0256	; 0x800256 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    2392:	70 91 57 02 	lds	r23, 0x0257	; 0x800257 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    2396:	41 15       	cp	r20, r1
    2398:	51 05       	cpc	r21, r1
    239a:	61 05       	cpc	r22, r1
    239c:	71 05       	cpc	r23, r1
    239e:	91 f0       	breq	.+36     	; 0x23c4 <_ZN8SdVolume10cacheFlushEv+0x6e>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    23a0:	2b e5       	ldi	r18, 0x5B	; 91
    23a2:	32 e0       	ldi	r19, 0x02	; 2
    23a4:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_ZN8SdVolume7sdCard_E>
    23a8:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <_ZN8SdVolume7sdCard_E+0x1>
    23ac:	0e 94 3b 0a 	call	0x1476	; 0x1476 <_ZN7Sd2Card10writeBlockEmPKh>
    23b0:	88 23       	and	r24, r24
    23b2:	39 f3       	breq	.-50     	; 0x2382 <_ZN8SdVolume10cacheFlushEv+0x2c>
        return false;
      }
      cacheMirrorBlock_ = 0;
    23b4:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <_ZN8SdVolume17cacheMirrorBlock_E>
    23b8:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    23bc:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    23c0:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    23c4:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    23c8:	81 e0       	ldi	r24, 0x01	; 1
}
    23ca:	08 95       	ret

000023cc <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    23cc:	cf 92       	push	r12
    23ce:	df 92       	push	r13
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	cf 93       	push	r28
    23d6:	6b 01       	movw	r12, r22
    23d8:	7c 01       	movw	r14, r24
    23da:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    23dc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    23e0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    23e4:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    23e8:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    23ec:	8c 15       	cp	r24, r12
    23ee:	9d 05       	cpc	r25, r13
    23f0:	ae 05       	cpc	r26, r14
    23f2:	bf 05       	cpc	r27, r15
    23f4:	d1 f0       	breq	.+52     	; 0x242a <_ZN8SdVolume13cacheRawBlockEmh+0x5e>
    if (!cacheFlush()) return false;
    23f6:	0e 94 ab 11 	call	0x2356	; 0x2356 <_ZN8SdVolume10cacheFlushEv>
    23fa:	81 11       	cpse	r24, r1
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <_ZN8SdVolume13cacheRawBlockEmh+0x36>
    23fe:	80 e0       	ldi	r24, 0x00	; 0
    2400:	1a c0       	rjmp	.+52     	; 0x2436 <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2402:	2b e5       	ldi	r18, 0x5B	; 91
    2404:	32 e0       	ldi	r19, 0x02	; 2
    2406:	b7 01       	movw	r22, r14
    2408:	a6 01       	movw	r20, r12
    240a:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <_ZN8SdVolume7sdCard_E>
    240e:	90 91 5a 02 	lds	r25, 0x025A	; 0x80025a <_ZN8SdVolume7sdCard_E+0x1>
    2412:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <_ZN7Sd2Card9readBlockEmPh>
    2416:	88 23       	and	r24, r24
    2418:	91 f3       	breq	.-28     	; 0x23fe <_ZN8SdVolume13cacheRawBlockEmh+0x32>
    cacheBlockNumber_ = blockNumber;
    241a:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    241e:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2422:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2426:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    242a:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
    242e:	c8 2b       	or	r28, r24
    2430:	c0 93 58 02 	sts	0x0258, r28	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
  return true;
    2434:	81 e0       	ldi	r24, 0x01	; 1
}
    2436:	cf 91       	pop	r28
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	df 90       	pop	r13
    243e:	cf 90       	pop	r12
    2440:	08 95       	ret

00002442 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
    2448:	ff 92       	push	r15
    244a:	6b 01       	movw	r12, r22
    244c:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    244e:	0e 94 ab 11 	call	0x2356	; 0x2356 <_ZN8SdVolume10cacheFlushEv>
    2452:	88 23       	and	r24, r24
    2454:	a9 f0       	breq	.+42     	; 0x2480 <_ZN8SdVolume14cacheZeroBlockEm+0x3e>
    2456:	eb e5       	ldi	r30, 0x5B	; 91
    2458:	f2 e0       	ldi	r31, 0x02	; 2

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    245a:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    245c:	84 e0       	ldi	r24, 0x04	; 4
    245e:	eb 35       	cpi	r30, 0x5B	; 91
    2460:	f8 07       	cpc	r31, r24
    2462:	d9 f7       	brne	.-10     	; 0x245a <_ZN8SdVolume14cacheZeroBlockEm+0x18>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2464:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2468:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    246c:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2470:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2474:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
    2478:	81 60       	ori	r24, 0x01	; 1
    247a:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    247e:	81 e0       	ldi	r24, 0x01	; 1
}
    2480:	ff 90       	pop	r15
    2482:	ef 90       	pop	r14
    2484:	df 90       	pop	r13
    2486:	cf 90       	pop	r12
    2488:	08 95       	ret

0000248a <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    248a:	8f 92       	push	r8
    248c:	9f 92       	push	r9
    248e:	af 92       	push	r10
    2490:	bf 92       	push	r11
    2492:	cf 92       	push	r12
    2494:	df 92       	push	r13
    2496:	ef 92       	push	r14
    2498:	ff 92       	push	r15
    249a:	0f 93       	push	r16
    249c:	1f 93       	push	r17
    249e:	cf 93       	push	r28
    24a0:	df 93       	push	r29
    24a2:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    24a4:	81 85       	ldd	r24, Z+9	; 0x09
    24a6:	92 85       	ldd	r25, Z+10	; 0x0a
    24a8:	a3 85       	ldd	r26, Z+11	; 0x0b
    24aa:	b4 85       	ldd	r27, Z+12	; 0x0c
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	a1 1d       	adc	r26, r1
    24b0:	b1 1d       	adc	r27, r1
    24b2:	84 17       	cp	r24, r20
    24b4:	95 07       	cpc	r25, r21
    24b6:	a6 07       	cpc	r26, r22
    24b8:	b7 07       	cpc	r27, r23
    24ba:	10 f4       	brcc	.+4      	; 0x24c0 <_ZNK8SdVolume6fatGetEmPm+0x36>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	5b c0       	rjmp	.+182    	; 0x2576 <_ZNK8SdVolume6fatGetEmPm+0xec>
  uint32_t lba = fatStartBlock_;
    24c0:	83 88       	ldd	r8, Z+19	; 0x13
    24c2:	94 88       	ldd	r9, Z+20	; 0x14
    24c4:	a5 88       	ldd	r10, Z+21	; 0x15
    24c6:	b6 88       	ldd	r11, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    24c8:	87 89       	ldd	r24, Z+23	; 0x17
    24ca:	80 31       	cpi	r24, 0x10	; 16
    24cc:	29 f4       	brne	.+10     	; 0x24d8 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    24ce:	bb 27       	eor	r27, r27
    24d0:	a7 2f       	mov	r26, r23
    24d2:	96 2f       	mov	r25, r22
    24d4:	85 2f       	mov	r24, r21
    24d6:	09 c0       	rjmp	.+18     	; 0x24ea <_ZNK8SdVolume6fatGetEmPm+0x60>
    24d8:	db 01       	movw	r26, r22
    24da:	ca 01       	movw	r24, r20
    24dc:	c7 e0       	ldi	r28, 0x07	; 7
    24de:	b6 95       	lsr	r27
    24e0:	a7 95       	ror	r26
    24e2:	97 95       	ror	r25
    24e4:	87 95       	ror	r24
    24e6:	ca 95       	dec	r28
    24e8:	d1 f7       	brne	.-12     	; 0x24de <_ZNK8SdVolume6fatGetEmPm+0x54>
    24ea:	e9 01       	movw	r28, r18
    24ec:	6a 01       	movw	r12, r20
    24ee:	7b 01       	movw	r14, r22
    24f0:	8f 01       	movw	r16, r30
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	68 0d       	add	r22, r8
    24f8:	79 1d       	adc	r23, r9
    24fa:	8a 1d       	adc	r24, r10
    24fc:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    24fe:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2502:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    2506:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    250a:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    250e:	68 15       	cp	r22, r8
    2510:	79 05       	cpc	r23, r9
    2512:	8a 05       	cpc	r24, r10
    2514:	9b 05       	cpc	r25, r11
    2516:	91 f4       	brne	.+36     	; 0x253c <_ZNK8SdVolume6fatGetEmPm+0xb2>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2518:	f8 01       	movw	r30, r16
    251a:	87 89       	ldd	r24, Z+23	; 0x17
    251c:	80 31       	cpi	r24, 0x10	; 16
    251e:	a1 f4       	brne	.+40     	; 0x2548 <_ZNK8SdVolume6fatGetEmPm+0xbe>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2520:	dd 24       	eor	r13, r13
    2522:	ee 24       	eor	r14, r14
    2524:	ff 24       	eor	r15, r15
    2526:	c6 01       	movw	r24, r12
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	fc 01       	movw	r30, r24
    252e:	e5 5a       	subi	r30, 0xA5	; 165
    2530:	fd 4f       	sbci	r31, 0xFD	; 253
    2532:	80 81       	ld	r24, Z
    2534:	91 81       	ldd	r25, Z+1	; 0x01
    2536:	a0 e0       	ldi	r26, 0x00	; 0
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	18 c0       	rjmp	.+48     	; 0x256c <_ZNK8SdVolume6fatGetEmPm+0xe2>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    253c:	40 e0       	ldi	r20, 0x00	; 0
    253e:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    2542:	81 11       	cpse	r24, r1
    2544:	e9 cf       	rjmp	.-46     	; 0x2518 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    2546:	ba cf       	rjmp	.-140    	; 0x24bc <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2548:	e8 94       	clt
    254a:	c7 f8       	bld	r12, 7
    254c:	dd 24       	eor	r13, r13
    254e:	ee 24       	eor	r14, r14
    2550:	ff 24       	eor	r15, r15
    2552:	c6 01       	movw	r24, r12
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	fc 01       	movw	r30, r24
    255e:	e5 5a       	subi	r30, 0xA5	; 165
    2560:	fd 4f       	sbci	r31, 0xFD	; 253
    2562:	80 81       	ld	r24, Z
    2564:	91 81       	ldd	r25, Z+1	; 0x01
    2566:	a2 81       	ldd	r26, Z+2	; 0x02
    2568:	b3 81       	ldd	r27, Z+3	; 0x03
    256a:	bf 70       	andi	r27, 0x0F	; 15
    256c:	88 83       	st	Y, r24
    256e:	99 83       	std	Y+1, r25	; 0x01
    2570:	aa 83       	std	Y+2, r26	; 0x02
    2572:	bb 83       	std	Y+3, r27	; 0x03
    2574:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	08 95       	ret

00002590 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2590:	4f 92       	push	r4
    2592:	5f 92       	push	r5
    2594:	6f 92       	push	r6
    2596:	7f 92       	push	r7
    2598:	af 92       	push	r10
    259a:	bf 92       	push	r11
    259c:	cf 92       	push	r12
    259e:	df 92       	push	r13
    25a0:	ef 92       	push	r14
    25a2:	ff 92       	push	r15
    25a4:	0f 93       	push	r16
    25a6:	1f 93       	push	r17
    25a8:	cf 93       	push	r28
    25aa:	df 93       	push	r29
    25ac:	00 d0       	rcall	.+0      	; 0x25ae <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <_ZNK8SdVolume9chainSizeEmPm+0x20>
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	8c 01       	movw	r16, r24
    25b6:	49 83       	std	Y+1, r20	; 0x01
    25b8:	5a 83       	std	Y+2, r21	; 0x02
    25ba:	6b 83       	std	Y+3, r22	; 0x03
    25bc:	7c 83       	std	Y+4, r23	; 0x04
    25be:	59 01       	movw	r10, r18
  uint32_t s = 0;
    25c0:	c1 2c       	mov	r12, r1
    25c2:	d1 2c       	mov	r13, r1
    25c4:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    25c6:	41 2c       	mov	r4, r1
    25c8:	82 e0       	ldi	r24, 0x02	; 2
    25ca:	58 2e       	mov	r5, r24
    25cc:	61 2c       	mov	r6, r1
    25ce:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    25d0:	49 81       	ldd	r20, Y+1	; 0x01
    25d2:	5a 81       	ldd	r21, Y+2	; 0x02
    25d4:	6b 81       	ldd	r22, Y+3	; 0x03
    25d6:	7c 81       	ldd	r23, Y+4	; 0x04
    25d8:	9e 01       	movw	r18, r28
    25da:	2f 5f       	subi	r18, 0xFF	; 255
    25dc:	3f 4f       	sbci	r19, 0xFF	; 255
    25de:	c8 01       	movw	r24, r16
    25e0:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    25e4:	88 23       	and	r24, r24
    25e6:	51 f1       	breq	.+84     	; 0x263c <_ZNK8SdVolume9chainSizeEmPm+0xac>
    s += 512UL << clusterSizeShift_;
    25e8:	d3 01       	movw	r26, r6
    25ea:	c2 01       	movw	r24, r4
    25ec:	f8 01       	movw	r30, r16
    25ee:	05 84       	ldd	r0, Z+13	; 0x0d
    25f0:	04 c0       	rjmp	.+8      	; 0x25fa <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	aa 1f       	adc	r26, r26
    25f8:	bb 1f       	adc	r27, r27
    25fa:	0a 94       	dec	r0
    25fc:	d2 f7       	brpl	.-12     	; 0x25f2 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    25fe:	c8 0e       	add	r12, r24
    2600:	d9 1e       	adc	r13, r25
    2602:	ea 1e       	adc	r14, r26
    2604:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2606:	49 81       	ldd	r20, Y+1	; 0x01
    2608:	5a 81       	ldd	r21, Y+2	; 0x02
    260a:	6b 81       	ldd	r22, Y+3	; 0x03
    260c:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    260e:	87 89       	ldd	r24, Z+23	; 0x17
    2610:	80 31       	cpi	r24, 0x10	; 16
    2612:	29 f0       	breq	.+10     	; 0x261e <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    2614:	88 ef       	ldi	r24, 0xF8	; 248
    2616:	9f ef       	ldi	r25, 0xFF	; 255
    2618:	af ef       	ldi	r26, 0xFF	; 255
    261a:	bf e0       	ldi	r27, 0x0F	; 15
    261c:	04 c0       	rjmp	.+8      	; 0x2626 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    261e:	88 ef       	ldi	r24, 0xF8	; 248
    2620:	9f ef       	ldi	r25, 0xFF	; 255
    2622:	a0 e0       	ldi	r26, 0x00	; 0
    2624:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2626:	48 17       	cp	r20, r24
    2628:	59 07       	cpc	r21, r25
    262a:	6a 07       	cpc	r22, r26
    262c:	7b 07       	cpc	r23, r27
    262e:	80 f2       	brcs	.-96     	; 0x25d0 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2630:	f5 01       	movw	r30, r10
    2632:	c0 82       	st	Z, r12
    2634:	d1 82       	std	Z+1, r13	; 0x01
    2636:	e2 82       	std	Z+2, r14	; 0x02
    2638:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    263a:	81 e0       	ldi	r24, 0x01	; 1
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12
    2654:	bf 90       	pop	r11
    2656:	af 90       	pop	r10
    2658:	7f 90       	pop	r7
    265a:	6f 90       	pop	r6
    265c:	5f 90       	pop	r5
    265e:	4f 90       	pop	r4
    2660:	08 95       	ret

00002662 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2662:	4f 92       	push	r4
    2664:	5f 92       	push	r5
    2666:	6f 92       	push	r6
    2668:	7f 92       	push	r7
    266a:	8f 92       	push	r8
    266c:	9f 92       	push	r9
    266e:	af 92       	push	r10
    2670:	bf 92       	push	r11
    2672:	cf 92       	push	r12
    2674:	df 92       	push	r13
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ec 01       	movw	r28, r24
  // error if reserved cluster
  if (cluster < 2) return false;
    2684:	42 30       	cpi	r20, 0x02	; 2
    2686:	51 05       	cpc	r21, r1
    2688:	61 05       	cpc	r22, r1
    268a:	71 05       	cpc	r23, r1
    268c:	10 f4       	brcc	.+4      	; 0x2692 <_ZN8SdVolume6fatPutEmm+0x30>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	78 c0       	rjmp	.+240    	; 0x2782 <_ZN8SdVolume6fatPutEmm+0x120>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	ab 85       	ldd	r26, Y+11	; 0x0b
    2698:	bc 85       	ldd	r27, Y+12	; 0x0c
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	a1 1d       	adc	r26, r1
    269e:	b1 1d       	adc	r27, r1
    26a0:	84 17       	cp	r24, r20
    26a2:	95 07       	cpc	r25, r21
    26a4:	a6 07       	cpc	r26, r22
    26a6:	b7 07       	cpc	r27, r23
    26a8:	90 f3       	brcs	.-28     	; 0x268e <_ZN8SdVolume6fatPutEmm+0x2c>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    26aa:	cb 88       	ldd	r12, Y+19	; 0x13
    26ac:	dc 88       	ldd	r13, Y+20	; 0x14
    26ae:	ed 88       	ldd	r14, Y+21	; 0x15
    26b0:	fe 88       	ldd	r15, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    26b2:	8f 89       	ldd	r24, Y+23	; 0x17
    26b4:	80 31       	cpi	r24, 0x10	; 16
    26b6:	29 f4       	brne	.+10     	; 0x26c2 <_ZN8SdVolume6fatPutEmm+0x60>
    26b8:	bb 27       	eor	r27, r27
    26ba:	a7 2f       	mov	r26, r23
    26bc:	96 2f       	mov	r25, r22
    26be:	85 2f       	mov	r24, r21
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <_ZN8SdVolume6fatPutEmm+0x72>
    26c2:	db 01       	movw	r26, r22
    26c4:	ca 01       	movw	r24, r20
    26c6:	e7 e0       	ldi	r30, 0x07	; 7
    26c8:	b6 95       	lsr	r27
    26ca:	a7 95       	ror	r26
    26cc:	97 95       	ror	r25
    26ce:	87 95       	ror	r24
    26d0:	ea 95       	dec	r30
    26d2:	d1 f7       	brne	.-12     	; 0x26c8 <_ZN8SdVolume6fatPutEmm+0x66>
    26d4:	48 01       	movw	r8, r16
    26d6:	59 01       	movw	r10, r18
    26d8:	2a 01       	movw	r4, r20
    26da:	3b 01       	movw	r6, r22
    26dc:	c8 0e       	add	r12, r24
    26de:	d9 1e       	adc	r13, r25
    26e0:	ea 1e       	adc	r14, r26
    26e2:	fb 1e       	adc	r15, r27

  if (lba != cacheBlockNumber_) {
    26e4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    26e8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    26ec:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    26f0:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    26f4:	c8 16       	cp	r12, r24
    26f6:	d9 06       	cpc	r13, r25
    26f8:	ea 06       	cpc	r14, r26
    26fa:	fb 06       	cpc	r15, r27
    26fc:	81 f4       	brne	.+32     	; 0x271e <_ZN8SdVolume6fatPutEmm+0xbc>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    26fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2700:	80 31       	cpi	r24, 0x10	; 16
    2702:	a9 f4       	brne	.+42     	; 0x272e <_ZN8SdVolume6fatPutEmm+0xcc>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2704:	b3 01       	movw	r22, r6
    2706:	a2 01       	movw	r20, r4
    2708:	55 27       	eor	r21, r21
    270a:	66 27       	eor	r22, r22
    270c:	77 27       	eor	r23, r23
    270e:	44 0f       	add	r20, r20
    2710:	55 1f       	adc	r21, r21
    2712:	fa 01       	movw	r30, r20
    2714:	e5 5a       	subi	r30, 0xA5	; 165
    2716:	fd 4f       	sbci	r31, 0xFD	; 253
    2718:	91 82       	std	Z+1, r9	; 0x01
    271a:	80 82       	st	Z, r8
    271c:	19 c0       	rjmp	.+50     	; 0x2750 <_ZN8SdVolume6fatPutEmm+0xee>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	c7 01       	movw	r24, r14
    2722:	b6 01       	movw	r22, r12
    2724:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    2728:	81 11       	cpse	r24, r1
    272a:	e9 cf       	rjmp	.-46     	; 0x26fe <_ZN8SdVolume6fatPutEmm+0x9c>
    272c:	b0 cf       	rjmp	.-160    	; 0x268e <_ZN8SdVolume6fatPutEmm+0x2c>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    272e:	b3 01       	movw	r22, r6
    2730:	a2 01       	movw	r20, r4
    2732:	4f 77       	andi	r20, 0x7F	; 127
    2734:	55 27       	eor	r21, r21
    2736:	66 27       	eor	r22, r22
    2738:	77 27       	eor	r23, r23
    273a:	44 0f       	add	r20, r20
    273c:	55 1f       	adc	r21, r21
    273e:	44 0f       	add	r20, r20
    2740:	55 1f       	adc	r21, r21
    2742:	fa 01       	movw	r30, r20
    2744:	e5 5a       	subi	r30, 0xA5	; 165
    2746:	fd 4f       	sbci	r31, 0xFD	; 253
    2748:	80 82       	st	Z, r8
    274a:	91 82       	std	Z+1, r9	; 0x01
    274c:	a2 82       	std	Z+2, r10	; 0x02
    274e:	b3 82       	std	Z+3, r11	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2750:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
    2754:	81 60       	ori	r24, 0x01	; 1
    2756:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    275a:	8a 89       	ldd	r24, Y+18	; 0x12
    275c:	82 30       	cpi	r24, 0x02	; 2
    275e:	80 f0       	brcs	.+32     	; 0x2780 <_ZN8SdVolume6fatPutEmm+0x11e>
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	af 81       	ldd	r26, Y+7	; 0x07
    2766:	b8 85       	ldd	r27, Y+8	; 0x08
    2768:	c8 0e       	add	r12, r24
    276a:	d9 1e       	adc	r13, r25
    276c:	ea 1e       	adc	r14, r26
    276e:	fb 1e       	adc	r15, r27
    2770:	c0 92 54 02 	sts	0x0254, r12	; 0x800254 <_ZN8SdVolume17cacheMirrorBlock_E>
    2774:	d0 92 55 02 	sts	0x0255, r13	; 0x800255 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    2778:	e0 92 56 02 	sts	0x0256, r14	; 0x800256 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    277c:	f0 92 57 02 	sts	0x0257, r15	; 0x800257 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    2780:	81 e0       	ldi	r24, 0x01	; 1
}
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	1f 91       	pop	r17
    2788:	0f 91       	pop	r16
    278a:	ff 90       	pop	r15
    278c:	ef 90       	pop	r14
    278e:	df 90       	pop	r13
    2790:	cf 90       	pop	r12
    2792:	bf 90       	pop	r11
    2794:	af 90       	pop	r10
    2796:	9f 90       	pop	r9
    2798:	8f 90       	pop	r8
    279a:	7f 90       	pop	r7
    279c:	6f 90       	pop	r6
    279e:	5f 90       	pop	r5
    27a0:	4f 90       	pop	r4
    27a2:	08 95       	ret

000027a4 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    27a4:	2f 92       	push	r2
    27a6:	3f 92       	push	r3
    27a8:	4f 92       	push	r4
    27aa:	5f 92       	push	r5
    27ac:	6f 92       	push	r6
    27ae:	7f 92       	push	r7
    27b0:	9f 92       	push	r9
    27b2:	af 92       	push	r10
    27b4:	bf 92       	push	r11
    27b6:	cf 92       	push	r12
    27b8:	df 92       	push	r13
    27ba:	ef 92       	push	r14
    27bc:	ff 92       	push	r15
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	60 97       	sbiw	r28, 0x10	; 16
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	f8 94       	cli
    27d0:	de bf       	out	0x3e, r29	; 62
    27d2:	0f be       	out	0x3f, r0	; 63
    27d4:	cd bf       	out	0x3d, r28	; 61
    27d6:	5c 01       	movw	r10, r24
    27d8:	49 87       	std	Y+9, r20	; 0x09
    27da:	5a 87       	std	Y+10, r21	; 0x0a
    27dc:	6b 87       	std	Y+11, r22	; 0x0b
    27de:	7c 87       	std	Y+12, r23	; 0x0c
    27e0:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    27e2:	d9 01       	movw	r26, r18
    27e4:	cd 90       	ld	r12, X+
    27e6:	dd 90       	ld	r13, X+
    27e8:	ed 90       	ld	r14, X+
    27ea:	fc 90       	ld	r15, X
    27ec:	c1 14       	cp	r12, r1
    27ee:	d1 04       	cpc	r13, r1
    27f0:	e1 04       	cpc	r14, r1
    27f2:	f1 04       	cpc	r15, r1
    27f4:	31 f0       	breq	.+12     	; 0x2802 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    27f6:	bf ef       	ldi	r27, 0xFF	; 255
    27f8:	cb 1a       	sub	r12, r27
    27fa:	db 0a       	sbc	r13, r27
    27fc:	eb 0a       	sbc	r14, r27
    27fe:	fb 0a       	sbc	r15, r27
    2800:	10 c0       	rjmp	.+32     	; 0x2822 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2802:	fc 01       	movw	r30, r24
    2804:	c0 80       	ld	r12, Z
    2806:	d1 80       	ldd	r13, Z+1	; 0x01
    2808:	e2 80       	ldd	r14, Z+2	; 0x02
    280a:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    280c:	99 24       	eor	r9, r9
    280e:	93 94       	inc	r9
    2810:	09 85       	ldd	r16, Y+9	; 0x09
    2812:	1a 85       	ldd	r17, Y+10	; 0x0a
    2814:	2b 85       	ldd	r18, Y+11	; 0x0b
    2816:	3c 85       	ldd	r19, Y+12	; 0x0c
    2818:	01 30       	cpi	r16, 0x01	; 1
    281a:	11 05       	cpc	r17, r1
    281c:	21 05       	cpc	r18, r1
    281e:	31 05       	cpc	r19, r1
    2820:	09 f0       	breq	.+2      	; 0x2824 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    2822:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2824:	f5 01       	movw	r30, r10
    2826:	81 85       	ldd	r24, Z+9	; 0x09
    2828:	92 85       	ldd	r25, Z+10	; 0x0a
    282a:	a3 85       	ldd	r26, Z+11	; 0x0b
    282c:	b4 85       	ldd	r27, Z+12	; 0x0c
    282e:	8c 01       	movw	r16, r24
    2830:	9d 01       	movw	r18, r26
    2832:	0f 5f       	subi	r16, 0xFF	; 255
    2834:	1f 4f       	sbci	r17, 0xFF	; 255
    2836:	2f 4f       	sbci	r18, 0xFF	; 255
    2838:	3f 4f       	sbci	r19, 0xFF	; 255
    283a:	0d 87       	std	Y+13, r16	; 0x0d
    283c:	1e 87       	std	Y+14, r17	; 0x0e
    283e:	2f 87       	std	Y+15, r18	; 0x0f
    2840:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2842:	26 01       	movw	r4, r12
    2844:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2846:	1d 82       	std	Y+5, r1	; 0x05
    2848:	1e 82       	std	Y+6, r1	; 0x06
    284a:	1f 82       	std	Y+7, r1	; 0x07
    284c:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    284e:	f5 01       	movw	r30, r10
    2850:	81 85       	ldd	r24, Z+9	; 0x09
    2852:	92 85       	ldd	r25, Z+10	; 0x0a
    2854:	a3 85       	ldd	r26, Z+11	; 0x0b
    2856:	b4 85       	ldd	r27, Z+12	; 0x0c
    2858:	0d 81       	ldd	r16, Y+5	; 0x05
    285a:	1e 81       	ldd	r17, Y+6	; 0x06
    285c:	2f 81       	ldd	r18, Y+7	; 0x07
    285e:	38 85       	ldd	r19, Y+8	; 0x08
    2860:	08 17       	cp	r16, r24
    2862:	19 07       	cpc	r17, r25
    2864:	2a 07       	cpc	r18, r26
    2866:	3b 07       	cpc	r19, r27
    2868:	08 f0       	brcs	.+2      	; 0x286c <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    286a:	56 c0       	rjmp	.+172    	; 0x2918 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    286c:	2d 85       	ldd	r18, Y+13	; 0x0d
    286e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2870:	4f 85       	ldd	r20, Y+15	; 0x0f
    2872:	58 89       	ldd	r21, Y+16	; 0x10
    2874:	24 15       	cp	r18, r4
    2876:	35 05       	cpc	r19, r5
    2878:	46 05       	cpc	r20, r6
    287a:	57 05       	cpc	r21, r7
    287c:	50 f4       	brcc	.+20     	; 0x2892 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    287e:	82 e0       	ldi	r24, 0x02	; 2
    2880:	48 2e       	mov	r4, r24
    2882:	51 2c       	mov	r5, r1
    2884:	61 2c       	mov	r6, r1
    2886:	71 2c       	mov	r7, r1
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	c9 2e       	mov	r12, r25
    288c:	d1 2c       	mov	r13, r1
    288e:	e1 2c       	mov	r14, r1
    2890:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2892:	9e 01       	movw	r18, r28
    2894:	2f 5f       	subi	r18, 0xFF	; 255
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	b3 01       	movw	r22, r6
    289a:	a2 01       	movw	r20, r4
    289c:	c5 01       	movw	r24, r10
    289e:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    28a2:	88 23       	and	r24, r24
    28a4:	c9 f1       	breq	.+114    	; 0x2918 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    if (f != 0) {
    28a6:	49 81       	ldd	r20, Y+1	; 0x01
    28a8:	5a 81       	ldd	r21, Y+2	; 0x02
    28aa:	6b 81       	ldd	r22, Y+3	; 0x03
    28ac:	7c 81       	ldd	r23, Y+4	; 0x04
    28ae:	d3 01       	movw	r26, r6
    28b0:	c2 01       	movw	r24, r4
    28b2:	01 96       	adiw	r24, 0x01	; 1
    28b4:	a1 1d       	adc	r26, r1
    28b6:	b1 1d       	adc	r27, r1
    28b8:	45 2b       	or	r20, r21
    28ba:	46 2b       	or	r20, r22
    28bc:	47 2b       	or	r20, r23
    28be:	19 f0       	breq	.+6      	; 0x28c6 <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    28c0:	6c 01       	movw	r12, r24
    28c2:	7d 01       	movw	r14, r26
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    28c6:	ac 01       	movw	r20, r24
    28c8:	bd 01       	movw	r22, r26
    28ca:	4c 19       	sub	r20, r12
    28cc:	5d 09       	sbc	r21, r13
    28ce:	6e 09       	sbc	r22, r14
    28d0:	7f 09       	sbc	r23, r15
    28d2:	09 85       	ldd	r16, Y+9	; 0x09
    28d4:	1a 85       	ldd	r17, Y+10	; 0x0a
    28d6:	2b 85       	ldd	r18, Y+11	; 0x0b
    28d8:	3c 85       	ldd	r19, Y+12	; 0x0c
    28da:	04 17       	cp	r16, r20
    28dc:	15 07       	cpc	r17, r21
    28de:	26 07       	cpc	r18, r22
    28e0:	37 07       	cpc	r19, r23
    28e2:	79 f0       	breq	.+30     	; 0x2902 <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    28e4:	2d 81       	ldd	r18, Y+5	; 0x05
    28e6:	3e 81       	ldd	r19, Y+6	; 0x06
    28e8:	4f 81       	ldd	r20, Y+7	; 0x07
    28ea:	58 85       	ldd	r21, Y+8	; 0x08
    28ec:	2f 5f       	subi	r18, 0xFF	; 255
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	4f 4f       	sbci	r20, 0xFF	; 255
    28f2:	5f 4f       	sbci	r21, 0xFF	; 255
    28f4:	2d 83       	std	Y+5, r18	; 0x05
    28f6:	3e 83       	std	Y+6, r19	; 0x06
    28f8:	4f 83       	std	Y+7, r20	; 0x07
    28fa:	58 87       	std	Y+8, r21	; 0x08
    28fc:	2c 01       	movw	r4, r24
    28fe:	3d 01       	movw	r6, r26
    2900:	a6 cf       	rjmp	.-180    	; 0x284e <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2902:	0f ef       	ldi	r16, 0xFF	; 255
    2904:	1f ef       	ldi	r17, 0xFF	; 255
    2906:	2f ef       	ldi	r18, 0xFF	; 255
    2908:	3f e0       	ldi	r19, 0x0F	; 15
    290a:	b3 01       	movw	r22, r6
    290c:	a2 01       	movw	r20, r4
    290e:	c5 01       	movw	r24, r10
    2910:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2914:	81 11       	cpse	r24, r1
    2916:	18 c0       	rjmp	.+48     	; 0x2948 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	41 c0       	rjmp	.+130    	; 0x299e <_ZN8SdVolume15allocContiguousEmPm+0x1fa>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    291c:	d3 01       	movw	r26, r6
    291e:	c2 01       	movw	r24, r4
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	a1 09       	sbc	r26, r1
    2924:	b1 09       	sbc	r27, r1
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	af 83       	std	Y+7, r26	; 0x07
    292c:	b8 87       	std	Y+8, r27	; 0x08
    292e:	93 01       	movw	r18, r6
    2930:	82 01       	movw	r16, r4
    2932:	ac 01       	movw	r20, r24
    2934:	bd 01       	movw	r22, r26
    2936:	c5 01       	movw	r24, r10
    2938:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN8SdVolume6fatPutEmm>
    293c:	88 23       	and	r24, r24
    293e:	61 f3       	breq	.-40     	; 0x2918 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    endCluster--;
    2940:	4d 80       	ldd	r4, Y+5	; 0x05
    2942:	5e 80       	ldd	r5, Y+6	; 0x06
    2944:	6f 80       	ldd	r6, Y+7	; 0x07
    2946:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2948:	c4 14       	cp	r12, r4
    294a:	d5 04       	cpc	r13, r5
    294c:	e6 04       	cpc	r14, r6
    294e:	f7 04       	cpc	r15, r7
    2950:	28 f3       	brcs	.-54     	; 0x291c <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2952:	d1 01       	movw	r26, r2
    2954:	4d 91       	ld	r20, X+
    2956:	5d 91       	ld	r21, X+
    2958:	6d 91       	ld	r22, X+
    295a:	7c 91       	ld	r23, X
    295c:	41 15       	cp	r20, r1
    295e:	51 05       	cpc	r21, r1
    2960:	61 05       	cpc	r22, r1
    2962:	71 05       	cpc	r23, r1
    2964:	99 f4       	brne	.+38     	; 0x298c <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2966:	f1 01       	movw	r30, r2
    2968:	c0 82       	st	Z, r12
    296a:	d1 82       	std	Z+1, r13	; 0x01
    296c:	e2 82       	std	Z+2, r14	; 0x02
    296e:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    2970:	99 20       	and	r9, r9
    2972:	a1 f0       	breq	.+40     	; 0x299c <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    2974:	ff ef       	ldi	r31, 0xFF	; 255
    2976:	cf 1a       	sub	r12, r31
    2978:	df 0a       	sbc	r13, r31
    297a:	ef 0a       	sbc	r14, r31
    297c:	ff 0a       	sbc	r15, r31
    297e:	d5 01       	movw	r26, r10
    2980:	cd 92       	st	X+, r12
    2982:	dd 92       	st	X+, r13
    2984:	ed 92       	st	X+, r14
    2986:	fc 92       	st	X, r15
    2988:	13 97       	sbiw	r26, 0x03	; 3
    298a:	08 c0       	rjmp	.+16     	; 0x299c <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    298c:	97 01       	movw	r18, r14
    298e:	86 01       	movw	r16, r12
    2990:	c5 01       	movw	r24, r10
    2992:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN8SdVolume6fatPutEmm>
    2996:	81 11       	cpse	r24, r1
    2998:	e6 cf       	rjmp	.-52     	; 0x2966 <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    299a:	be cf       	rjmp	.-132    	; 0x2918 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    299c:	81 e0       	ldi	r24, 0x01	; 1
}
    299e:	60 96       	adiw	r28, 0x10	; 16
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	1f 91       	pop	r17
    29b0:	0f 91       	pop	r16
    29b2:	ff 90       	pop	r15
    29b4:	ef 90       	pop	r14
    29b6:	df 90       	pop	r13
    29b8:	cf 90       	pop	r12
    29ba:	bf 90       	pop	r11
    29bc:	af 90       	pop	r10
    29be:	9f 90       	pop	r9
    29c0:	7f 90       	pop	r7
    29c2:	6f 90       	pop	r6
    29c4:	5f 90       	pop	r5
    29c6:	4f 90       	pop	r4
    29c8:	3f 90       	pop	r3
    29ca:	2f 90       	pop	r2
    29cc:	08 95       	ret

000029ce <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    29ce:	af 92       	push	r10
    29d0:	bf 92       	push	r11
    29d2:	cf 92       	push	r12
    29d4:	df 92       	push	r13
    29d6:	ef 92       	push	r14
    29d8:	ff 92       	push	r15
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <_ZN8SdVolume9freeChainEm+0x16>
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <_ZN8SdVolume9freeChainEm+0x18>
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	5c 01       	movw	r10, r24
    29ec:	6a 01       	movw	r12, r20
    29ee:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	a0 e0       	ldi	r26, 0x00	; 0
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	f5 01       	movw	r30, r10
    29fa:	80 83       	st	Z, r24
    29fc:	91 83       	std	Z+1, r25	; 0x01
    29fe:	a2 83       	std	Z+2, r26	; 0x02
    2a00:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2a02:	9e 01       	movw	r18, r28
    2a04:	2f 5f       	subi	r18, 0xFF	; 255
    2a06:	3f 4f       	sbci	r19, 0xFF	; 255
    2a08:	b7 01       	movw	r22, r14
    2a0a:	a6 01       	movw	r20, r12
    2a0c:	c5 01       	movw	r24, r10
    2a0e:	0e 94 45 12 	call	0x248a	; 0x248a <_ZNK8SdVolume6fatGetEmPm>
    2a12:	88 23       	and	r24, r24
    2a14:	11 f1       	breq	.+68     	; 0x2a5a <_ZN8SdVolume9freeChainEm+0x8c>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2a16:	00 e0       	ldi	r16, 0x00	; 0
    2a18:	10 e0       	ldi	r17, 0x00	; 0
    2a1a:	98 01       	movw	r18, r16
    2a1c:	b7 01       	movw	r22, r14
    2a1e:	a6 01       	movw	r20, r12
    2a20:	c5 01       	movw	r24, r10
    2a22:	0e 94 31 13 	call	0x2662	; 0x2662 <_ZN8SdVolume6fatPutEmm>
    2a26:	88 23       	and	r24, r24
    2a28:	c1 f0       	breq	.+48     	; 0x2a5a <_ZN8SdVolume9freeChainEm+0x8c>

    cluster = next;
    2a2a:	c9 80       	ldd	r12, Y+1	; 0x01
    2a2c:	da 80       	ldd	r13, Y+2	; 0x02
    2a2e:	eb 80       	ldd	r14, Y+3	; 0x03
    2a30:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2a32:	f5 01       	movw	r30, r10
    2a34:	87 89       	ldd	r24, Z+23	; 0x17
    2a36:	80 31       	cpi	r24, 0x10	; 16
    2a38:	29 f0       	breq	.+10     	; 0x2a44 <_ZN8SdVolume9freeChainEm+0x76>
    2a3a:	88 ef       	ldi	r24, 0xF8	; 248
    2a3c:	9f ef       	ldi	r25, 0xFF	; 255
    2a3e:	af ef       	ldi	r26, 0xFF	; 255
    2a40:	bf e0       	ldi	r27, 0x0F	; 15
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <_ZN8SdVolume9freeChainEm+0x7e>
    2a44:	88 ef       	ldi	r24, 0xF8	; 248
    2a46:	9f ef       	ldi	r25, 0xFF	; 255
    2a48:	a0 e0       	ldi	r26, 0x00	; 0
    2a4a:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    2a4c:	c8 16       	cp	r12, r24
    2a4e:	d9 06       	cpc	r13, r25
    2a50:	ea 06       	cpc	r14, r26
    2a52:	fb 06       	cpc	r15, r27
    2a54:	b0 f2       	brcs	.-84     	; 0x2a02 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	01 c0       	rjmp	.+2      	; 0x2a5c <_ZN8SdVolume9freeChainEm+0x8e>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2a5a:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    2a74:	bf 90       	pop	r11
    2a76:	af 90       	pop	r10
    2a78:	08 95       	ret

00002a7a <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    2a7a:	8f 92       	push	r8
    2a7c:	9f 92       	push	r9
    2a7e:	af 92       	push	r10
    2a80:	bf 92       	push	r11
    2a82:	cf 92       	push	r12
    2a84:	df 92       	push	r13
    2a86:	ef 92       	push	r14
    2a88:	ff 92       	push	r15
    2a8a:	0f 93       	push	r16
    2a8c:	1f 93       	push	r17
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	ec 01       	movw	r28, r24
    2a94:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    2a96:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <_ZN8SdVolume7sdCard_E+0x1>
    2a9a:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    2a9e:	44 23       	and	r20, r20
    2aa0:	69 f1       	breq	.+90     	; 0x2afc <_ZN8SdVolume4initEP7Sd2Cardh+0x82>
    if (part > 4)return false;
    2aa2:	45 30       	cpi	r20, 0x05	; 5
    2aa4:	10 f0       	brcs	.+4      	; 0x2aaa <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	f2 c0       	rjmp	.+484    	; 0x2c8e <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	70 e0       	ldi	r23, 0x00	; 0
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    2ab6:	88 23       	and	r24, r24
    2ab8:	b1 f3       	breq	.-20     	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2aba:	20 e1       	ldi	r18, 0x10	; 16
    2abc:	12 9f       	mul	r17, r18
    2abe:	a0 01       	movw	r20, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	45 5b       	subi	r20, 0xB5	; 181
    2ac4:	5d 4f       	sbci	r21, 0xFD	; 253
    2ac6:	fa 01       	movw	r30, r20
    2ac8:	e2 54       	subi	r30, 0x42	; 66
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	80 81       	ld	r24, Z
    2ace:	8f 77       	andi	r24, 0x7F	; 127
    2ad0:	51 f7       	brne	.-44     	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    2ad2:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2ad4:	80 81       	ld	r24, Z
    2ad6:	91 81       	ldd	r25, Z+1	; 0x01
    2ad8:	a2 81       	ldd	r26, Z+2	; 0x02
    2ada:	b3 81       	ldd	r27, Z+3	; 0x03
    2adc:	84 36       	cpi	r24, 0x64	; 100
    2ade:	91 05       	cpc	r25, r1
    2ae0:	a1 05       	cpc	r26, r1
    2ae2:	b1 05       	cpc	r27, r1
    2ae4:	00 f3       	brcs	.-64     	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    2ae6:	34 97       	sbiw	r30, 0x04	; 4
    2ae8:	c0 80       	ld	r12, Z
    2aea:	d1 80       	ldd	r13, Z+1	; 0x01
    2aec:	e2 80       	ldd	r14, Z+2	; 0x02
    2aee:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    2af0:	c1 14       	cp	r12, r1
    2af2:	d1 04       	cpc	r13, r1
    2af4:	e1 04       	cpc	r14, r1
    2af6:	f1 04       	cpc	r15, r1
    2af8:	21 f4       	brne	.+8      	; 0x2b02 <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    2afa:	d5 cf       	rjmp	.-86     	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    2afc:	c1 2c       	mov	r12, r1
    2afe:	d1 2c       	mov	r13, r1
    2b00:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	c7 01       	movw	r24, r14
    2b06:	b6 01       	movw	r22, r12
    2b08:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN8SdVolume13cacheRawBlockEmh>
    2b0c:	88 23       	and	r24, r24
    2b0e:	59 f2       	breq	.-106    	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2b10:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <_ZN8SdVolume12cacheBuffer_E+0xb>
    2b14:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <_ZN8SdVolume12cacheBuffer_E+0xc>
    2b18:	81 15       	cp	r24, r1
    2b1a:	92 40       	sbci	r25, 0x02	; 2
    2b1c:	21 f6       	brne	.-120    	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2b1e:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2b22:	99 23       	and	r25, r25
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    2b26:	bf cf       	rjmp	.-130    	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2b28:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_ZN8SdVolume12cacheBuffer_E+0xe>
    2b2c:	30 91 6a 02 	lds	r19, 0x026A	; 0x80026a <_ZN8SdVolume12cacheBuffer_E+0xf>
    2b30:	23 2b       	or	r18, r19
    2b32:	09 f4       	brne	.+2      	; 0x2b36 <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    2b34:	b8 cf       	rjmp	.-144    	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    2b36:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    2b3a:	88 23       	and	r24, r24
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    2b3e:	b3 cf       	rjmp	.-154    	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    2b40:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    2b42:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2b44:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	50 e0       	ldi	r21, 0x00	; 0
    2b4c:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b4e:	e2 2f       	mov	r30, r18
    2b50:	ba 01       	movw	r22, r20
    2b52:	02 2e       	mov	r0, r18
    2b54:	02 c0       	rjmp	.+4      	; 0x2b5a <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    2b56:	66 0f       	add	r22, r22
    2b58:	77 1f       	adc	r23, r23
    2b5a:	0a 94       	dec	r0
    2b5c:	e2 f7       	brpl	.-8      	; 0x2b56 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    2b5e:	86 17       	cp	r24, r22
    2b60:	97 07       	cpc	r25, r23
    2b62:	31 f0       	breq	.+12     	; 0x2b70 <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    2b64:	31 e0       	ldi	r19, 0x01	; 1
    2b66:	32 0f       	add	r19, r18
    2b68:	3d 87       	std	Y+13, r19	; 0x0d
    2b6a:	28 30       	cpi	r18, 0x08	; 8
    2b6c:	78 f3       	brcs	.-34     	; 0x2b4c <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
    2b6e:	9b cf       	rjmp	.-202    	; 0x2aa6 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    2b70:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <_ZN8SdVolume12cacheBuffer_E+0x16>
    2b74:	30 91 72 02 	lds	r19, 0x0272	; 0x800272 <_ZN8SdVolume12cacheBuffer_E+0x17>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    2b78:	21 15       	cp	r18, r1
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	19 f0       	breq	.+6      	; 0x2b84 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	08 c0       	rjmp	.+16     	; 0x2b94 <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    2b84:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <_ZN8SdVolume12cacheBuffer_E+0x24>
    2b88:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <_ZN8SdVolume12cacheBuffer_E+0x25>
    2b8c:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <_ZN8SdVolume12cacheBuffer_E+0x26>
    2b90:	50 91 82 02 	lds	r21, 0x0282	; 0x800282 <_ZN8SdVolume12cacheBuffer_E+0x27>
    2b94:	2d 83       	std	Y+5, r18	; 0x05
    2b96:	3e 83       	std	Y+6, r19	; 0x06
    2b98:	4f 83       	std	Y+7, r20	; 0x07
    2b9a:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    2b9c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN8SdVolume12cacheBuffer_E+0xe>
    2ba0:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <_ZN8SdVolume12cacheBuffer_E+0xf>
    2ba4:	46 01       	movw	r8, r12
    2ba6:	57 01       	movw	r10, r14
    2ba8:	88 0e       	add	r8, r24
    2baa:	99 1e       	adc	r9, r25
    2bac:	a1 1c       	adc	r10, r1
    2bae:	b1 1c       	adc	r11, r1
    2bb0:	8b 8a       	std	Y+19, r8	; 0x13
    2bb2:	9c 8a       	std	Y+20, r9	; 0x14
    2bb4:	ad 8a       	std	Y+21, r10	; 0x15
    2bb6:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    2bb8:	00 91 6c 02 	lds	r16, 0x026C	; 0x80026c <_ZN8SdVolume12cacheBuffer_E+0x11>
    2bbc:	10 91 6d 02 	lds	r17, 0x026D	; 0x80026d <_ZN8SdVolume12cacheBuffer_E+0x12>
    2bc0:	19 8f       	std	Y+25, r17	; 0x19
    2bc2:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    2bc4:	a0 91 6b 02 	lds	r26, 0x026B	; 0x80026b <_ZN8SdVolume12cacheBuffer_E+0x10>
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__muluhisi3>
    2bce:	86 0e       	add	r8, r22
    2bd0:	97 1e       	adc	r9, r23
    2bd2:	a8 1e       	adc	r10, r24
    2bd4:	b9 1e       	adc	r11, r25
    2bd6:	8a 8e       	std	Y+26, r8	; 0x1a
    2bd8:	9b 8e       	std	Y+27, r9	; 0x1b
    2bda:	ac 8e       	std	Y+28, r10	; 0x1c
    2bdc:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    2bde:	85 e0       	ldi	r24, 0x05	; 5
    2be0:	00 0f       	add	r16, r16
    2be2:	11 1f       	adc	r17, r17
    2be4:	8a 95       	dec	r24
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <_ZN8SdVolume4initEP7Sd2Cardh+0x166>
    2be8:	01 50       	subi	r16, 0x01	; 1
    2bea:	1e 4f       	sbci	r17, 0xFE	; 254
    2bec:	01 2f       	mov	r16, r17
    2bee:	11 27       	eor	r17, r17
    2bf0:	06 95       	lsr	r16
    2bf2:	80 0e       	add	r8, r16
    2bf4:	91 1e       	adc	r9, r17
    2bf6:	a1 1c       	adc	r10, r1
    2bf8:	b1 1c       	adc	r11, r1
    2bfa:	8e 86       	std	Y+14, r8	; 0x0e
    2bfc:	9f 86       	std	Y+15, r9	; 0x0f
    2bfe:	a8 8a       	std	Y+16, r10	; 0x10
    2c00:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    2c02:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <_ZN8SdVolume12cacheBuffer_E+0x13>
    2c06:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <_ZN8SdVolume12cacheBuffer_E+0x14>
                           bpb->totalSectors16 : bpb->totalSectors32;
    2c0a:	21 15       	cp	r18, r1
    2c0c:	31 05       	cpc	r19, r1
    2c0e:	21 f0       	breq	.+8      	; 0x2c18 <_ZN8SdVolume4initEP7Sd2Cardh+0x19e>
    2c10:	a9 01       	movw	r20, r18
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	08 c0       	rjmp	.+16     	; 0x2c28 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ae>
    2c18:	40 91 7b 02 	lds	r20, 0x027B	; 0x80027b <_ZN8SdVolume12cacheBuffer_E+0x20>
    2c1c:	50 91 7c 02 	lds	r21, 0x027C	; 0x80027c <_ZN8SdVolume12cacheBuffer_E+0x21>
    2c20:	60 91 7d 02 	lds	r22, 0x027D	; 0x80027d <_ZN8SdVolume12cacheBuffer_E+0x22>
    2c24:	70 91 7e 02 	lds	r23, 0x027E	; 0x80027e <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    2c28:	d7 01       	movw	r26, r14
    2c2a:	c6 01       	movw	r24, r12
    2c2c:	88 19       	sub	r24, r8
    2c2e:	99 09       	sbc	r25, r9
    2c30:	aa 09       	sbc	r26, r10
    2c32:	bb 09       	sbc	r27, r11
    2c34:	84 0f       	add	r24, r20
    2c36:	95 1f       	adc	r25, r21
    2c38:	a6 1f       	adc	r26, r22
    2c3a:	b7 1f       	adc	r27, r23
    2c3c:	04 c0       	rjmp	.+8      	; 0x2c46 <_ZN8SdVolume4initEP7Sd2Cardh+0x1cc>
    2c3e:	b6 95       	lsr	r27
    2c40:	a7 95       	ror	r26
    2c42:	97 95       	ror	r25
    2c44:	87 95       	ror	r24
    2c46:	ea 95       	dec	r30
    2c48:	d2 f7       	brpl	.-12     	; 0x2c3e <_ZN8SdVolume4initEP7Sd2Cardh+0x1c4>
    2c4a:	89 87       	std	Y+9, r24	; 0x09
    2c4c:	9a 87       	std	Y+10, r25	; 0x0a
    2c4e:	ab 87       	std	Y+11, r26	; 0x0b
    2c50:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    2c52:	85 3f       	cpi	r24, 0xF5	; 245
    2c54:	2f e0       	ldi	r18, 0x0F	; 15
    2c56:	92 07       	cpc	r25, r18
    2c58:	a1 05       	cpc	r26, r1
    2c5a:	b1 05       	cpc	r27, r1
    2c5c:	10 f4       	brcc	.+4      	; 0x2c62 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    fatType_ = 12;
    2c5e:	8c e0       	ldi	r24, 0x0C	; 12
    2c60:	14 c0       	rjmp	.+40     	; 0x2c8a <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else if (clusterCount_ < 65525) {
    2c62:	85 3f       	cpi	r24, 0xF5	; 245
    2c64:	9f 4f       	sbci	r25, 0xFF	; 255
    2c66:	a1 05       	cpc	r26, r1
    2c68:	b1 05       	cpc	r27, r1
    2c6a:	10 f4       	brcc	.+4      	; 0x2c70 <_ZN8SdVolume4initEP7Sd2Cardh+0x1f6>
    fatType_ = 16;
    2c6c:	80 e1       	ldi	r24, 0x10	; 16
    2c6e:	0d c0       	rjmp	.+26     	; 0x2c8a <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    2c70:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    2c74:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    2c78:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    2c7c:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <_ZN8SdVolume12cacheBuffer_E+0x2f>
    2c80:	8a 8f       	std	Y+26, r24	; 0x1a
    2c82:	9b 8f       	std	Y+27, r25	; 0x1b
    2c84:	ac 8f       	std	Y+28, r26	; 0x1c
    2c86:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    2c88:	80 e2       	ldi	r24, 0x20	; 32
    2c8a:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	ff 90       	pop	r15
    2c98:	ef 90       	pop	r14
    2c9a:	df 90       	pop	r13
    2c9c:	cf 90       	pop	r12
    2c9e:	bf 90       	pop	r11
    2ca0:	af 90       	pop	r10
    2ca2:	9f 90       	pop	r9
    2ca4:	8f 90       	pop	r8
    2ca6:	08 95       	ret

00002ca8 <_Z10UpdateLedsv>:
#define LPF_HEADER_LENGTH 32

// Periodic functions
void UpdateLeds(void) {
	// Release data available flag
	if (System_IsState(System_stateRunning))
    2ca8:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    2cac:	81 30       	cpi	r24, 0x01	; 1
    2cae:	29 f4       	brne	.+10     	; 0x2cba <_Z10UpdateLedsv+0x12>
	{
		Flag_Release(dataAvailableFlag);
    2cb0:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <dataAvailableFlag>
    2cb4:	81 50       	subi	r24, 0x01	; 1
    2cb6:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <dataAvailableFlag>
	}

	// Set update flag for Tlc library
	if (!Flag_HasFailedRelease(dataAvailableFlag))
    2cba:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <dataAvailableFlag>
    2cbe:	87 fd       	sbrc	r24, 7
    2cc0:	03 c0       	rjmp	.+6      	; 0x2cc8 <_Z10UpdateLedsv+0x20>
	__asm__ volatile ("" ::: "memory");
	Tlc5941_dcUpdateFlag = 1;
}
static inline void Tlc5941_SetGSUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_gsUpdateFlag = 1;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <Tlc5941_gsUpdateFlag>
    2cc8:	08 95       	ret

00002cca <_Z16UpdateStatusLedsv>:
		Tlc5941_SetGSUpdateFlag();
}

void UpdateStatusLeds(void) {
	switch (System_state)
    2cca:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <System_state>
    2cce:	8e 2f       	mov	r24, r30
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	88 30       	cpi	r24, 0x08	; 8
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	c8 f5       	brcc	.+114    	; 0x2d4a <_Z16UpdateStatusLedsv+0x80>
    2cd8:	fc 01       	movw	r30, r24
    2cda:	ec 5c       	subi	r30, 0xCC	; 204
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <__tablejump2__>
	{
	case System_stateInitializing:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2ce2:	60 e0       	ldi	r22, 0x00	; 0
    2ce4:	83 e0       	ldi	r24, 0x03	; 3
    2ce6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <_Z16UpdateStatusLedsv+0x28>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_Off);
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateRunning:
		StatusLeds_Toggle(StatusLeds_LedOn);
    2cec:	83 e0       	ldi	r24, 0x03	; 3
    2cee:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <StatusLeds_Toggle>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_Off);
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	84 e0       	ldi	r24, 0x04	; 4
    2cf6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
    2cfa:	23 c0       	rjmp	.+70     	; 0x2d42 <_Z16UpdateStatusLedsv+0x78>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateFinished:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_Off);
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	07 c0       	rjmp	.+14     	; 0x2d16 <_Z16UpdateStatusLedsv+0x4c>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_On);
		break;
	case System_stateErrorNoSdCard:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	0b c0       	rjmp	.+22     	; 0x2d22 <_Z16UpdateStatusLedsv+0x58>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateErrorNoSdFiles:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	83 e0       	ldi	r24, 0x03	; 3
    2d10:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	84 e0       	ldi	r24, 0x04	; 4
    2d18:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_On);
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	12 c0       	rjmp	.+36     	; 0x2d44 <_Z16UpdateStatusLedsv+0x7a>
		break;
	case System_stateErrorWrongSdFiles:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_On);
    2d20:	61 e0       	ldi	r22, 0x01	; 1
    2d22:	83 e0       	ldi	r24, 0x03	; 3
    2d24:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
    2d28:	61 e0       	ldi	r22, 0x01	; 1
    2d2a:	e4 cf       	rjmp	.-56     	; 0x2cf4 <_Z16UpdateStatusLedsv+0x2a>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateErrorTimeout:
		StatusLeds_Toggle(StatusLeds_LedOn);
    2d2c:	83 e0       	ldi	r24, 0x03	; 3
    2d2e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <StatusLeds_Toggle>
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <_Z16UpdateStatusLedsv+0x72>
		StatusLeds_Toggle(StatusLeds_LedErr);
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateErrorLpfUnavailable:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2d34:	60 e0       	ldi	r22, 0x00	; 0
    2d36:	83 e0       	ldi	r24, 0x03	; 3
    2d38:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
		StatusLeds_Toggle(StatusLeds_LedErr);
    2d3c:	84 e0       	ldi	r24, 0x04	; 4
    2d3e:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <StatusLeds_Toggle>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	85 e0       	ldi	r24, 0x05	; 5
    2d46:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <StatusLeds_Set>
    2d4a:	08 95       	ret

00002d4c <_ZN5SDLib4FileC1ERKS0_>:
#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT | O_APPEND)

namespace SDLib {

class File : public Stream {
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	ec 01       	movw	r28, r24
#ifdef BIN // Prevent warnings if BIN is previously defined in "iotnx4.h" or similar
#undef BIN
#endif
#define BIN 2

class Print
    2d52:	fb 01       	movw	r30, r22
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	9b 83       	std	Y+3, r25	; 0x03
    2d5a:	8a 83       	std	Y+2, r24	; 0x02
    SKIP_WHITESPACE // Only tabs, spaces, line feeds & carriage returns are skipped.
};

#define NO_IGNORE_CHAR  '\x01' // a char not found in a valid ASCII numeric field

class Stream : public Print
    2d5c:	84 81       	ldd	r24, Z+4	; 0x04
    2d5e:	95 81       	ldd	r25, Z+5	; 0x05
    2d60:	a6 81       	ldd	r26, Z+6	; 0x06
    2d62:	b7 81       	ldd	r27, Z+7	; 0x07
    2d64:	8c 83       	std	Y+4, r24	; 0x04
    2d66:	9d 83       	std	Y+5, r25	; 0x05
    2d68:	ae 83       	std	Y+6, r26	; 0x06
    2d6a:	bf 83       	std	Y+7, r27	; 0x07
    2d6c:	80 85       	ldd	r24, Z+8	; 0x08
    2d6e:	91 85       	ldd	r25, Z+9	; 0x09
    2d70:	a2 85       	ldd	r26, Z+10	; 0x0a
    2d72:	b3 85       	ldd	r27, Z+11	; 0x0b
    2d74:	88 87       	std	Y+8, r24	; 0x08
    2d76:	99 87       	std	Y+9, r25	; 0x09
    2d78:	aa 87       	std	Y+10, r26	; 0x0a
    2d7a:	bb 87       	std	Y+11, r27	; 0x0b
    2d7c:	80 e2       	ldi	r24, 0x20	; 32
    2d7e:	91 e0       	ldi	r25, 0x01	; 1
    2d80:	99 83       	std	Y+1, r25	; 0x01
    2d82:	88 83       	st	Y, r24
    2d84:	8d e0       	ldi	r24, 0x0D	; 13
    2d86:	3c 96       	adiw	r30, 0x0c	; 12
    2d88:	de 01       	movw	r26, r28
    2d8a:	1c 96       	adiw	r26, 0x0c	; 12
    2d8c:	01 90       	ld	r0, Z+
    2d8e:	0d 92       	st	X+, r0
    2d90:	8a 95       	dec	r24
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <_ZN5SDLib4FileC1ERKS0_+0x40>
    2d94:	fb 01       	movw	r30, r22
    2d96:	81 8d       	ldd	r24, Z+25	; 0x19
    2d98:	92 8d       	ldd	r25, Z+26	; 0x1a
    2d9a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9c:	89 8f       	std	Y+25, r24	; 0x19
    2d9e:	df 91       	pop	r29
    2da0:	cf 91       	pop	r28
    2da2:	08 95       	ret

00002da4 <_Z11timer0_initv>:
	#ifndef sbi
	#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
	#endif
	
	// Timer mode: fast PWM
	sbi(TCCR0A, WGM01);
    2da4:	84 b5       	in	r24, 0x24	; 36
    2da6:	82 60       	ori	r24, 0x02	; 2
    2da8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2daa:	84 b5       	in	r24, 0x24	; 36
    2dac:	81 60       	ori	r24, 0x01	; 1
    2dae:	84 bd       	out	0x24, r24	; 36

	// set timer 0 prescale factor to 64
	sbi(TCCR0B, CS01);
    2db0:	85 b5       	in	r24, 0x25	; 37
    2db2:	82 60       	ori	r24, 0x02	; 2
    2db4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2db6:	85 b5       	in	r24, 0x25	; 37
    2db8:	81 60       	ori	r24, 0x01	; 1
    2dba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
	sbi(TIMSK0, TOIE0);
    2dbc:	ee e6       	ldi	r30, 0x6E	; 110
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	81 60       	ori	r24, 0x01	; 1
    2dc4:	80 83       	st	Z, r24
    2dc6:	08 95       	ret

00002dc8 <_Z13parseTextFileN5SDLib4FileEPhm>:
}

// This function parses a list of uint8 from a text file. It returns 1 if exactly
// n_output numbers were extracted from the file and stored in output[], and 0
// otherwise.
uint8_t parseTextFile(File file, uint8_t output[], uint32_t n_output) {
    2dc8:	3f 92       	push	r3
    2dca:	4f 92       	push	r4
    2dcc:	5f 92       	push	r5
    2dce:	6f 92       	push	r6
    2dd0:	7f 92       	push	r7
    2dd2:	8f 92       	push	r8
    2dd4:	9f 92       	push	r9
    2dd6:	af 92       	push	r10
    2dd8:	bf 92       	push	r11
    2dda:	cf 92       	push	r12
    2ddc:	df 92       	push	r13
    2dde:	ef 92       	push	r14
    2de0:	ff 92       	push	r15
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	df 93       	push	r29
    2dea:	cd b7       	in	r28, 0x3d	; 61
    2dec:	de b7       	in	r29, 0x3e	; 62
    2dee:	e4 97       	sbiw	r28, 0x34	; 52
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	de bf       	out	0x3e, r29	; 62
    2df6:	0f be       	out	0x3f, r0	; 63
    2df8:	cd bf       	out	0x3d, r28	; 61
    2dfa:	8c 01       	movw	r16, r24
    2dfc:	29 01       	movw	r4, r18
    2dfe:	3a 01       	movw	r6, r20
    2e00:	4b 01       	movw	r8, r22
	// Index for the output array
	uint32_t output_i = 0;
    2e02:	c1 2c       	mov	r12, r1
    2e04:	d1 2c       	mov	r13, r1
    2e06:	76 01       	movw	r14, r12
	char * charBufferPtr;
	// Temporary container for the converted integer
	uint16_t tempVal;

	// Read characters until the end of the file is found
	while (file.available()) {
    2e08:	c8 01       	movw	r24, r16
    2e0a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN5SDLib4File9availableEv>
    2e0e:	89 2b       	or	r24, r25
    2e10:	21 f1       	breq	.+72     	; 0x2e5a <_Z13parseTextFileN5SDLib4FileEPhm+0x92>
		charBuffer[0] = file.read();
    2e12:	c8 01       	movw	r24, r16
    2e14:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN5SDLib4File4readEv>
    2e18:	89 83       	std	Y+1, r24	; 0x01
		// Only process if current character is not space
		if (!isspace(charBuffer[0])) {
    2e1a:	99 27       	eor	r25, r25
    2e1c:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <isspace>
    2e20:	89 2b       	or	r24, r25
    2e22:	91 f7       	brne	.-28     	; 0x2e08 <_Z13parseTextFileN5SDLib4FileEPhm+0x40>
			// If we already finished with the output array, return with error
			if (output_i == n_output) {
    2e24:	c4 14       	cp	r12, r4
    2e26:	d5 04       	cpc	r13, r5
    2e28:	e6 04       	cpc	r14, r6
    2e2a:	f7 04       	cpc	r15, r7
    2e2c:	e1 f0       	breq	.+56     	; 0x2e66 <_Z13parseTextFileN5SDLib4FileEPhm+0x9e>
    2e2e:	5e 01       	movw	r10, r28
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	a8 0e       	add	r10, r24
    2e34:	b1 1c       	adc	r11, r1
    2e36:	33 24       	eor	r3, r3
    2e38:	33 94       	inc	r3
				return 0;
			}
			
			// Fill buffer until a space or EOF are found.
			charBuffer_i = 1;
			while(file.available() && !isspace(file.peek()) && (charBuffer_i < charBuffer_length - 1)) {
    2e3a:	c8 01       	movw	r24, r16
    2e3c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN5SDLib4File9availableEv>
    2e40:	89 2b       	or	r24, r25
    2e42:	99 f0       	breq	.+38     	; 0x2e6a <_Z13parseTextFileN5SDLib4FileEPhm+0xa2>
    2e44:	c8 01       	movw	r24, r16
    2e46:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN5SDLib4File4peekEv>
    2e4a:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <isspace>
    2e4e:	89 2b       	or	r24, r25
    2e50:	61 f4       	brne	.+24     	; 0x2e6a <_Z13parseTextFileN5SDLib4FileEPhm+0xa2>
    2e52:	e1 e3       	ldi	r30, 0x31	; 49
    2e54:	3e 12       	cpse	r3, r30
    2e56:	16 c0       	rjmp	.+44     	; 0x2e84 <_Z13parseTextFileN5SDLib4FileEPhm+0xbc>
    2e58:	08 c0       	rjmp	.+16     	; 0x2e6a <_Z13parseTextFileN5SDLib4FileEPhm+0xa2>
		charBuffer[0] = file.read();
		// Only process if current character is not space
		if (!isspace(charBuffer[0])) {
			// If we already finished with the output array, return with error
			if (output_i == n_output) {
				return 0;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	c4 14       	cp	r12, r4
    2e5e:	d5 04       	cpc	r13, r5
    2e60:	e6 04       	cpc	r14, r6
    2e62:	f7 04       	cpc	r15, r7
    2e64:	e1 f1       	breq	.+120    	; 0x2ede <_Z13parseTextFileN5SDLib4FileEPhm+0x116>
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    2e68:	3a c0       	rjmp	.+116    	; 0x2ede <_Z13parseTextFileN5SDLib4FileEPhm+0x116>
			while(file.available() && !isspace(file.peek()) && (charBuffer_i < charBuffer_length - 1)) {
				charBuffer[charBuffer_i] = file.read();
				charBuffer_i++;
			}
			// Return with error if the buffer overflows
			if (file.available() && !isspace(file.peek())){
    2e6a:	c8 01       	movw	r24, r16
    2e6c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN5SDLib4File9availableEv>
    2e70:	89 2b       	or	r24, r25
    2e72:	81 f0       	breq	.+32     	; 0x2e94 <_Z13parseTextFileN5SDLib4FileEPhm+0xcc>
    2e74:	c8 01       	movw	r24, r16
    2e76:	0e 94 5f 04 	call	0x8be	; 0x8be <_ZN5SDLib4File4peekEv>
    2e7a:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <isspace>
    2e7e:	89 2b       	or	r24, r25
    2e80:	49 f4       	brne	.+18     	; 0x2e94 <_Z13parseTextFileN5SDLib4FileEPhm+0xcc>
    2e82:	f1 cf       	rjmp	.-30     	; 0x2e66 <_Z13parseTextFileN5SDLib4FileEPhm+0x9e>
			}
			
			// Fill buffer until a space or EOF are found.
			charBuffer_i = 1;
			while(file.available() && !isspace(file.peek()) && (charBuffer_i < charBuffer_length - 1)) {
				charBuffer[charBuffer_i] = file.read();
    2e84:	c8 01       	movw	r24, r16
    2e86:	0e 94 55 04 	call	0x8aa	; 0x8aa <_ZN5SDLib4File4readEv>
    2e8a:	f5 01       	movw	r30, r10
    2e8c:	81 93       	st	Z+, r24
    2e8e:	5f 01       	movw	r10, r30
				charBuffer_i++;
    2e90:	33 94       	inc	r3
				return 0;
			}
			
			// Fill buffer until a space or EOF are found.
			charBuffer_i = 1;
			while(file.available() && !isspace(file.peek()) && (charBuffer_i < charBuffer_length - 1)) {
    2e92:	d3 cf       	rjmp	.-90     	; 0x2e3a <_Z13parseTextFileN5SDLib4FileEPhm+0x72>
			// Return with error if the buffer overflows
			if (file.available() && !isspace(file.peek())){
				return 0;
			}
			// Add end of string character
			charBuffer[charBuffer_i] = '\0';
    2e94:	aa 24       	eor	r10, r10
    2e96:	a3 94       	inc	r10
    2e98:	b1 2c       	mov	r11, r1
    2e9a:	ac 0e       	add	r10, r28
    2e9c:	bd 1e       	adc	r11, r29
    2e9e:	a3 0c       	add	r10, r3
    2ea0:	b1 1c       	adc	r11, r1
    2ea2:	f5 01       	movw	r30, r10
    2ea4:	10 82       	st	Z, r1
			
			// Attempt to convert to integer, return with error if failed
			// If the end pointer set by strtoul points to the end of the string, the
			// entire string is valid.
			// We also consider the value invalid if it cannot be cast to uint8_t
			tempVal = strtoul(charBuffer, &charBufferPtr, 0);
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	be 01       	movw	r22, r28
    2eac:	6d 5c       	subi	r22, 0xCD	; 205
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	ce 01       	movw	r24, r28
    2eb2:	01 96       	adiw	r24, 0x01	; 1
    2eb4:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <strtoul>
    2eb8:	cb 01       	movw	r24, r22
			if (charBufferPtr != (charBuffer + charBuffer_i) || tempVal > 255) {
    2eba:	2b a9       	ldd	r18, Y+51	; 0x33
    2ebc:	3c a9       	ldd	r19, Y+52	; 0x34
    2ebe:	2a 15       	cp	r18, r10
    2ec0:	3b 05       	cpc	r19, r11
    2ec2:	89 f6       	brne	.-94     	; 0x2e66 <_Z13parseTextFileN5SDLib4FileEPhm+0x9e>
    2ec4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec6:	91 05       	cpc	r25, r1
    2ec8:	09 f0       	breq	.+2      	; 0x2ecc <_Z13parseTextFileN5SDLib4FileEPhm+0x104>
    2eca:	68 f6       	brcc	.-102    	; 0x2e66 <_Z13parseTextFileN5SDLib4FileEPhm+0x9e>
				return 0;
			}
			// Store in output array
			output[output_i] = tempVal;
    2ecc:	f4 01       	movw	r30, r8
    2ece:	61 93       	st	Z+, r22
    2ed0:	4f 01       	movw	r8, r30
			output_i++;
    2ed2:	ff ef       	ldi	r31, 0xFF	; 255
    2ed4:	cf 1a       	sub	r12, r31
    2ed6:	df 0a       	sbc	r13, r31
    2ed8:	ef 0a       	sbc	r14, r31
    2eda:	ff 0a       	sbc	r15, r31
    2edc:	95 cf       	rjmp	.-214    	; 0x2e08 <_Z13parseTextFileN5SDLib4FileEPhm+0x40>
		return 1;
	}
	else {
		return 0;
	}
}
    2ede:	e4 96       	adiw	r28, 0x34	; 52
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	df 91       	pop	r29
    2eec:	cf 91       	pop	r28
    2eee:	1f 91       	pop	r17
    2ef0:	0f 91       	pop	r16
    2ef2:	ff 90       	pop	r15
    2ef4:	ef 90       	pop	r14
    2ef6:	df 90       	pop	r13
    2ef8:	cf 90       	pop	r12
    2efa:	bf 90       	pop	r11
    2efc:	af 90       	pop	r10
    2efe:	9f 90       	pop	r9
    2f00:	8f 90       	pop	r8
    2f02:	7f 90       	pop	r7
    2f04:	6f 90       	pop	r6
    2f06:	5f 90       	pop	r5
    2f08:	4f 90       	pop	r4
    2f0a:	3f 90       	pop	r3
    2f0c:	08 95       	ret

00002f0e <_ZN5SDLib4FileaSERKS0_>:
    2f0e:	cf 93       	push	r28
    2f10:	df 93       	push	r29
    2f12:	fb 01       	movw	r30, r22
    2f14:	22 81       	ldd	r18, Z+2	; 0x02
    2f16:	33 81       	ldd	r19, Z+3	; 0x03
    2f18:	dc 01       	movw	r26, r24
    2f1a:	13 96       	adiw	r26, 0x03	; 3
    2f1c:	3c 93       	st	X, r19
    2f1e:	2e 93       	st	-X, r18
    2f20:	12 97       	sbiw	r26, 0x02	; 2
    2f22:	44 81       	ldd	r20, Z+4	; 0x04
    2f24:	55 81       	ldd	r21, Z+5	; 0x05
    2f26:	66 81       	ldd	r22, Z+6	; 0x06
    2f28:	77 81       	ldd	r23, Z+7	; 0x07
    2f2a:	14 96       	adiw	r26, 0x04	; 4
    2f2c:	4d 93       	st	X+, r20
    2f2e:	5d 93       	st	X+, r21
    2f30:	6d 93       	st	X+, r22
    2f32:	7c 93       	st	X, r23
    2f34:	17 97       	sbiw	r26, 0x07	; 7
    2f36:	40 85       	ldd	r20, Z+8	; 0x08
    2f38:	51 85       	ldd	r21, Z+9	; 0x09
    2f3a:	62 85       	ldd	r22, Z+10	; 0x0a
    2f3c:	73 85       	ldd	r23, Z+11	; 0x0b
    2f3e:	18 96       	adiw	r26, 0x08	; 8
    2f40:	4d 93       	st	X+, r20
    2f42:	5d 93       	st	X+, r21
    2f44:	6d 93       	st	X+, r22
    2f46:	7c 93       	st	X, r23
    2f48:	1b 97       	sbiw	r26, 0x0b	; 11
    2f4a:	1c 96       	adiw	r26, 0x0c	; 12
    2f4c:	ef 01       	movw	r28, r30
    2f4e:	2c 96       	adiw	r28, 0x0c	; 12
    2f50:	9c 01       	movw	r18, r24
    2f52:	27 5e       	subi	r18, 0xE7	; 231
    2f54:	3f 4f       	sbci	r19, 0xFF	; 255
    2f56:	49 91       	ld	r20, Y+
    2f58:	4d 93       	st	X+, r20
    2f5a:	a2 17       	cp	r26, r18
    2f5c:	b3 07       	cpc	r27, r19
    2f5e:	d9 f7       	brne	.-10     	; 0x2f56 <_ZN5SDLib4FileaSERKS0_+0x48>
    2f60:	21 8d       	ldd	r18, Z+25	; 0x19
    2f62:	32 8d       	ldd	r19, Z+26	; 0x1a
    2f64:	fc 01       	movw	r30, r24
    2f66:	32 8f       	std	Z+26, r19	; 0x1a
    2f68:	21 8f       	std	Z+25, r18	; 0x19
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <main>:

int main(void) {
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	c0 57       	subi	r28, 0x70	; 112
    2f7a:	d1 09       	sbc	r29, r1
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
	// Dot correction file
	File dcFile;
    2f86:	ce 01       	movw	r24, r28
    2f88:	8e 5a       	subi	r24, 0xAE	; 174
    2f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8c:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5SDLib4FileC1Ev>
	// Calibration file
	File gcalFile;
    2f90:	ce 01       	movw	r24, r28
    2f92:	c7 96       	adiw	r24, 0x37	; 55
    2f94:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5SDLib4FileC1Ev>
	// Light program file
	File lpfFile;
    2f98:	ce 01       	movw	r24, r28
    2f9a:	4c 96       	adiw	r24, 0x1c	; 28
    2f9c:	0e 94 be 04 	call	0x97c	; 0x97c <_ZN5SDLib4FileC1Ev>
	// Information holder for the lpf
	lpfInfo_t lpfInfo;
	// Temporary value for reading from the lpf
	uint32_t temp = 0;
    2fa0:	e1 96       	adiw	r28, 0x31	; 49
    2fa2:	1c ae       	std	Y+60, r1	; 0x3c
    2fa4:	1d ae       	std	Y+61, r1	; 0x3d
    2fa6:	1e ae       	std	Y+62, r1	; 0x3e
    2fa8:	1f ae       	std	Y+63, r1	; 0x3f
    2faa:	e1 97       	sbiw	r28, 0x31	; 49
	// Flag that indicates whether the first frame has been loaded
	uint8_t first_frame = 0;

	// Enable interruptions
	sei();
    2fac:	78 94       	sei
	
	// Initialize TLC module
	Tlc5941_Init();
    2fae:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <Tlc5941_Init>
	// Set all dot correction values to zero
	Tlc5941_SetAllDC(0);
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	0e 94 56 1b 	call	0x36ac	; 0x36ac <Tlc5941_SetAllDC>
extern volatile uint8_t Tlc5941_gsUpdateFlag;

// Safely sets update flags
static inline void Tlc5941_SetDCUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_dcUpdateFlag = 1;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <Tlc5941_dcUpdateFlag>
	// Push DC values
	Tlc5941_SetDCUpdateFlag();
	while(Tlc5941_dcUpdateFlag);
    2fbe:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <Tlc5941_dcUpdateFlag>
    2fc2:	81 11       	cpse	r24, r1
    2fc4:	fc cf       	rjmp	.-8      	; 0x2fbe <main+0x4e>
	// Set all grayscale values to zero
	Tlc5941_SetAllGS(0);
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 19 1b 	call	0x3632	; 0x3632 <Tlc5941_SetAllGS>
}
static inline void Tlc5941_SetGSUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_gsUpdateFlag = 1;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <Tlc5941_gsUpdateFlag>
	// Push grayscale values
	Tlc5941_SetGSUpdateFlag();
	while(Tlc5941_gsUpdateFlag);
    2fd4:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <Tlc5941_gsUpdateFlag>
    2fd8:	81 11       	cpse	r24, r1
    2fda:	fc cf       	rjmp	.-8      	; 0x2fd4 <main+0x64>

	// Signal that the first set of grayscale values should be used during the first iteration
	Flag_Set(dataAvailableFlag);
    2fdc:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <dataAvailableFlag>
    2fe0:	8f 5f       	subi	r24, 0xFF	; 255
    2fe2:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <dataAvailableFlag>
	
	// Initialize Status LEDs
	StatusLeds_Init();
    2fe6:	0e 94 ce 1a 	call	0x359c	; 0x359c <StatusLeds_Init>
	// Turn on all LEDs
	StatusLeds_Set(StatusLeds_LedOn, StatusLeds_On);
    2fea:	61 e0       	ldi	r22, 0x01	; 1
    2fec:	83 e0       	ldi	r24, 0x03	; 3
    2fee:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
	StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
    2ff2:	61 e0       	ldi	r22, 0x01	; 1
    2ff4:	84 e0       	ldi	r24, 0x04	; 4
    2ff6:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
	StatusLeds_Set(StatusLeds_LedFin, StatusLeds_On);
    2ffa:	61 e0       	ldi	r22, 0x01	; 1
    2ffc:	85 e0       	ldi	r24, 0x05	; 5
    2ffe:	0e 94 d2 1a 	call	0x35a4	; 0x35a4 <StatusLeds_Set>
	
	// Initialize ms timer
	MsTimer_Init();
    3002:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <MsTimer_Init>

	// Initialize timer 0 before using the SD card library
	timer0_init();
    3006:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <_Z11timer0_initv>
	// Initialize system state
	System_SetState(System_stateInitializing);
    300a:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <System_state>
	
	// Test if SD card is present and initialize
	if (!SD.begin())
    300e:	6a e0       	ldi	r22, 0x0A	; 10
    3010:	86 e0       	ldi	r24, 0x06	; 6
    3012:	92 e0       	ldi	r25, 0x02	; 2
    3014:	0e 94 66 05 	call	0xacc	; 0xacc <_ZN5SDLib7SDClass5beginEh>
    3018:	81 11       	cpse	r24, r1
    301a:	03 c0       	rjmp	.+6      	; 0x3022 <main+0xb2>
	{
		System_SetState(System_stateErrorNoSdCard);
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
	}

	// Process dot correction file
	if (System_IsState(System_stateInitializing)) {
    3022:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    3026:	81 11       	cpse	r24, r1
    3028:	37 c0       	rjmp	.+110    	; 0x3098 <main+0x128>
		dcFile = SD.open("dc.txt", FILE_READ);
    302a:	21 e0       	ldi	r18, 0x01	; 1
    302c:	4c e3       	ldi	r20, 0x3C	; 60
    302e:	51 e0       	ldi	r21, 0x01	; 1
    3030:	66 e0       	ldi	r22, 0x06	; 6
    3032:	72 e0       	ldi	r23, 0x02	; 2
    3034:	ce 01       	movw	r24, r28
    3036:	01 96       	adiw	r24, 0x01	; 1
    3038:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5SDLib7SDClass4openEPKch>
    303c:	be 01       	movw	r22, r28
    303e:	6f 5f       	subi	r22, 0xFF	; 255
    3040:	7f 4f       	sbci	r23, 0xFF	; 255
    3042:	ce 01       	movw	r24, r28
    3044:	8e 5a       	subi	r24, 0xAE	; 174
    3046:	9f 4f       	sbci	r25, 0xFF	; 255
    3048:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN5SDLib4FileaSERKS0_>
		if (dcFile) {
    304c:	ce 01       	movw	r24, r28
    304e:	8e 5a       	subi	r24, 0xAE	; 174
    3050:	9f 4f       	sbci	r25, 0xFF	; 255
    3052:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5SDLib4FilecvbEv>
    3056:	88 23       	and	r24, r24
    3058:	e1 f0       	breq	.+56     	; 0x3092 <main+0x122>
			// Try to parse file contents, change to error state if unsuccessful
			if (!parseTextFile(dcFile, dotCorrectionValues, Tlc5941_numChannels)) {
    305a:	be 01       	movw	r22, r28
    305c:	6e 5a       	subi	r22, 0xAE	; 174
    305e:	7f 4f       	sbci	r23, 0xFF	; 255
    3060:	ce 01       	movw	r24, r28
    3062:	01 96       	adiw	r24, 0x01	; 1
    3064:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <_ZN5SDLib4FileC1ERKS0_>
    3068:	20 e6       	ldi	r18, 0x60	; 96
    306a:	30 e0       	ldi	r19, 0x00	; 0
    306c:	40 e0       	ldi	r20, 0x00	; 0
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	6d eb       	ldi	r22, 0xBD	; 189
    3072:	74 e0       	ldi	r23, 0x04	; 4
    3074:	ce 01       	movw	r24, r28
    3076:	01 96       	adiw	r24, 0x01	; 1
    3078:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z13parseTextFileN5SDLib4FileEPhm>
    307c:	81 11       	cpse	r24, r1
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <main+0x116>
				System_SetState(System_stateErrorWrongSdFiles);
    3080:	85 e0       	ldi	r24, 0x05	; 5
    3082:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
			}
			dcFile.close();
    3086:	ce 01       	movw	r24, r28
    3088:	8e 5a       	subi	r24, 0xAE	; 174
    308a:	9f 4f       	sbci	r25, 0xFF	; 255
    308c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5SDLib4File5closeEv>
    3090:	03 c0       	rjmp	.+6      	; 0x3098 <main+0x128>
		}
		else {
			System_SetState(System_stateErrorNoSdFiles);
    3092:	84 e0       	ldi	r24, 0x04	; 4
    3094:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
		}
	}
	// Set dot correction values
	if (System_IsState(System_stateInitializing)) {
    3098:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    309c:	88 23       	and	r24, r24
    309e:	29 f0       	breq	.+10     	; 0x30aa <main+0x13a>
		Tlc5941_SetDCUpdateFlag();
		while(Tlc5941_dcUpdateFlag);
	}

	// Process calibration file
	if (System_IsState(System_stateInitializing)) {
    30a0:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    30a4:	81 11       	cpse	r24, r1
    30a6:	51 c0       	rjmp	.+162    	; 0x314a <main+0x1da>
    30a8:	1c c0       	rjmp	.+56     	; 0x30e2 <main+0x172>
    30aa:	f8 e8       	ldi	r31, 0x88	; 136
    30ac:	ef 2e       	mov	r14, r31
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
    30b0:	ff 2e       	mov	r15, r31
    30b2:	0d eb       	ldi	r16, 0xBD	; 189
    30b4:	14 e0       	ldi	r17, 0x04	; 4
	// Set dot correction values
	if (System_IsState(System_stateInitializing)) {
		// Set from dotCorrectionValues array
		for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
		{
			Tlc5941_channel_t well = pgm_read_byte(&(well2channel[i]));
    30b6:	f7 01       	movw	r30, r14
    30b8:	84 91       	lpm	r24, Z
			Tlc5941_SetDC(well, dotCorrectionValues[i]);
    30ba:	f8 01       	movw	r30, r16
    30bc:	61 91       	ld	r22, Z+
    30be:	8f 01       	movw	r16, r30
    30c0:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <Tlc5941_SetDC>
    30c4:	ff ef       	ldi	r31, 0xFF	; 255
    30c6:	ef 1a       	sub	r14, r31
    30c8:	ff 0a       	sbc	r15, r31
		}
	}
	// Set dot correction values
	if (System_IsState(System_stateInitializing)) {
		// Set from dotCorrectionValues array
		for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
    30ca:	85 e0       	ldi	r24, 0x05	; 5
    30cc:	0d 31       	cpi	r16, 0x1D	; 29
    30ce:	18 07       	cpc	r17, r24
    30d0:	91 f7       	brne	.-28     	; 0x30b6 <main+0x146>
extern volatile uint8_t Tlc5941_gsUpdateFlag;

// Safely sets update flags
static inline void Tlc5941_SetDCUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_dcUpdateFlag = 1;
    30d2:	81 e0       	ldi	r24, 0x01	; 1
    30d4:	80 93 7f 05 	sts	0x057F, r24	; 0x80057f <Tlc5941_dcUpdateFlag>
			Tlc5941_channel_t well = pgm_read_byte(&(well2channel[i]));
			Tlc5941_SetDC(well, dotCorrectionValues[i]);
		}
		// Push DC values
		Tlc5941_SetDCUpdateFlag();
		while(Tlc5941_dcUpdateFlag);
    30d8:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <Tlc5941_dcUpdateFlag>
    30dc:	81 11       	cpse	r24, r1
    30de:	fc cf       	rjmp	.-8      	; 0x30d8 <main+0x168>
    30e0:	df cf       	rjmp	.-66     	; 0x30a0 <main+0x130>
	}

	// Process calibration file
	if (System_IsState(System_stateInitializing)) {
		gcalFile = SD.open("gcal.txt", FILE_READ);
    30e2:	21 e0       	ldi	r18, 0x01	; 1
    30e4:	43 e4       	ldi	r20, 0x43	; 67
    30e6:	51 e0       	ldi	r21, 0x01	; 1
    30e8:	66 e0       	ldi	r22, 0x06	; 6
    30ea:	72 e0       	ldi	r23, 0x02	; 2
    30ec:	ce 01       	movw	r24, r28
    30ee:	01 96       	adiw	r24, 0x01	; 1
    30f0:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5SDLib7SDClass4openEPKch>
    30f4:	be 01       	movw	r22, r28
    30f6:	6f 5f       	subi	r22, 0xFF	; 255
    30f8:	7f 4f       	sbci	r23, 0xFF	; 255
    30fa:	ce 01       	movw	r24, r28
    30fc:	c7 96       	adiw	r24, 0x37	; 55
    30fe:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN5SDLib4FileaSERKS0_>
		if (gcalFile) {
    3102:	ce 01       	movw	r24, r28
    3104:	c7 96       	adiw	r24, 0x37	; 55
    3106:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5SDLib4FilecvbEv>
    310a:	88 23       	and	r24, r24
    310c:	d9 f0       	breq	.+54     	; 0x3144 <main+0x1d4>
			// Try to parse file contents, change to error state if unsuccessful
			if (!parseTextFile(gcalFile, grayscaleCalibration, Tlc5941_numChannels)) {
    310e:	be 01       	movw	r22, r28
    3110:	69 5c       	subi	r22, 0xC9	; 201
    3112:	7f 4f       	sbci	r23, 0xFF	; 255
    3114:	ce 01       	movw	r24, r28
    3116:	01 96       	adiw	r24, 0x01	; 1
    3118:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <_ZN5SDLib4FileC1ERKS0_>
    311c:	20 e6       	ldi	r18, 0x60	; 96
    311e:	30 e0       	ldi	r19, 0x00	; 0
    3120:	40 e0       	ldi	r20, 0x00	; 0
    3122:	50 e0       	ldi	r21, 0x00	; 0
    3124:	6d e5       	ldi	r22, 0x5D	; 93
    3126:	74 e0       	ldi	r23, 0x04	; 4
    3128:	ce 01       	movw	r24, r28
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_Z13parseTextFileN5SDLib4FileEPhm>
    3130:	81 11       	cpse	r24, r1
    3132:	03 c0       	rjmp	.+6      	; 0x313a <main+0x1ca>
				System_SetState(System_stateErrorWrongSdFiles);
    3134:	85 e0       	ldi	r24, 0x05	; 5
    3136:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
			}
			gcalFile.close();
    313a:	ce 01       	movw	r24, r28
    313c:	c7 96       	adiw	r24, 0x37	; 55
    313e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN5SDLib4File5closeEv>
    3142:	03 c0       	rjmp	.+6      	; 0x314a <main+0x1da>
		}
		else {
			System_SetState(System_stateErrorNoSdFiles);
    3144:	84 e0       	ldi	r24, 0x04	; 4
    3146:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
		}
	}

	// Load LPF
	if (System_IsState(System_stateInitializing))
    314a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    314e:	81 11       	cpse	r24, r1
    3150:	19 c0       	rjmp	.+50     	; 0x3184 <main+0x214>
	{
		lpfFile = SD.open("program.lpf", FILE_READ);
    3152:	21 e0       	ldi	r18, 0x01	; 1
    3154:	4c e4       	ldi	r20, 0x4C	; 76
    3156:	51 e0       	ldi	r21, 0x01	; 1
    3158:	66 e0       	ldi	r22, 0x06	; 6
    315a:	72 e0       	ldi	r23, 0x02	; 2
    315c:	ce 01       	movw	r24, r28
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN5SDLib7SDClass4openEPKch>
    3164:	be 01       	movw	r22, r28
    3166:	6f 5f       	subi	r22, 0xFF	; 255
    3168:	7f 4f       	sbci	r23, 0xFF	; 255
    316a:	ce 01       	movw	r24, r28
    316c:	4c 96       	adiw	r24, 0x1c	; 28
    316e:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <_ZN5SDLib4FileaSERKS0_>
		if (!lpfFile) {
    3172:	ce 01       	movw	r24, r28
    3174:	4c 96       	adiw	r24, 0x1c	; 28
    3176:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5SDLib4FilecvbEv>
    317a:	81 11       	cpse	r24, r1
    317c:	03 c0       	rjmp	.+6      	; 0x3184 <main+0x214>
			System_SetState(System_stateErrorNoSdFiles);
    317e:	84 e0       	ldi	r24, 0x04	; 4
    3180:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
		}
	}

	// Get headers from LPF
	if (System_IsState(System_stateInitializing))
    3184:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    3188:	81 11       	cpse	r24, r1
    318a:	35 c0       	rjmp	.+106    	; 0x31f6 <main+0x286>
	{
		if (lpfFile.size() < LPF_HEADER_LENGTH)
    318c:	ce 01       	movw	r24, r28
    318e:	4c 96       	adiw	r24, 0x1c	; 28
    3190:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN5SDLib4File4sizeEv>
    3194:	60 32       	cpi	r22, 0x20	; 32
    3196:	71 05       	cpc	r23, r1
    3198:	81 05       	cpc	r24, r1
    319a:	91 05       	cpc	r25, r1
    319c:	20 f4       	brcc	.+8      	; 0x31a6 <main+0x236>
		{
			System_SetState(System_stateErrorWrongSdFiles);
    319e:	85 e0       	ldi	r24, 0x05	; 5
    31a0:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
    31a4:	28 c0       	rjmp	.+80     	; 0x31f6 <main+0x286>
		}
		else
		{
			lpfFile.readBytes((char*)(&(lpfInfo.fileVersion)), 4);
    31a6:	44 e0       	ldi	r20, 0x04	; 4
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	be 01       	movw	r22, r28
    31ac:	6f 5f       	subi	r22, 0xFF	; 255
    31ae:	7f 4f       	sbci	r23, 0xFF	; 255
    31b0:	ce 01       	movw	r24, r28
    31b2:	4c 96       	adiw	r24, 0x1c	; 28
    31b4:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6Stream9readBytesEPcj>
			lpfFile.readBytes((char*)(&(lpfInfo.numberChannels)), 4);
    31b8:	44 e0       	ldi	r20, 0x04	; 4
    31ba:	50 e0       	ldi	r21, 0x00	; 0
    31bc:	be 01       	movw	r22, r28
    31be:	6b 5f       	subi	r22, 0xFB	; 251
    31c0:	7f 4f       	sbci	r23, 0xFF	; 255
    31c2:	ce 01       	movw	r24, r28
    31c4:	4c 96       	adiw	r24, 0x1c	; 28
    31c6:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6Stream9readBytesEPcj>
			lpfFile.readBytes((char*)(&(lpfInfo.stepSize)), 4);
    31ca:	44 e0       	ldi	r20, 0x04	; 4
    31cc:	50 e0       	ldi	r21, 0x00	; 0
    31ce:	be 01       	movw	r22, r28
    31d0:	67 5f       	subi	r22, 0xF7	; 247
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	ce 01       	movw	r24, r28
    31d6:	4c 96       	adiw	r24, 0x1c	; 28
    31d8:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6Stream9readBytesEPcj>
			lpfFile.readBytes((char*)(&(lpfInfo.numberSteps)), 4);
    31dc:	44 e0       	ldi	r20, 0x04	; 4
    31de:	50 e0       	ldi	r21, 0x00	; 0
    31e0:	be 01       	movw	r22, r28
    31e2:	63 5f       	subi	r22, 0xF3	; 243
    31e4:	7f 4f       	sbci	r23, 0xFF	; 255
    31e6:	ce 01       	movw	r24, r28
    31e8:	4c 96       	adiw	r24, 0x1c	; 28
    31ea:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6Stream9readBytesEPcj>
			lpfInfo.counterStep = 0;
    31ee:	19 8a       	std	Y+17, r1	; 0x11
    31f0:	1a 8a       	std	Y+18, r1	; 0x12
    31f2:	1b 8a       	std	Y+19, r1	; 0x13
    31f4:	1c 8a       	std	Y+20, r1	; 0x14
		}
	}
	// Verify headers from LPF
	if (System_IsState(System_stateInitializing))
    31f6:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    31fa:	81 11       	cpse	r24, r1
    31fc:	2d c0       	rjmp	.+90     	; 0x3258 <main+0x2e8>
	{
		// Check appropriate number of channels
		if (lpfInfo.numberChannels != Tlc5941_numChannels)
    31fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3200:	9e 81       	ldd	r25, Y+6	; 0x06
    3202:	af 81       	ldd	r26, Y+7	; 0x07
    3204:	b8 85       	ldd	r27, Y+8	; 0x08
    3206:	80 36       	cpi	r24, 0x60	; 96
    3208:	91 05       	cpc	r25, r1
    320a:	a1 05       	cpc	r26, r1
    320c:	b1 05       	cpc	r27, r1
    320e:	19 f0       	breq	.+6      	; 0x3216 <main+0x2a6>
			System_SetState(System_stateErrorWrongSdFiles);
    3210:	85 e0       	ldi	r24, 0x05	; 5
    3212:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
	
		// Check appropriate file size
		if (lpfFile.size() != (LPF_HEADER_LENGTH + lpfInfo.numberSteps*lpfInfo.numberChannels*2))
    3216:	ce 01       	movw	r24, r28
    3218:	4c 96       	adiw	r24, 0x1c	; 28
    321a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN5SDLib4File4sizeEv>
    321e:	6b 01       	movw	r12, r22
    3220:	7c 01       	movw	r14, r24
    3222:	2d 85       	ldd	r18, Y+13	; 0x0d
    3224:	3e 85       	ldd	r19, Y+14	; 0x0e
    3226:	4f 85       	ldd	r20, Y+15	; 0x0f
    3228:	58 89       	ldd	r21, Y+16	; 0x10
    322a:	6d 81       	ldd	r22, Y+5	; 0x05
    322c:	7e 81       	ldd	r23, Y+6	; 0x06
    322e:	8f 81       	ldd	r24, Y+7	; 0x07
    3230:	98 85       	ldd	r25, Y+8	; 0x08
    3232:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsi3>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	40 96       	adiw	r24, 0x10	; 16
    323c:	a1 1d       	adc	r26, r1
    323e:	b1 1d       	adc	r27, r1
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	aa 1f       	adc	r26, r26
    3246:	bb 1f       	adc	r27, r27
    3248:	c8 16       	cp	r12, r24
    324a:	d9 06       	cpc	r13, r25
    324c:	ea 06       	cpc	r14, r26
    324e:	fb 06       	cpc	r15, r27
    3250:	19 f0       	breq	.+6      	; 0x3258 <main+0x2e8>
			System_SetState(System_stateErrorWrongSdFiles);
    3252:	85 e0       	ldi	r24, 0x05	; 5
    3254:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
	}
	// Scale step size
	#ifdef stepSizeScaling
		lpfInfo.stepSize = (uint32_t)((double)(lpfInfo.stepSize)*stepSizeScaling);
    3258:	69 85       	ldd	r22, Y+9	; 0x09
    325a:	7a 85       	ldd	r23, Y+10	; 0x0a
    325c:	8b 85       	ldd	r24, Y+11	; 0x0b
    325e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3260:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <__floatunsisf>
    3264:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__fixunssfsi>
    3268:	69 87       	std	Y+9, r22	; 0x09
    326a:	7a 87       	std	Y+10, r23	; 0x0a
    326c:	8b 87       	std	Y+11, r24	; 0x0b
    326e:	9c 87       	std	Y+12, r25	; 0x0c
	#endif

	// Switch to running state
	if (System_IsState(System_stateInitializing))
    3270:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    3274:	81 11       	cpse	r24, r1
    3276:	03 c0       	rjmp	.+6      	; 0x327e <main+0x30e>
	{
		System_SetState(System_stateRunning);
    3278:	81 e0       	ldi	r24, 0x01	; 1
    327a:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <System_state>
	}
	
	// Assign callbacks to timer
	MsTimer_Stop();
    327e:	0e 94 2e 1a 	call	0x345c	; 0x345c <MsTimer_Stop>
	if (System_IsState(System_stateRunning))
    3282:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	99 f4       	brne	.+38     	; 0x32b0 <main+0x340>
	{
		MsTimer_AddCallback(&UpdateLeds, lpfInfo.stepSize);
    328a:	49 85       	ldd	r20, Y+9	; 0x09
    328c:	5a 85       	ldd	r21, Y+10	; 0x0a
    328e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3290:	7c 85       	ldd	r23, Y+12	; 0x0c
    3292:	84 e5       	ldi	r24, 0x54	; 84
    3294:	96 e1       	ldi	r25, 0x16	; 22
    3296:	0e 94 36 1a 	call	0x346c	; 0x346c <MsTimer_AddCallback>
		MsTimer_AddCallback(&UpdateStatusLeds, 500);
    329a:	44 ef       	ldi	r20, 0xF4	; 244
    329c:	51 e0       	ldi	r21, 0x01	; 1
    329e:	60 e0       	ldi	r22, 0x00	; 0
    32a0:	70 e0       	ldi	r23, 0x00	; 0
    32a2:	85 e6       	ldi	r24, 0x65	; 101
    32a4:	96 e1       	ldi	r25, 0x16	; 22
    32a6:	0e 94 36 1a 	call	0x346c	; 0x346c <MsTimer_AddCallback>
		Flag_Reset(dataAvailableFlag);
    32aa:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <dataAvailableFlag>
    32ae:	0a c0       	rjmp	.+20     	; 0x32c4 <main+0x354>
	}
	else
	{
		MsTimer_AddCallback(&UpdateStatusLeds, 500);
    32b0:	44 ef       	ldi	r20, 0xF4	; 244
    32b2:	51 e0       	ldi	r21, 0x01	; 1
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	85 e6       	ldi	r24, 0x65	; 101
    32ba:	96 e1       	ldi	r25, 0x16	; 22
    32bc:	0e 94 36 1a 	call	0x346c	; 0x346c <MsTimer_AddCallback>
		// Start timer
		MsTimer_Start();
    32c0:	0e 94 03 1a 	call	0x3406	; 0x3406 <MsTimer_Start>
	}
	first_frame = 1;
	
	// Do led intensity decoding as necessary
	lpfFile.seek(LPF_HEADER_LENGTH);
    32c4:	40 e2       	ldi	r20, 0x20	; 32
    32c6:	50 e0       	ldi	r21, 0x00	; 0
    32c8:	60 e0       	ldi	r22, 0x00	; 0
    32ca:	70 e0       	ldi	r23, 0x00	; 0
    32cc:	ce 01       	movw	r24, r28
    32ce:	4c 96       	adiw	r24, 0x1c	; 28
    32d0:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_ZN5SDLib4File4seekEm>
	{
		MsTimer_AddCallback(&UpdateStatusLeds, 500);
		// Start timer
		MsTimer_Start();
	}
	first_frame = 1;
    32d4:	bb 24       	eor	r11, r11
    32d6:	b3 94       	inc	r11
}
static inline void Tlc5941_SetGSUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_gsUpdateFlag = 1;
    32d8:	aa 24       	eor	r10, r10
    32da:	a3 94       	inc	r10
    32dc:	4d eb       	ldi	r20, 0xBD	; 189
    32de:	c4 2e       	mov	r12, r20
    32e0:	44 e0       	ldi	r20, 0x04	; 4
    32e2:	d4 2e       	mov	r13, r20
			// Check if last data access was met
			// This should be run as an atomic block
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
				if (Flag_HasFailedRelease(dataAvailableFlag))
				{
					System_SetState(System_stateErrorTimeout);
    32e4:	56 e0       	ldi	r21, 0x06	; 6
    32e6:	95 2e       	mov	r9, r21
			for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
			{
				// We get two bytes at a time, which contains one grayscale value
				if (lpfFile.readBytes((char*)(&(temp)), 2) != 2)
				{
					System_SetState(System_stateErrorLpfUnavailable);
    32e8:	67 e0       	ldi	r22, 0x07	; 7
    32ea:	86 2e       	mov	r8, r22
			while(Tlc5941_gsUpdateFlag);

			// Check if finished
			if (lpfInfo.counterStep == lpfInfo.numberSteps)
			{
				System_SetState(System_stateFinished);
    32ec:	72 e0       	ldi	r23, 0x02	; 2
    32ee:	77 2e       	mov	r7, r23
	first_frame = 1;
	
	// Do led intensity decoding as necessary
	lpfFile.seek(LPF_HEADER_LENGTH);
	while(1) {
		if (System_IsState(System_stateRunning))
    32f0:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    32f4:	81 30       	cpi	r24, 0x01	; 1
    32f6:	09 f0       	breq	.+2      	; 0x32fa <main+0x38a>
    32f8:	4e c0       	rjmp	.+156    	; 0x3396 <main+0x426>
		{
			// Wait until data has been consumed
			while(Flag_IsSet(dataAvailableFlag));
    32fa:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <dataAvailableFlag>
    32fe:	18 16       	cp	r1, r24
    3300:	e4 f3       	brlt	.-8      	; 0x32fa <main+0x38a>

			// Wait until TLC library is done transmitting
			while(Tlc5941_gsUpdateFlag);
    3302:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <Tlc5941_gsUpdateFlag>
    3306:	81 11       	cpse	r24, r1
    3308:	fc cf       	rjmp	.-8      	; 0x3302 <main+0x392>

			// Check if finished
			if (lpfInfo.counterStep == lpfInfo.numberSteps)
    330a:	49 89       	ldd	r20, Y+17	; 0x11
    330c:	5a 89       	ldd	r21, Y+18	; 0x12
    330e:	6b 89       	ldd	r22, Y+19	; 0x13
    3310:	7c 89       	ldd	r23, Y+20	; 0x14
    3312:	8d 85       	ldd	r24, Y+13	; 0x0d
    3314:	9e 85       	ldd	r25, Y+14	; 0x0e
    3316:	af 85       	ldd	r26, Y+15	; 0x0f
    3318:	b8 89       	ldd	r27, Y+16	; 0x10
    331a:	48 17       	cp	r20, r24
    331c:	59 07       	cpc	r21, r25
    331e:	6a 07       	cpc	r22, r26
    3320:	7b 07       	cpc	r23, r27
    3322:	19 f4       	brne	.+6      	; 0x332a <main+0x3ba>
			{
				System_SetState(System_stateFinished);
    3324:	70 92 5c 04 	sts	0x045C, r7	; 0x80045c <System_state>
				continue;
    3328:	e3 cf       	rjmp	.-58     	; 0x32f0 <main+0x380>
    332a:	38 e8       	ldi	r19, 0x88	; 136
    332c:	e3 2e       	mov	r14, r19
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	f3 2e       	mov	r15, r19
    3332:	0d e5       	ldi	r16, 0x5D	; 93
    3334:	14 e0       	ldi	r17, 0x04	; 4
			}
			// Read data from LPF
			for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
			{
				// We get two bytes at a time, which contains one grayscale value
				if (lpfFile.readBytes((char*)(&(temp)), 2) != 2)
    3336:	42 e0       	ldi	r20, 0x02	; 2
    3338:	50 e0       	ldi	r21, 0x00	; 0
    333a:	be 01       	movw	r22, r28
    333c:	63 59       	subi	r22, 0x93	; 147
    333e:	7f 4f       	sbci	r23, 0xFF	; 255
    3340:	ce 01       	movw	r24, r28
    3342:	4c 96       	adiw	r24, 0x1c	; 28
    3344:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN6Stream9readBytesEPcj>
    3348:	02 97       	sbiw	r24, 0x02	; 2
    334a:	19 f0       	breq	.+6      	; 0x3352 <main+0x3e2>
				{
					System_SetState(System_stateErrorLpfUnavailable);
    334c:	80 92 5c 04 	sts	0x045C, r8	; 0x80045c <System_state>
					break;
    3350:	1c c0       	rjmp	.+56     	; 0x338a <main+0x41a>
				}
				// Get well position and calibration
				Tlc5941_channel_t well = pgm_read_byte(&(well2channel[i]));
    3352:	f7 01       	movw	r30, r14
    3354:	64 90       	lpm	r6, Z
				uint16_t calibration = grayscaleCalibration[i];
    3356:	f8 01       	movw	r30, r16
    3358:	a1 91       	ld	r26, Z+
    335a:	8f 01       	movw	r16, r30
				// Update LEDs
				// uint32_t intensity = i*10;
				// Tlc5941_SetGS(well, intensity*(calibration + 1)>>8);
				Tlc5941_SetGS(well, temp*(calibration + 1)>>8);
    335c:	b0 e0       	ldi	r27, 0x00	; 0
    335e:	11 96       	adiw	r26, 0x01	; 1
    3360:	e1 96       	adiw	r28, 0x31	; 49
    3362:	2c ad       	ldd	r18, Y+60	; 0x3c
    3364:	3d ad       	ldd	r19, Y+61	; 0x3d
    3366:	4e ad       	ldd	r20, Y+62	; 0x3e
    3368:	5f ad       	ldd	r21, Y+63	; 0x3f
    336a:	e1 97       	sbiw	r28, 0x31	; 49
    336c:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__muluhisi3>
    3370:	67 2f       	mov	r22, r23
    3372:	78 2f       	mov	r23, r24
    3374:	89 2f       	mov	r24, r25
    3376:	99 27       	eor	r25, r25
    3378:	86 2d       	mov	r24, r6
    337a:	0e 94 31 1b 	call	0x3662	; 0x3662 <Tlc5941_SetGS>
    337e:	ff ef       	ldi	r31, 0xFF	; 255
    3380:	ef 1a       	sub	r14, r31
    3382:	ff 0a       	sbc	r15, r31
			{
				System_SetState(System_stateFinished);
				continue;
			}
			// Read data from LPF
			for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
    3384:	c0 16       	cp	r12, r16
    3386:	d1 06       	cpc	r13, r17
    3388:	b1 f6       	brne	.-84     	; 0x3336 <main+0x3c6>
				// Update LEDs
				// uint32_t intensity = i*10;
				// Tlc5941_SetGS(well, intensity*(calibration + 1)>>8);
				Tlc5941_SetGS(well, temp*(calibration + 1)>>8);
			}
			if (!System_IsState(System_stateRunning))
    338a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <System_state>
    338e:	88 23       	and	r24, r24
    3390:	09 f4       	brne	.+2      	; 0x3394 <main+0x424>
    3392:	ae cf       	rjmp	.-164    	; 0x32f0 <main+0x380>
    3394:	0f c0       	rjmp	.+30     	; 0x33b4 <main+0x444>
			}
			
		}
		else {
			// Set all grayscale to zero if first frame
			if (first_frame) {
    3396:	b1 10       	cpse	r11, r1
    3398:	02 c0       	rjmp	.+4      	; 0x339e <main+0x42e>
			}
			// Start timer if first frame
			if (first_frame)
			{
				MsTimer_Start();
				first_frame = 0;
    339a:	b1 2c       	mov	r11, r1
    339c:	a9 cf       	rjmp	.-174    	; 0x32f0 <main+0x380>
			
		}
		else {
			// Set all grayscale to zero if first frame
			if (first_frame) {
				Tlc5941_SetAllGS(0);
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 19 1b 	call	0x3632	; 0x3632 <Tlc5941_SetAllGS>
    33a6:	a0 92 80 05 	sts	0x0580, r10	; 0x800580 <Tlc5941_gsUpdateFlag>
				Tlc5941_SetGSUpdateFlag();
				while(Tlc5941_gsUpdateFlag);
    33aa:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <Tlc5941_gsUpdateFlag>
    33ae:	81 11       	cpse	r24, r1
    33b0:	fc cf       	rjmp	.-8      	; 0x33aa <main+0x43a>
    33b2:	f3 cf       	rjmp	.-26     	; 0x339a <main+0x42a>
			{
				continue;
			}
				
			// Increment time counter
			lpfInfo.counterStep++;
    33b4:	89 89       	ldd	r24, Y+17	; 0x11
    33b6:	9a 89       	ldd	r25, Y+18	; 0x12
    33b8:	ab 89       	ldd	r26, Y+19	; 0x13
    33ba:	bc 89       	ldd	r27, Y+20	; 0x14
    33bc:	01 96       	adiw	r24, 0x01	; 1
    33be:	a1 1d       	adc	r26, r1
    33c0:	b1 1d       	adc	r27, r1
    33c2:	89 8b       	std	Y+17, r24	; 0x11
    33c4:	9a 8b       	std	Y+18, r25	; 0x12
    33c6:	ab 8b       	std	Y+19, r26	; 0x13
    33c8:	bc 8b       	std	Y+20, r27	; 0x14

			// Check if last data access was met
			// This should be run as an atomic block
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    33ca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33cc:	f8 94       	cli
				if (Flag_HasFailedRelease(dataAvailableFlag))
    33ce:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <dataAvailableFlag>
    33d2:	87 ff       	sbrs	r24, 7
    33d4:	08 c0       	rjmp	.+16     	; 0x33e6 <main+0x476>
				{
					System_SetState(System_stateErrorTimeout);
    33d6:	90 92 5c 04 	sts	0x045C, r9	; 0x80045c <System_state>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    33da:	9f bf       	out	0x3f, r25	; 63
				{
					Flag_Set(dataAvailableFlag);
				}
			}
			// Start timer if first frame
			if (first_frame)
    33dc:	bb 20       	and	r11, r11
    33de:	e9 f2       	breq	.-70     	; 0x339a <main+0x42a>
			{
				MsTimer_Start();
    33e0:	0e 94 03 1a 	call	0x3406	; 0x3406 <MsTimer_Start>
    33e4:	da cf       	rjmp	.-76     	; 0x339a <main+0x42a>
				{
					System_SetState(System_stateErrorTimeout);
				}
				else
				{
					Flag_Set(dataAvailableFlag);
    33e6:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <dataAvailableFlag>
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <dataAvailableFlag>
    33f0:	f4 cf       	rjmp	.-24     	; 0x33da <main+0x46a>

000033f2 <MsTimer_Init>:
void (*MsTimer_Callback[MsTimer_CallbackMax])(void);

void MsTimer_Init(void) {
	// Initialize Timer 1 to generate an interruption every millisecond
	// Mode: CTC, WGM1 = 0b0100
	TCCR1B = (1 << WGM12);
    33f2:	88 e0       	ldi	r24, 0x08	; 8
    33f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// Compare value: 0x3E7F
	OCR1A = 0x3E7F;
    33f8:	8f e7       	ldi	r24, 0x7F	; 127
    33fa:	9e e3       	ldi	r25, 0x3E	; 62
    33fc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    3400:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    3404:	08 95       	ret

00003406 <MsTimer_Start>:
}

void MsTimer_Start()
{
	// Reset run time counter
	MsTimer_Counter = 0;
    3406:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <MsTimer_Counter>
    340a:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <MsTimer_Counter+0x1>
    340e:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <MsTimer_Counter+0x2>
    3412:	10 92 22 05 	sts	0x0522, r1	; 0x800522 <MsTimer_Counter+0x3>
	// Reset callback counters
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    3416:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <MsTimer_CallbackN>
    341a:	88 23       	and	r24, r24
    341c:	91 f0       	breq	.+36     	; 0x3442 <MsTimer_Start+0x3c>
	{
		MsTimer_CallbackCounter[i] = 0;
    341e:	10 92 23 05 	sts	0x0523, r1	; 0x800523 <MsTimer_CallbackCounter>
    3422:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <MsTimer_CallbackCounter+0x1>
    3426:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <MsTimer_CallbackCounter+0x2>
    342a:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <MsTimer_CallbackCounter+0x3>
void MsTimer_Start()
{
	// Reset run time counter
	MsTimer_Counter = 0;
	// Reset callback counters
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    342e:	82 30       	cpi	r24, 0x02	; 2
    3430:	40 f0       	brcs	.+16     	; 0x3442 <MsTimer_Start+0x3c>
	{
		MsTimer_CallbackCounter[i] = 0;
    3432:	10 92 27 05 	sts	0x0527, r1	; 0x800527 <MsTimer_CallbackCounter+0x4>
    3436:	10 92 28 05 	sts	0x0528, r1	; 0x800528 <MsTimer_CallbackCounter+0x5>
    343a:	10 92 29 05 	sts	0x0529, r1	; 0x800529 <MsTimer_CallbackCounter+0x6>
    343e:	10 92 2a 05 	sts	0x052A, r1	; 0x80052a <MsTimer_CallbackCounter+0x7>
	}
	// Reset timer counter
	MsTimer_ResetCounter();
    3442:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3446:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// Enable timer and interrupt
	MsTimer_EnableTimer();
    344a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    344e:	81 60       	ori	r24, 0x01	; 1
    3450:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	MsTimer_EnableInt();
    3454:	82 e0       	ldi	r24, 0x02	; 2
    3456:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    345a:	08 95       	ret

0000345c <MsTimer_Stop>:
}

void MsTimer_Stop()
{
	MsTimer_DisableTimer();
    345c:	e1 e8       	ldi	r30, 0x81	; 129
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	88 7f       	andi	r24, 0xF8	; 248
    3464:	80 83       	st	Z, r24
	MsTimer_DisableInt();
    3466:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    346a:	08 95       	ret

0000346c <MsTimer_AddCallback>:
}

void MsTimer_AddCallback(void (*callback)(void), uint32_t period)
{
	MsTimer_Callback[MsTimer_CallbackN] = callback;
    346c:	a0 91 1d 05 	lds	r26, 0x051D	; 0x80051d <MsTimer_CallbackN>
    3470:	2a 2f       	mov	r18, r26
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	f9 01       	movw	r30, r18
    3476:	ee 0f       	add	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	e5 5d       	subi	r30, 0xD5	; 213
    347c:	fa 4f       	sbci	r31, 0xFA	; 250
    347e:	91 83       	std	Z+1, r25	; 0x01
    3480:	80 83       	st	Z, r24
	MsTimer_CallbackPeriod[MsTimer_CallbackN] = period;
    3482:	22 0f       	add	r18, r18
    3484:	33 1f       	adc	r19, r19
    3486:	22 0f       	add	r18, r18
    3488:	33 1f       	adc	r19, r19
    348a:	f9 01       	movw	r30, r18
    348c:	e1 5d       	subi	r30, 0xD1	; 209
    348e:	fa 4f       	sbci	r31, 0xFA	; 250
    3490:	40 83       	st	Z, r20
    3492:	51 83       	std	Z+1, r21	; 0x01
    3494:	62 83       	std	Z+2, r22	; 0x02
    3496:	73 83       	std	Z+3, r23	; 0x03
	MsTimer_CallbackN++;
    3498:	51 e0       	ldi	r21, 0x01	; 1
    349a:	5a 0f       	add	r21, r26
    349c:	50 93 1d 05 	sts	0x051D, r21	; 0x80051d <MsTimer_CallbackN>
    34a0:	08 95       	ret

000034a2 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
    34a2:	1f 92       	push	r1
    34a4:	0f 92       	push	r0
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	0f 92       	push	r0
    34aa:	11 24       	eor	r1, r1
    34ac:	ef 92       	push	r14
    34ae:	ff 92       	push	r15
    34b0:	1f 93       	push	r17
    34b2:	2f 93       	push	r18
    34b4:	3f 93       	push	r19
    34b6:	4f 93       	push	r20
    34b8:	5f 93       	push	r21
    34ba:	6f 93       	push	r22
    34bc:	7f 93       	push	r23
    34be:	8f 93       	push	r24
    34c0:	9f 93       	push	r25
    34c2:	af 93       	push	r26
    34c4:	bf 93       	push	r27
    34c6:	cf 93       	push	r28
    34c8:	df 93       	push	r29
    34ca:	ef 93       	push	r30
    34cc:	ff 93       	push	r31
	// Increment global counter
	MsTimer_Counter++;
    34ce:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <MsTimer_Counter>
    34d2:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <MsTimer_Counter+0x1>
    34d6:	a0 91 21 05 	lds	r26, 0x0521	; 0x800521 <MsTimer_Counter+0x2>
    34da:	b0 91 22 05 	lds	r27, 0x0522	; 0x800522 <MsTimer_Counter+0x3>
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	a1 1d       	adc	r26, r1
    34e2:	b1 1d       	adc	r27, r1
    34e4:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <MsTimer_Counter>
    34e8:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <MsTimer_Counter+0x1>
    34ec:	a0 93 21 05 	sts	0x0521, r26	; 0x800521 <MsTimer_Counter+0x2>
    34f0:	b0 93 22 05 	sts	0x0522, r27	; 0x800522 <MsTimer_Counter+0x3>
	
	// Check if we have to run callbacks and increment counter
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <MsTimer_CallbackN>
    34fa:	18 17       	cp	r17, r24
    34fc:	c8 f5       	brcc	.+114    	; 0x3570 <__vector_11+0xce>
	{
		if (MsTimer_CallbackCounter[i] == 0)
    34fe:	81 2f       	mov	r24, r17
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	ec 01       	movw	r28, r24
    3504:	cc 0f       	add	r28, r28
    3506:	dd 1f       	adc	r29, r29
    3508:	cc 0f       	add	r28, r28
    350a:	dd 1f       	adc	r29, r29
    350c:	fe 01       	movw	r30, r28
    350e:	ed 5d       	subi	r30, 0xDD	; 221
    3510:	fa 4f       	sbci	r31, 0xFA	; 250
    3512:	40 81       	ld	r20, Z
    3514:	51 81       	ldd	r21, Z+1	; 0x01
    3516:	62 81       	ldd	r22, Z+2	; 0x02
    3518:	73 81       	ldd	r23, Z+3	; 0x03
    351a:	45 2b       	or	r20, r21
    351c:	46 2b       	or	r20, r22
    351e:	47 2b       	or	r20, r23
    3520:	49 f4       	brne	.+18     	; 0x3534 <__vector_11+0x92>
		{
			(*MsTimer_Callback[i])();
    3522:	88 0f       	add	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	fc 01       	movw	r30, r24
    3528:	e5 5d       	subi	r30, 0xD5	; 213
    352a:	fa 4f       	sbci	r31, 0xFA	; 250
    352c:	01 90       	ld	r0, Z+
    352e:	f0 81       	ld	r31, Z
    3530:	e0 2d       	mov	r30, r0
    3532:	09 95       	icall
		}
		MsTimer_CallbackCounter[i] = (MsTimer_CallbackCounter[i] + 1) % MsTimer_CallbackPeriod[i];
    3534:	ce 01       	movw	r24, r28
    3536:	8d 5d       	subi	r24, 0xDD	; 221
    3538:	9a 4f       	sbci	r25, 0xFA	; 250
    353a:	7c 01       	movw	r14, r24
    353c:	fc 01       	movw	r30, r24
    353e:	80 81       	ld	r24, Z
    3540:	91 81       	ldd	r25, Z+1	; 0x01
    3542:	a2 81       	ldd	r26, Z+2	; 0x02
    3544:	b3 81       	ldd	r27, Z+3	; 0x03
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	6f 5f       	subi	r22, 0xFF	; 255
    354c:	7f 4f       	sbci	r23, 0xFF	; 255
    354e:	8f 4f       	sbci	r24, 0xFF	; 255
    3550:	9f 4f       	sbci	r25, 0xFF	; 255
    3552:	c1 5d       	subi	r28, 0xD1	; 209
    3554:	da 4f       	sbci	r29, 0xFA	; 250
    3556:	28 81       	ld	r18, Y
    3558:	39 81       	ldd	r19, Y+1	; 0x01
    355a:	4a 81       	ldd	r20, Y+2	; 0x02
    355c:	5b 81       	ldd	r21, Y+3	; 0x03
    355e:	0e 94 df 1c 	call	0x39be	; 0x39be <__udivmodsi4>
    3562:	f7 01       	movw	r30, r14
    3564:	60 83       	st	Z, r22
    3566:	71 83       	std	Z+1, r23	; 0x01
    3568:	82 83       	std	Z+2, r24	; 0x02
    356a:	93 83       	std	Z+3, r25	; 0x03
ISR(TIMER1_COMPA_vect) {
	// Increment global counter
	MsTimer_Counter++;
	
	// Check if we have to run callbacks and increment counter
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    356c:	1f 5f       	subi	r17, 0xFF	; 255
    356e:	c3 cf       	rjmp	.-122    	; 0x34f6 <__vector_11+0x54>
		{
			(*MsTimer_Callback[i])();
		}
		MsTimer_CallbackCounter[i] = (MsTimer_CallbackCounter[i] + 1) % MsTimer_CallbackPeriod[i];
	}
    3570:	ff 91       	pop	r31
    3572:	ef 91       	pop	r30
    3574:	df 91       	pop	r29
    3576:	cf 91       	pop	r28
    3578:	bf 91       	pop	r27
    357a:	af 91       	pop	r26
    357c:	9f 91       	pop	r25
    357e:	8f 91       	pop	r24
    3580:	7f 91       	pop	r23
    3582:	6f 91       	pop	r22
    3584:	5f 91       	pop	r21
    3586:	4f 91       	pop	r20
    3588:	3f 91       	pop	r19
    358a:	2f 91       	pop	r18
    358c:	1f 91       	pop	r17
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	0f 90       	pop	r0
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	0f 90       	pop	r0
    3598:	1f 90       	pop	r1
    359a:	18 95       	reti

0000359c <StatusLeds_Init>:
#include "StatusLeds.h"

void StatusLeds_Init(void)
{
	// Set pins as outputs
	DDRC |= 0x38;
    359c:	87 b1       	in	r24, 0x07	; 7
    359e:	88 63       	ori	r24, 0x38	; 56
    35a0:	87 b9       	out	0x07, r24	; 7
    35a2:	08 95       	ret

000035a4 <StatusLeds_Set>:
}

void StatusLeds_Set(uint8_t led, uint8_t status)
{
	if (status)
	PORTC |= 1 << led;
    35a4:	48 b1       	in	r20, 0x08	; 8
    35a6:	21 e0       	ldi	r18, 0x01	; 1
    35a8:	30 e0       	ldi	r19, 0x00	; 0
	DDRC |= 0x38;
}

void StatusLeds_Set(uint8_t led, uint8_t status)
{
	if (status)
    35aa:	66 23       	and	r22, r22
    35ac:	49 f0       	breq	.+18     	; 0x35c0 <StatusLeds_Set+0x1c>
	PORTC |= 1 << led;
    35ae:	b9 01       	movw	r22, r18
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <StatusLeds_Set+0x12>
    35b2:	66 0f       	add	r22, r22
    35b4:	77 1f       	adc	r23, r23
    35b6:	8a 95       	dec	r24
    35b8:	e2 f7       	brpl	.-8      	; 0x35b2 <StatusLeds_Set+0xe>
    35ba:	cb 01       	movw	r24, r22
    35bc:	84 2b       	or	r24, r20
    35be:	09 c0       	rjmp	.+18     	; 0x35d2 <StatusLeds_Set+0x2e>
	else
	PORTC &= ~( 1 << led);
    35c0:	b9 01       	movw	r22, r18
    35c2:	02 c0       	rjmp	.+4      	; 0x35c8 <StatusLeds_Set+0x24>
    35c4:	66 0f       	add	r22, r22
    35c6:	77 1f       	adc	r23, r23
    35c8:	8a 95       	dec	r24
    35ca:	e2 f7       	brpl	.-8      	; 0x35c4 <StatusLeds_Set+0x20>
    35cc:	cb 01       	movw	r24, r22
    35ce:	80 95       	com	r24
    35d0:	84 23       	and	r24, r20
    35d2:	88 b9       	out	0x08, r24	; 8
    35d4:	08 95       	ret

000035d6 <StatusLeds_Toggle>:
}

void StatusLeds_Toggle(uint8_t led)
{
	PINC = (1 << led);
    35d6:	21 e0       	ldi	r18, 0x01	; 1
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	01 c0       	rjmp	.+2      	; 0x35de <StatusLeds_Toggle+0x8>
    35dc:	22 0f       	add	r18, r18
    35de:	8a 95       	dec	r24
    35e0:	ea f7       	brpl	.-6      	; 0x35dc <StatusLeds_Toggle+0x6>
    35e2:	26 b9       	out	0x06, r18	; 6
    35e4:	08 95       	ret

000035e6 <Tlc5941_Init>:
			// Wait for transmission complete
			while (!(UCSR0A & (1 << UDRE0)));
		#endif
	}

	Tlc5941_pulse(Tlc5941_XLAT_PORT, Tlc5941_XLAT_PIN);
    35e6:	20 9a       	sbi	0x04, 0	; 4
    35e8:	54 9a       	sbi	0x0a, 4	; 10
    35ea:	52 9a       	sbi	0x0a, 2	; 10
    35ec:	21 9a       	sbi	0x04, 1	; 4
    35ee:	53 9a       	sbi	0x0a, 3	; 10
    35f0:	51 9a       	sbi	0x0a, 1	; 10
    35f2:	28 98       	cbi	0x05, 0	; 5
    35f4:	5c 98       	cbi	0x0b, 4	; 11
    35f6:	5a 98       	cbi	0x0b, 2	; 11
    35f8:	29 98       	cbi	0x05, 1	; 5
    35fa:	5b 98       	cbi	0x0b, 3	; 11
    35fc:	e4 ec       	ldi	r30, 0xC4	; 196
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	11 82       	std	Z+1, r1	; 0x01
    3602:	10 82       	st	Z, r1
    3604:	80 ec       	ldi	r24, 0xC0	; 192
    3606:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    360a:	88 e0       	ldi	r24, 0x08	; 8
    360c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    3610:	11 82       	std	Z+1, r1	; 0x01
    3612:	10 82       	st	Z, r1
    3614:	82 e0       	ldi	r24, 0x02	; 2
    3616:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    361a:	87 e0       	ldi	r24, 0x07	; 7
    361c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    3620:	83 e0       	ldi	r24, 0x03	; 3
    3622:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    3626:	e0 e7       	ldi	r30, 0x70	; 112
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	80 81       	ld	r24, Z
    362c:	82 60       	ori	r24, 0x02	; 2
    362e:	80 83       	st	Z, r24
    3630:	08 95       	ret

00003632 <Tlc5941_SetAllGS>:
    3632:	9c 01       	movw	r18, r24
    3634:	94 e0       	ldi	r25, 0x04	; 4
    3636:	36 95       	lsr	r19
    3638:	27 95       	ror	r18
    363a:	9a 95       	dec	r25
    363c:	e1 f7       	brne	.-8      	; 0x3636 <Tlc5941_SetAllGS+0x4>
    363e:	32 2f       	mov	r19, r18
    3640:	98 2f       	mov	r25, r24
    3642:	82 95       	swap	r24
    3644:	80 7f       	andi	r24, 0xF0	; 240
    3646:	22 95       	swap	r18
    3648:	2f 70       	andi	r18, 0x0F	; 15
    364a:	28 2b       	or	r18, r24
    364c:	e1 e8       	ldi	r30, 0x81	; 129
    364e:	f5 e0       	ldi	r31, 0x05	; 5
    3650:	30 83       	st	Z, r19
    3652:	21 83       	std	Z+1, r18	; 0x01
    3654:	92 83       	std	Z+2, r25	; 0x02
    3656:	33 96       	adiw	r30, 0x03	; 3
    3658:	86 e0       	ldi	r24, 0x06	; 6
    365a:	e1 31       	cpi	r30, 0x11	; 17
    365c:	f8 07       	cpc	r31, r24
    365e:	c1 f7       	brne	.-16     	; 0x3650 <Tlc5941_SetAllGS+0x1e>
    3660:	08 95       	ret

00003662 <Tlc5941_SetGS>:
    3662:	9f e5       	ldi	r25, 0x5F	; 95
    3664:	98 1b       	sub	r25, r24
    3666:	89 2f       	mov	r24, r25
    3668:	93 e0       	ldi	r25, 0x03	; 3
    366a:	89 9f       	mul	r24, r25
    366c:	f0 01       	movw	r30, r0
    366e:	11 24       	eor	r1, r1
    3670:	f6 95       	lsr	r31
    3672:	e7 95       	ror	r30
    3674:	df 01       	movw	r26, r30
    3676:	af 57       	subi	r26, 0x7F	; 127
    3678:	ba 4f       	sbci	r27, 0xFA	; 250
    367a:	80 fd       	sbrc	r24, 0
    367c:	10 c0       	rjmp	.+32     	; 0x369e <Tlc5941_SetGS+0x3c>
    367e:	cb 01       	movw	r24, r22
    3680:	24 e0       	ldi	r18, 0x04	; 4
    3682:	96 95       	lsr	r25
    3684:	87 95       	ror	r24
    3686:	2a 95       	dec	r18
    3688:	e1 f7       	brne	.-8      	; 0x3682 <Tlc5941_SetGS+0x20>
    368a:	8c 93       	st	X, r24
    368c:	ee 57       	subi	r30, 0x7E	; 126
    368e:	fa 4f       	sbci	r31, 0xFA	; 250
    3690:	80 81       	ld	r24, Z
    3692:	8f 70       	andi	r24, 0x0F	; 15
    3694:	62 95       	swap	r22
    3696:	60 7f       	andi	r22, 0xF0	; 240
    3698:	68 2b       	or	r22, r24
    369a:	60 83       	st	Z, r22
    369c:	08 95       	ret
    369e:	8c 91       	ld	r24, X
    36a0:	80 7f       	andi	r24, 0xF0	; 240
    36a2:	87 2b       	or	r24, r23
    36a4:	8c 93       	st	X, r24
    36a6:	11 96       	adiw	r26, 0x01	; 1
    36a8:	6c 93       	st	X, r22
    36aa:	08 95       	ret

000036ac <Tlc5941_SetAllDC>:
}

void Tlc5941_SetAllDC(uint8_t value) {
	// Sets all dot correction values to the same input value.
	uint8_t tmp1 = (uint8_t)(value << 2);
    36ac:	28 2f       	mov	r18, r24
    36ae:	22 0f       	add	r18, r18
    36b0:	22 0f       	add	r18, r18
	uint8_t tmp2 = (uint8_t)(tmp1 << 2);
    36b2:	92 2f       	mov	r25, r18
    36b4:	99 0f       	add	r25, r25
    36b6:	99 0f       	add	r25, r25
	uint8_t tmp3 = (uint8_t)(tmp2 << 2);
    36b8:	39 2f       	mov	r19, r25
    36ba:	33 0f       	add	r19, r19
    36bc:	33 0f       	add	r19, r19
	tmp1 |= (value >> 4);
    36be:	48 2f       	mov	r20, r24
    36c0:	42 95       	swap	r20
    36c2:	4f 70       	andi	r20, 0x0F	; 15
    36c4:	24 2b       	or	r18, r20
	tmp2 |= (value >> 2);
    36c6:	48 2f       	mov	r20, r24
    36c8:	46 95       	lsr	r20
    36ca:	46 95       	lsr	r20
    36cc:	94 2b       	or	r25, r20
	tmp3 |= value;
    36ce:	83 2b       	or	r24, r19
    36d0:	e7 e3       	ldi	r30, 0x37	; 55
    36d2:	f5 e0       	ldi	r31, 0x05	; 5
	Tlc5941_dcData_t i = 0;
	do {
		Tlc5941_dcData[i++] = tmp1; // bits: 05 04 03 02 01 00 05 04
    36d4:	20 83       	st	Z, r18
		Tlc5941_dcData[i++] = tmp2; // bits: 03 02 01 00 05 04 03 02
    36d6:	91 83       	std	Z+1, r25	; 0x01
		Tlc5941_dcData[i++] = tmp3; // bits: 01 00 05 04 03 02 01 00
    36d8:	82 83       	std	Z+2, r24	; 0x02
    36da:	33 96       	adiw	r30, 0x03	; 3
	} while (i < Tlc5941_dcDataSize);
    36dc:	35 e0       	ldi	r19, 0x05	; 5
    36de:	ef 37       	cpi	r30, 0x7F	; 127
    36e0:	f3 07       	cpc	r31, r19
    36e2:	c1 f7       	brne	.-16     	; 0x36d4 <Tlc5941_SetAllDC+0x28>
}
    36e4:	08 95       	ret

000036e6 <Tlc5941_SetDC>:

void Tlc5941_SetDC(Tlc5941_channel_t channel, uint8_t value) {
	// Sets the dot correction value of a particular channel
	channel = Tlc5941_numChannels - 1 - channel;
    36e6:	2f e5       	ldi	r18, 0x5F	; 95
    36e8:	28 1b       	sub	r18, r24
	Tlc5941_channel_t i = (Tlc5941_channel3_t)channel * 3 / 4;
    36ea:	33 e0       	ldi	r19, 0x03	; 3
    36ec:	23 9f       	mul	r18, r19
    36ee:	c0 01       	movw	r24, r0
    36f0:	11 24       	eor	r1, r1
    36f2:	96 95       	lsr	r25
    36f4:	87 95       	ror	r24
    36f6:	96 95       	lsr	r25
    36f8:	87 95       	ror	r24
	switch (channel % 4) {
    36fa:	23 70       	andi	r18, 0x03	; 3
    36fc:	fc 01       	movw	r30, r24
    36fe:	e9 5c       	subi	r30, 0xC9	; 201
    3700:	fa 4f       	sbci	r31, 0xFA	; 250
    3702:	21 30       	cpi	r18, 0x01	; 1
    3704:	d9 f0       	breq	.+54     	; 0x373c <Tlc5941_SetDC+0x56>
    3706:	a8 f0       	brcs	.+42     	; 0x3732 <Tlc5941_SetDC+0x4c>
    3708:	22 30       	cpi	r18, 0x02	; 2
    370a:	49 f5       	brne	.+82     	; 0x375e <Tlc5941_SetDC+0x78>
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xFC) | (value >> 4);
			i++;
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x0F) | (uint8_t)(value << 4);
			break;
		case 2:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xF0) | (value >> 2);
    370c:	90 81       	ld	r25, Z
    370e:	90 7f       	andi	r25, 0xF0	; 240
    3710:	26 2f       	mov	r18, r22
    3712:	26 95       	lsr	r18
    3714:	26 95       	lsr	r18
    3716:	92 2b       	or	r25, r18
    3718:	90 83       	st	Z, r25
			i++;
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x3F) | (uint8_t)(value << 6);
    371a:	8f 5f       	subi	r24, 0xFF	; 255
    371c:	e8 2f       	mov	r30, r24
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	e9 5c       	subi	r30, 0xC9	; 201
    3722:	fa 4f       	sbci	r31, 0xFA	; 250
    3724:	80 81       	ld	r24, Z
    3726:	8f 73       	andi	r24, 0x3F	; 63
    3728:	62 95       	swap	r22
    372a:	66 0f       	add	r22, r22
    372c:	66 0f       	add	r22, r22
    372e:	60 7c       	andi	r22, 0xC0	; 192
    3730:	18 c0       	rjmp	.+48     	; 0x3762 <Tlc5941_SetDC+0x7c>
	// Sets the dot correction value of a particular channel
	channel = Tlc5941_numChannels - 1 - channel;
	Tlc5941_channel_t i = (Tlc5941_channel3_t)channel * 3 / 4;
	switch (channel % 4) {
		case 0:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x03) | (uint8_t)(value << 2);
    3732:	80 81       	ld	r24, Z
    3734:	83 70       	andi	r24, 0x03	; 3
    3736:	66 0f       	add	r22, r22
    3738:	66 0f       	add	r22, r22
    373a:	13 c0       	rjmp	.+38     	; 0x3762 <Tlc5941_SetDC+0x7c>
			break;
		case 1:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xFC) | (value >> 4);
    373c:	90 81       	ld	r25, Z
    373e:	9c 7f       	andi	r25, 0xFC	; 252
    3740:	26 2f       	mov	r18, r22
    3742:	22 95       	swap	r18
    3744:	2f 70       	andi	r18, 0x0F	; 15
    3746:	92 2b       	or	r25, r18
    3748:	90 83       	st	Z, r25
			i++;
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x0F) | (uint8_t)(value << 4);
    374a:	8f 5f       	subi	r24, 0xFF	; 255
    374c:	e8 2f       	mov	r30, r24
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	e9 5c       	subi	r30, 0xC9	; 201
    3752:	fa 4f       	sbci	r31, 0xFA	; 250
    3754:	80 81       	ld	r24, Z
    3756:	8f 70       	andi	r24, 0x0F	; 15
    3758:	62 95       	swap	r22
    375a:	60 7f       	andi	r22, 0xF0	; 240
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <Tlc5941_SetDC+0x7c>
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xF0) | (value >> 2);
			i++;
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x3F) | (uint8_t)(value << 6);
			break;
		default: // case 3:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xC0) | (value);
    375e:	80 81       	ld	r24, Z
    3760:	80 7c       	andi	r24, 0xC0	; 192
    3762:	68 2b       	or	r22, r24
    3764:	60 83       	st	Z, r22
    3766:	08 95       	ret

00003768 <__vector_7>:
#endif // #if (Tlc5941_MANUAL_DC_FUNCS)

#if Tlc5941_TIMER == 0
ISR(TIMER0_COMPA_vect) {
#elif Tlc5941_TIMER == 2
ISR(TIMER2_COMPA_vect) {
    3768:	1f 92       	push	r1
    376a:	0f 92       	push	r0
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	0f 92       	push	r0
    3770:	11 24       	eor	r1, r1
    3772:	2f 93       	push	r18
    3774:	8f 93       	push	r24
    3776:	9f 93       	push	r25
    3778:	ef 93       	push	r30
    377a:	ff 93       	push	r31
#endif
	static uint8_t xlatNeedsPulse = 0;
	
	Tlc5941_setHigh(Tlc5941_BLANK_PORT, Tlc5941_BLANK_PIN);
    377c:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Make TLC load new values
	if (xlatNeedsPulse) {
    377e:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <xlatNeedsPulse.1972>
    3782:	88 23       	and	r24, r24
    3784:	21 f0       	breq	.+8      	; 0x378e <__vector_7+0x26>
		Tlc5941_pulse(Tlc5941_XLAT_PORT, Tlc5941_XLAT_PIN);
    3786:	29 9a       	sbi	0x05, 1	; 5
    3788:	29 98       	cbi	0x05, 1	; 5
		xlatNeedsPulse = 0;
    378a:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <xlatNeedsPulse.1972>
	}
	
	if (Tlc5941_outputState(Tlc5941_MODE_PORT, Tlc5941_MODE_PIN)) {
    378e:	5a 9b       	sbis	0x0b, 2	; 11
    3790:	03 c0       	rjmp	.+6      	; 0x3798 <__vector_7+0x30>
		// Dot correction mode
		// Change to grayscale mode
		Tlc5941_setLow(Tlc5941_MODE_PORT, Tlc5941_MODE_PIN);
    3792:	5a 98       	cbi	0x0b, 2	; 11
		// Send one additional SPI clock signal
		Tlc5941_pulse(Tlc5941_SCLK_PORT, Tlc5941_SCLK_PIN);
    3794:	5c 9a       	sbi	0x0b, 4	; 11
    3796:	5c 98       	cbi	0x0b, 4	; 11
	}
	
	Tlc5941_setLow(Tlc5941_BLANK_PORT, Tlc5941_BLANK_PIN);
    3798:	5b 98       	cbi	0x0b, 3	; 11

	// Send dot correction data if dcUpdateFlag is set
	if (Tlc5941_dcUpdateFlag) {
    379a:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <Tlc5941_dcUpdateFlag>
    379e:	88 23       	and	r24, r24
    37a0:	d9 f0       	breq	.+54     	; 0x37d8 <__vector_7+0x70>
		// Change mode to DC
		Tlc5941_setHigh(Tlc5941_MODE_PORT, Tlc5941_MODE_PIN);
    37a2:	5a 9a       	sbi	0x0b, 2	; 11
			SPDR = 0;
			// Wait for transmission complete
			while (!(SPSR & (1 << SPIF)));
		#else // Use USART in SPI mode
			// Start transmission
			UDR0 = 0;
    37a4:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			// Wait for transmission complete
			while (!(UCSR0A & (1 << UDRE0)));
    37a8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    37ac:	85 ff       	sbrs	r24, 5
    37ae:	fc cf       	rjmp	.-8      	; 0x37a8 <__vector_7+0x40>
    37b0:	e7 e3       	ldi	r30, 0x37	; 55
    37b2:	f5 e0       	ldi	r31, 0x05	; 5
    37b4:	8f e7       	ldi	r24, 0x7F	; 127
    37b6:	95 e0       	ldi	r25, 0x05	; 5
				SPDR = Tlc5941_dcData[i];
				// Wait for transmission complete
				while (!(SPSR & (1 << SPIF)));
			#else // Use USART in SPI mode
				// Start transmission
				UDR0 = Tlc5941_dcData[i];
    37b8:	21 91       	ld	r18, Z+
    37ba:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
				// Wait for transmission complete
				while (!(UCSR0A & (1 << UDRE0)));
    37be:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    37c2:	25 ff       	sbrs	r18, 5
    37c4:	fc cf       	rjmp	.-8      	; 0x37be <__vector_7+0x56>
			// Wait for transmission complete
			while (!(UCSR0A & (1 << UDRE0)));
		#endif

		// Perform data transmission
		for (Tlc5941_dcData_t i = 0; i < Tlc5941_dcDataSize; i++) {
    37c6:	8e 17       	cp	r24, r30
    37c8:	9f 07       	cpc	r25, r31
    37ca:	b1 f7       	brne	.-20     	; 0x37b8 <__vector_7+0x50>
				// Wait for transmission complete
				while (!(UCSR0A & (1 << UDRE0)));
			#endif
		}
		
		xlatNeedsPulse = 1;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <xlatNeedsPulse.1972>
		Tlc5941_dcUpdateFlag = 0;
    37d2:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <Tlc5941_dcUpdateFlag>
    37d6:	17 c0       	rjmp	.+46     	; 0x3806 <__vector_7+0x9e>
	}
	// Send grayscale data if gsUpdateFlag is set
	else if (Tlc5941_gsUpdateFlag) {
    37d8:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <Tlc5941_gsUpdateFlag>
    37dc:	88 23       	and	r24, r24
    37de:	99 f0       	breq	.+38     	; 0x3806 <__vector_7+0x9e>
    37e0:	e1 e8       	ldi	r30, 0x81	; 129
    37e2:	f5 e0       	ldi	r31, 0x05	; 5
    37e4:	81 e1       	ldi	r24, 0x11	; 17
    37e6:	96 e0       	ldi	r25, 0x06	; 6
		for (Tlc5941_gsData_t i = 0; i < Tlc5941_gsDataSize; i++) {
			#if Tlc5941_USART_SPI == 0 // Use SPI module
				SPDR = Tlc5941_gsData[i];
				while (!(SPSR & (1 << SPIF)));
			#else // Use USART in SPI mode
				UDR0 = Tlc5941_gsData[i];
    37e8:	21 91       	ld	r18, Z+
    37ea:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
				while (!(UCSR0A & (1 << UDRE0)));
    37ee:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    37f2:	25 ff       	sbrs	r18, 5
    37f4:	fc cf       	rjmp	.-8      	; 0x37ee <__vector_7+0x86>
		Tlc5941_dcUpdateFlag = 0;
	}
	// Send grayscale data if gsUpdateFlag is set
	else if (Tlc5941_gsUpdateFlag) {
		// Below this we have 4096 cycles to shift in the data for the next cycle
		for (Tlc5941_gsData_t i = 0; i < Tlc5941_gsDataSize; i++) {
    37f6:	8e 17       	cp	r24, r30
    37f8:	9f 07       	cpc	r25, r31
    37fa:	b1 f7       	brne	.-20     	; 0x37e8 <__vector_7+0x80>
			#else // Use USART in SPI mode
				UDR0 = Tlc5941_gsData[i];
				while (!(UCSR0A & (1 << UDRE0)));
			#endif
		}
		xlatNeedsPulse = 1;
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <xlatNeedsPulse.1972>
		Tlc5941_gsUpdateFlag = 0;
    3802:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <Tlc5941_gsUpdateFlag>
	}
    3806:	ff 91       	pop	r31
    3808:	ef 91       	pop	r30
    380a:	9f 91       	pop	r25
    380c:	8f 91       	pop	r24
    380e:	2f 91       	pop	r18
    3810:	0f 90       	pop	r0
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	0f 90       	pop	r0
    3816:	1f 90       	pop	r1
    3818:	18 95       	reti

0000381a <_GLOBAL__sub_I___vector_18>:
    381a:	ec e5       	ldi	r30, 0x5C	; 92
    381c:	f1 e0       	ldi	r31, 0x01	; 1
    381e:	13 82       	std	Z+3, r1	; 0x03
    3820:	12 82       	std	Z+2, r1	; 0x02
    3822:	88 ee       	ldi	r24, 0xE8	; 232
    3824:	93 e0       	ldi	r25, 0x03	; 3
    3826:	a0 e0       	ldi	r26, 0x00	; 0
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	84 83       	std	Z+4, r24	; 0x04
    382c:	95 83       	std	Z+5, r25	; 0x05
    382e:	a6 83       	std	Z+6, r26	; 0x06
    3830:	b7 83       	std	Z+7, r27	; 0x07
    3832:	8e e0       	ldi	r24, 0x0E	; 14
    3834:	91 e0       	ldi	r25, 0x01	; 1
    3836:	91 83       	std	Z+1, r25	; 0x01
    3838:	80 83       	st	Z, r24
    383a:	85 ec       	ldi	r24, 0xC5	; 197
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	95 87       	std	Z+13, r25	; 0x0d
    3840:	84 87       	std	Z+12, r24	; 0x0c
    3842:	84 ec       	ldi	r24, 0xC4	; 196
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	97 87       	std	Z+15, r25	; 0x0f
    3848:	86 87       	std	Z+14, r24	; 0x0e
    384a:	80 ec       	ldi	r24, 0xC0	; 192
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	91 8b       	std	Z+17, r25	; 0x11
    3850:	80 8b       	std	Z+16, r24	; 0x10
    3852:	81 ec       	ldi	r24, 0xC1	; 193
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	93 8b       	std	Z+19, r25	; 0x13
    3858:	82 8b       	std	Z+18, r24	; 0x12
    385a:	82 ec       	ldi	r24, 0xC2	; 194
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	95 8b       	std	Z+21, r25	; 0x15
    3860:	84 8b       	std	Z+20, r24	; 0x14
    3862:	86 ec       	ldi	r24, 0xC6	; 198
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	97 8b       	std	Z+23, r25	; 0x17
    3868:	86 8b       	std	Z+22, r24	; 0x16
    386a:	11 8e       	std	Z+25, r1	; 0x19
    386c:	12 8e       	std	Z+26, r1	; 0x1a
    386e:	13 8e       	std	Z+27, r1	; 0x1b
    3870:	14 8e       	std	Z+28, r1	; 0x1c
    3872:	08 95       	ret

00003874 <__fixunssfsi>:
    3874:	0e 94 ae 1c 	call	0x395c	; 0x395c <__fp_splitA>
    3878:	88 f0       	brcs	.+34     	; 0x389c <__fixunssfsi+0x28>
    387a:	9f 57       	subi	r25, 0x7F	; 127
    387c:	98 f0       	brcs	.+38     	; 0x38a4 <__fixunssfsi+0x30>
    387e:	b9 2f       	mov	r27, r25
    3880:	99 27       	eor	r25, r25
    3882:	b7 51       	subi	r27, 0x17	; 23
    3884:	b0 f0       	brcs	.+44     	; 0x38b2 <__fixunssfsi+0x3e>
    3886:	e1 f0       	breq	.+56     	; 0x38c0 <__fixunssfsi+0x4c>
    3888:	66 0f       	add	r22, r22
    388a:	77 1f       	adc	r23, r23
    388c:	88 1f       	adc	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	1a f0       	brmi	.+6      	; 0x3898 <__fixunssfsi+0x24>
    3892:	ba 95       	dec	r27
    3894:	c9 f7       	brne	.-14     	; 0x3888 <__fixunssfsi+0x14>
    3896:	14 c0       	rjmp	.+40     	; 0x38c0 <__fixunssfsi+0x4c>
    3898:	b1 30       	cpi	r27, 0x01	; 1
    389a:	91 f0       	breq	.+36     	; 0x38c0 <__fixunssfsi+0x4c>
    389c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <__fp_zero>
    38a0:	b1 e0       	ldi	r27, 0x01	; 1
    38a2:	08 95       	ret
    38a4:	0c 94 c8 1c 	jmp	0x3990	; 0x3990 <__fp_zero>
    38a8:	67 2f       	mov	r22, r23
    38aa:	78 2f       	mov	r23, r24
    38ac:	88 27       	eor	r24, r24
    38ae:	b8 5f       	subi	r27, 0xF8	; 248
    38b0:	39 f0       	breq	.+14     	; 0x38c0 <__fixunssfsi+0x4c>
    38b2:	b9 3f       	cpi	r27, 0xF9	; 249
    38b4:	cc f3       	brlt	.-14     	; 0x38a8 <__fixunssfsi+0x34>
    38b6:	86 95       	lsr	r24
    38b8:	77 95       	ror	r23
    38ba:	67 95       	ror	r22
    38bc:	b3 95       	inc	r27
    38be:	d9 f7       	brne	.-10     	; 0x38b6 <__fixunssfsi+0x42>
    38c0:	3e f4       	brtc	.+14     	; 0x38d0 <__fixunssfsi+0x5c>
    38c2:	90 95       	com	r25
    38c4:	80 95       	com	r24
    38c6:	70 95       	com	r23
    38c8:	61 95       	neg	r22
    38ca:	7f 4f       	sbci	r23, 0xFF	; 255
    38cc:	8f 4f       	sbci	r24, 0xFF	; 255
    38ce:	9f 4f       	sbci	r25, 0xFF	; 255
    38d0:	08 95       	ret

000038d2 <__floatunsisf>:
    38d2:	e8 94       	clt
    38d4:	09 c0       	rjmp	.+18     	; 0x38e8 <__floatsisf+0x12>

000038d6 <__floatsisf>:
    38d6:	97 fb       	bst	r25, 7
    38d8:	3e f4       	brtc	.+14     	; 0x38e8 <__floatsisf+0x12>
    38da:	90 95       	com	r25
    38dc:	80 95       	com	r24
    38de:	70 95       	com	r23
    38e0:	61 95       	neg	r22
    38e2:	7f 4f       	sbci	r23, 0xFF	; 255
    38e4:	8f 4f       	sbci	r24, 0xFF	; 255
    38e6:	9f 4f       	sbci	r25, 0xFF	; 255
    38e8:	99 23       	and	r25, r25
    38ea:	a9 f0       	breq	.+42     	; 0x3916 <__floatsisf+0x40>
    38ec:	f9 2f       	mov	r31, r25
    38ee:	96 e9       	ldi	r25, 0x96	; 150
    38f0:	bb 27       	eor	r27, r27
    38f2:	93 95       	inc	r25
    38f4:	f6 95       	lsr	r31
    38f6:	87 95       	ror	r24
    38f8:	77 95       	ror	r23
    38fa:	67 95       	ror	r22
    38fc:	b7 95       	ror	r27
    38fe:	f1 11       	cpse	r31, r1
    3900:	f8 cf       	rjmp	.-16     	; 0x38f2 <__floatsisf+0x1c>
    3902:	fa f4       	brpl	.+62     	; 0x3942 <__floatsisf+0x6c>
    3904:	bb 0f       	add	r27, r27
    3906:	11 f4       	brne	.+4      	; 0x390c <__floatsisf+0x36>
    3908:	60 ff       	sbrs	r22, 0
    390a:	1b c0       	rjmp	.+54     	; 0x3942 <__floatsisf+0x6c>
    390c:	6f 5f       	subi	r22, 0xFF	; 255
    390e:	7f 4f       	sbci	r23, 0xFF	; 255
    3910:	8f 4f       	sbci	r24, 0xFF	; 255
    3912:	9f 4f       	sbci	r25, 0xFF	; 255
    3914:	16 c0       	rjmp	.+44     	; 0x3942 <__floatsisf+0x6c>
    3916:	88 23       	and	r24, r24
    3918:	11 f0       	breq	.+4      	; 0x391e <__floatsisf+0x48>
    391a:	96 e9       	ldi	r25, 0x96	; 150
    391c:	11 c0       	rjmp	.+34     	; 0x3940 <__floatsisf+0x6a>
    391e:	77 23       	and	r23, r23
    3920:	21 f0       	breq	.+8      	; 0x392a <__floatsisf+0x54>
    3922:	9e e8       	ldi	r25, 0x8E	; 142
    3924:	87 2f       	mov	r24, r23
    3926:	76 2f       	mov	r23, r22
    3928:	05 c0       	rjmp	.+10     	; 0x3934 <__floatsisf+0x5e>
    392a:	66 23       	and	r22, r22
    392c:	71 f0       	breq	.+28     	; 0x394a <__floatsisf+0x74>
    392e:	96 e8       	ldi	r25, 0x86	; 134
    3930:	86 2f       	mov	r24, r22
    3932:	70 e0       	ldi	r23, 0x00	; 0
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	2a f0       	brmi	.+10     	; 0x3942 <__floatsisf+0x6c>
    3938:	9a 95       	dec	r25
    393a:	66 0f       	add	r22, r22
    393c:	77 1f       	adc	r23, r23
    393e:	88 1f       	adc	r24, r24
    3940:	da f7       	brpl	.-10     	; 0x3938 <__floatsisf+0x62>
    3942:	88 0f       	add	r24, r24
    3944:	96 95       	lsr	r25
    3946:	87 95       	ror	r24
    3948:	97 f9       	bld	r25, 7
    394a:	08 95       	ret

0000394c <__fp_split3>:
    394c:	57 fd       	sbrc	r21, 7
    394e:	90 58       	subi	r25, 0x80	; 128
    3950:	44 0f       	add	r20, r20
    3952:	55 1f       	adc	r21, r21
    3954:	59 f0       	breq	.+22     	; 0x396c <__fp_splitA+0x10>
    3956:	5f 3f       	cpi	r21, 0xFF	; 255
    3958:	71 f0       	breq	.+28     	; 0x3976 <__fp_splitA+0x1a>
    395a:	47 95       	ror	r20

0000395c <__fp_splitA>:
    395c:	88 0f       	add	r24, r24
    395e:	97 fb       	bst	r25, 7
    3960:	99 1f       	adc	r25, r25
    3962:	61 f0       	breq	.+24     	; 0x397c <__fp_splitA+0x20>
    3964:	9f 3f       	cpi	r25, 0xFF	; 255
    3966:	79 f0       	breq	.+30     	; 0x3986 <__fp_splitA+0x2a>
    3968:	87 95       	ror	r24
    396a:	08 95       	ret
    396c:	12 16       	cp	r1, r18
    396e:	13 06       	cpc	r1, r19
    3970:	14 06       	cpc	r1, r20
    3972:	55 1f       	adc	r21, r21
    3974:	f2 cf       	rjmp	.-28     	; 0x395a <__fp_split3+0xe>
    3976:	46 95       	lsr	r20
    3978:	f1 df       	rcall	.-30     	; 0x395c <__fp_splitA>
    397a:	08 c0       	rjmp	.+16     	; 0x398c <__fp_splitA+0x30>
    397c:	16 16       	cp	r1, r22
    397e:	17 06       	cpc	r1, r23
    3980:	18 06       	cpc	r1, r24
    3982:	99 1f       	adc	r25, r25
    3984:	f1 cf       	rjmp	.-30     	; 0x3968 <__fp_splitA+0xc>
    3986:	86 95       	lsr	r24
    3988:	71 05       	cpc	r23, r1
    398a:	61 05       	cpc	r22, r1
    398c:	08 94       	sec
    398e:	08 95       	ret

00003990 <__fp_zero>:
    3990:	e8 94       	clt

00003992 <__fp_szero>:
    3992:	bb 27       	eor	r27, r27
    3994:	66 27       	eor	r22, r22
    3996:	77 27       	eor	r23, r23
    3998:	cb 01       	movw	r24, r22
    399a:	97 f9       	bld	r25, 7
    399c:	08 95       	ret

0000399e <__mulsi3>:
    399e:	db 01       	movw	r26, r22
    39a0:	8f 93       	push	r24
    39a2:	9f 93       	push	r25
    39a4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__muluhisi3>
    39a8:	bf 91       	pop	r27
    39aa:	af 91       	pop	r26
    39ac:	a2 9f       	mul	r26, r18
    39ae:	80 0d       	add	r24, r0
    39b0:	91 1d       	adc	r25, r1
    39b2:	a3 9f       	mul	r26, r19
    39b4:	90 0d       	add	r25, r0
    39b6:	b2 9f       	mul	r27, r18
    39b8:	90 0d       	add	r25, r0
    39ba:	11 24       	eor	r1, r1
    39bc:	08 95       	ret

000039be <__udivmodsi4>:
    39be:	a1 e2       	ldi	r26, 0x21	; 33
    39c0:	1a 2e       	mov	r1, r26
    39c2:	aa 1b       	sub	r26, r26
    39c4:	bb 1b       	sub	r27, r27
    39c6:	fd 01       	movw	r30, r26
    39c8:	0d c0       	rjmp	.+26     	; 0x39e4 <__udivmodsi4_ep>

000039ca <__udivmodsi4_loop>:
    39ca:	aa 1f       	adc	r26, r26
    39cc:	bb 1f       	adc	r27, r27
    39ce:	ee 1f       	adc	r30, r30
    39d0:	ff 1f       	adc	r31, r31
    39d2:	a2 17       	cp	r26, r18
    39d4:	b3 07       	cpc	r27, r19
    39d6:	e4 07       	cpc	r30, r20
    39d8:	f5 07       	cpc	r31, r21
    39da:	20 f0       	brcs	.+8      	; 0x39e4 <__udivmodsi4_ep>
    39dc:	a2 1b       	sub	r26, r18
    39de:	b3 0b       	sbc	r27, r19
    39e0:	e4 0b       	sbc	r30, r20
    39e2:	f5 0b       	sbc	r31, r21

000039e4 <__udivmodsi4_ep>:
    39e4:	66 1f       	adc	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	88 1f       	adc	r24, r24
    39ea:	99 1f       	adc	r25, r25
    39ec:	1a 94       	dec	r1
    39ee:	69 f7       	brne	.-38     	; 0x39ca <__udivmodsi4_loop>
    39f0:	60 95       	com	r22
    39f2:	70 95       	com	r23
    39f4:	80 95       	com	r24
    39f6:	90 95       	com	r25
    39f8:	9b 01       	movw	r18, r22
    39fa:	ac 01       	movw	r20, r24
    39fc:	bd 01       	movw	r22, r26
    39fe:	cf 01       	movw	r24, r30
    3a00:	08 95       	ret

00003a02 <__tablejump2__>:
    3a02:	ee 0f       	add	r30, r30
    3a04:	ff 1f       	adc	r31, r31
    3a06:	05 90       	lpm	r0, Z+
    3a08:	f4 91       	lpm	r31, Z
    3a0a:	e0 2d       	mov	r30, r0
    3a0c:	09 94       	ijmp

00003a0e <__muluhisi3>:
    3a0e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <__umulhisi3>
    3a12:	a5 9f       	mul	r26, r21
    3a14:	90 0d       	add	r25, r0
    3a16:	b4 9f       	mul	r27, r20
    3a18:	90 0d       	add	r25, r0
    3a1a:	a4 9f       	mul	r26, r20
    3a1c:	80 0d       	add	r24, r0
    3a1e:	91 1d       	adc	r25, r1
    3a20:	11 24       	eor	r1, r1
    3a22:	08 95       	ret

00003a24 <__umulhisi3>:
    3a24:	a2 9f       	mul	r26, r18
    3a26:	b0 01       	movw	r22, r0
    3a28:	b3 9f       	mul	r27, r19
    3a2a:	c0 01       	movw	r24, r0
    3a2c:	a3 9f       	mul	r26, r19
    3a2e:	70 0d       	add	r23, r0
    3a30:	81 1d       	adc	r24, r1
    3a32:	11 24       	eor	r1, r1
    3a34:	91 1d       	adc	r25, r1
    3a36:	b2 9f       	mul	r27, r18
    3a38:	70 0d       	add	r23, r0
    3a3a:	81 1d       	adc	r24, r1
    3a3c:	11 24       	eor	r1, r1
    3a3e:	91 1d       	adc	r25, r1
    3a40:	08 95       	ret

00003a42 <malloc>:
    3a42:	0f 93       	push	r16
    3a44:	1f 93       	push	r17
    3a46:	cf 93       	push	r28
    3a48:	df 93       	push	r29
    3a4a:	82 30       	cpi	r24, 0x02	; 2
    3a4c:	91 05       	cpc	r25, r1
    3a4e:	10 f4       	brcc	.+4      	; 0x3a54 <malloc+0x12>
    3a50:	82 e0       	ldi	r24, 0x02	; 2
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	e0 91 13 06 	lds	r30, 0x0613	; 0x800613 <__flp>
    3a58:	f0 91 14 06 	lds	r31, 0x0614	; 0x800614 <__flp+0x1>
    3a5c:	20 e0       	ldi	r18, 0x00	; 0
    3a5e:	30 e0       	ldi	r19, 0x00	; 0
    3a60:	a0 e0       	ldi	r26, 0x00	; 0
    3a62:	b0 e0       	ldi	r27, 0x00	; 0
    3a64:	30 97       	sbiw	r30, 0x00	; 0
    3a66:	19 f1       	breq	.+70     	; 0x3aae <malloc+0x6c>
    3a68:	40 81       	ld	r20, Z
    3a6a:	51 81       	ldd	r21, Z+1	; 0x01
    3a6c:	02 81       	ldd	r16, Z+2	; 0x02
    3a6e:	13 81       	ldd	r17, Z+3	; 0x03
    3a70:	48 17       	cp	r20, r24
    3a72:	59 07       	cpc	r21, r25
    3a74:	c8 f0       	brcs	.+50     	; 0x3aa8 <malloc+0x66>
    3a76:	84 17       	cp	r24, r20
    3a78:	95 07       	cpc	r25, r21
    3a7a:	69 f4       	brne	.+26     	; 0x3a96 <malloc+0x54>
    3a7c:	10 97       	sbiw	r26, 0x00	; 0
    3a7e:	31 f0       	breq	.+12     	; 0x3a8c <malloc+0x4a>
    3a80:	12 96       	adiw	r26, 0x02	; 2
    3a82:	0c 93       	st	X, r16
    3a84:	12 97       	sbiw	r26, 0x02	; 2
    3a86:	13 96       	adiw	r26, 0x03	; 3
    3a88:	1c 93       	st	X, r17
    3a8a:	27 c0       	rjmp	.+78     	; 0x3ada <malloc+0x98>
    3a8c:	00 93 13 06 	sts	0x0613, r16	; 0x800613 <__flp>
    3a90:	10 93 14 06 	sts	0x0614, r17	; 0x800614 <__flp+0x1>
    3a94:	22 c0       	rjmp	.+68     	; 0x3ada <malloc+0x98>
    3a96:	21 15       	cp	r18, r1
    3a98:	31 05       	cpc	r19, r1
    3a9a:	19 f0       	breq	.+6      	; 0x3aa2 <malloc+0x60>
    3a9c:	42 17       	cp	r20, r18
    3a9e:	53 07       	cpc	r21, r19
    3aa0:	18 f4       	brcc	.+6      	; 0x3aa8 <malloc+0x66>
    3aa2:	9a 01       	movw	r18, r20
    3aa4:	bd 01       	movw	r22, r26
    3aa6:	ef 01       	movw	r28, r30
    3aa8:	df 01       	movw	r26, r30
    3aaa:	f8 01       	movw	r30, r16
    3aac:	db cf       	rjmp	.-74     	; 0x3a64 <malloc+0x22>
    3aae:	21 15       	cp	r18, r1
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	f9 f0       	breq	.+62     	; 0x3af2 <malloc+0xb0>
    3ab4:	28 1b       	sub	r18, r24
    3ab6:	39 0b       	sbc	r19, r25
    3ab8:	24 30       	cpi	r18, 0x04	; 4
    3aba:	31 05       	cpc	r19, r1
    3abc:	80 f4       	brcc	.+32     	; 0x3ade <malloc+0x9c>
    3abe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac2:	61 15       	cp	r22, r1
    3ac4:	71 05       	cpc	r23, r1
    3ac6:	21 f0       	breq	.+8      	; 0x3ad0 <malloc+0x8e>
    3ac8:	fb 01       	movw	r30, r22
    3aca:	93 83       	std	Z+3, r25	; 0x03
    3acc:	82 83       	std	Z+2, r24	; 0x02
    3ace:	04 c0       	rjmp	.+8      	; 0x3ad8 <malloc+0x96>
    3ad0:	90 93 14 06 	sts	0x0614, r25	; 0x800614 <__flp+0x1>
    3ad4:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <__flp>
    3ad8:	fe 01       	movw	r30, r28
    3ada:	32 96       	adiw	r30, 0x02	; 2
    3adc:	44 c0       	rjmp	.+136    	; 0x3b66 <malloc+0x124>
    3ade:	fe 01       	movw	r30, r28
    3ae0:	e2 0f       	add	r30, r18
    3ae2:	f3 1f       	adc	r31, r19
    3ae4:	81 93       	st	Z+, r24
    3ae6:	91 93       	st	Z+, r25
    3ae8:	22 50       	subi	r18, 0x02	; 2
    3aea:	31 09       	sbc	r19, r1
    3aec:	39 83       	std	Y+1, r19	; 0x01
    3aee:	28 83       	st	Y, r18
    3af0:	3a c0       	rjmp	.+116    	; 0x3b66 <malloc+0x124>
    3af2:	20 91 11 06 	lds	r18, 0x0611	; 0x800611 <__brkval>
    3af6:	30 91 12 06 	lds	r19, 0x0612	; 0x800612 <__brkval+0x1>
    3afa:	23 2b       	or	r18, r19
    3afc:	41 f4       	brne	.+16     	; 0x3b0e <malloc+0xcc>
    3afe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3b02:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3b06:	30 93 12 06 	sts	0x0612, r19	; 0x800612 <__brkval+0x1>
    3b0a:	20 93 11 06 	sts	0x0611, r18	; 0x800611 <__brkval>
    3b0e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3b12:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3b16:	21 15       	cp	r18, r1
    3b18:	31 05       	cpc	r19, r1
    3b1a:	41 f4       	brne	.+16     	; 0x3b2c <malloc+0xea>
    3b1c:	2d b7       	in	r18, 0x3d	; 61
    3b1e:	3e b7       	in	r19, 0x3e	; 62
    3b20:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3b24:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3b28:	24 1b       	sub	r18, r20
    3b2a:	35 0b       	sbc	r19, r21
    3b2c:	e0 91 11 06 	lds	r30, 0x0611	; 0x800611 <__brkval>
    3b30:	f0 91 12 06 	lds	r31, 0x0612	; 0x800612 <__brkval+0x1>
    3b34:	e2 17       	cp	r30, r18
    3b36:	f3 07       	cpc	r31, r19
    3b38:	a0 f4       	brcc	.+40     	; 0x3b62 <malloc+0x120>
    3b3a:	2e 1b       	sub	r18, r30
    3b3c:	3f 0b       	sbc	r19, r31
    3b3e:	28 17       	cp	r18, r24
    3b40:	39 07       	cpc	r19, r25
    3b42:	78 f0       	brcs	.+30     	; 0x3b62 <malloc+0x120>
    3b44:	ac 01       	movw	r20, r24
    3b46:	4e 5f       	subi	r20, 0xFE	; 254
    3b48:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4a:	24 17       	cp	r18, r20
    3b4c:	35 07       	cpc	r19, r21
    3b4e:	48 f0       	brcs	.+18     	; 0x3b62 <malloc+0x120>
    3b50:	4e 0f       	add	r20, r30
    3b52:	5f 1f       	adc	r21, r31
    3b54:	50 93 12 06 	sts	0x0612, r21	; 0x800612 <__brkval+0x1>
    3b58:	40 93 11 06 	sts	0x0611, r20	; 0x800611 <__brkval>
    3b5c:	81 93       	st	Z+, r24
    3b5e:	91 93       	st	Z+, r25
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <malloc+0x124>
    3b62:	e0 e0       	ldi	r30, 0x00	; 0
    3b64:	f0 e0       	ldi	r31, 0x00	; 0
    3b66:	cf 01       	movw	r24, r30
    3b68:	df 91       	pop	r29
    3b6a:	cf 91       	pop	r28
    3b6c:	1f 91       	pop	r17
    3b6e:	0f 91       	pop	r16
    3b70:	08 95       	ret

00003b72 <free>:
    3b72:	cf 93       	push	r28
    3b74:	df 93       	push	r29
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <free+0xa>
    3b7a:	81 c0       	rjmp	.+258    	; 0x3c7e <free+0x10c>
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	32 97       	sbiw	r30, 0x02	; 2
    3b80:	13 82       	std	Z+3, r1	; 0x03
    3b82:	12 82       	std	Z+2, r1	; 0x02
    3b84:	a0 91 13 06 	lds	r26, 0x0613	; 0x800613 <__flp>
    3b88:	b0 91 14 06 	lds	r27, 0x0614	; 0x800614 <__flp+0x1>
    3b8c:	10 97       	sbiw	r26, 0x00	; 0
    3b8e:	81 f4       	brne	.+32     	; 0x3bb0 <free+0x3e>
    3b90:	20 81       	ld	r18, Z
    3b92:	31 81       	ldd	r19, Z+1	; 0x01
    3b94:	82 0f       	add	r24, r18
    3b96:	93 1f       	adc	r25, r19
    3b98:	20 91 11 06 	lds	r18, 0x0611	; 0x800611 <__brkval>
    3b9c:	30 91 12 06 	lds	r19, 0x0612	; 0x800612 <__brkval+0x1>
    3ba0:	28 17       	cp	r18, r24
    3ba2:	39 07       	cpc	r19, r25
    3ba4:	51 f5       	brne	.+84     	; 0x3bfa <free+0x88>
    3ba6:	f0 93 12 06 	sts	0x0612, r31	; 0x800612 <__brkval+0x1>
    3baa:	e0 93 11 06 	sts	0x0611, r30	; 0x800611 <__brkval>
    3bae:	67 c0       	rjmp	.+206    	; 0x3c7e <free+0x10c>
    3bb0:	ed 01       	movw	r28, r26
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	30 e0       	ldi	r19, 0x00	; 0
    3bb6:	ce 17       	cp	r28, r30
    3bb8:	df 07       	cpc	r29, r31
    3bba:	40 f4       	brcc	.+16     	; 0x3bcc <free+0x5a>
    3bbc:	4a 81       	ldd	r20, Y+2	; 0x02
    3bbe:	5b 81       	ldd	r21, Y+3	; 0x03
    3bc0:	9e 01       	movw	r18, r28
    3bc2:	41 15       	cp	r20, r1
    3bc4:	51 05       	cpc	r21, r1
    3bc6:	f1 f0       	breq	.+60     	; 0x3c04 <free+0x92>
    3bc8:	ea 01       	movw	r28, r20
    3bca:	f5 cf       	rjmp	.-22     	; 0x3bb6 <free+0x44>
    3bcc:	d3 83       	std	Z+3, r29	; 0x03
    3bce:	c2 83       	std	Z+2, r28	; 0x02
    3bd0:	40 81       	ld	r20, Z
    3bd2:	51 81       	ldd	r21, Z+1	; 0x01
    3bd4:	84 0f       	add	r24, r20
    3bd6:	95 1f       	adc	r25, r21
    3bd8:	c8 17       	cp	r28, r24
    3bda:	d9 07       	cpc	r29, r25
    3bdc:	59 f4       	brne	.+22     	; 0x3bf4 <free+0x82>
    3bde:	88 81       	ld	r24, Y
    3be0:	99 81       	ldd	r25, Y+1	; 0x01
    3be2:	84 0f       	add	r24, r20
    3be4:	95 1f       	adc	r25, r21
    3be6:	02 96       	adiw	r24, 0x02	; 2
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	80 83       	st	Z, r24
    3bec:	8a 81       	ldd	r24, Y+2	; 0x02
    3bee:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf0:	93 83       	std	Z+3, r25	; 0x03
    3bf2:	82 83       	std	Z+2, r24	; 0x02
    3bf4:	21 15       	cp	r18, r1
    3bf6:	31 05       	cpc	r19, r1
    3bf8:	29 f4       	brne	.+10     	; 0x3c04 <free+0x92>
    3bfa:	f0 93 14 06 	sts	0x0614, r31	; 0x800614 <__flp+0x1>
    3bfe:	e0 93 13 06 	sts	0x0613, r30	; 0x800613 <__flp>
    3c02:	3d c0       	rjmp	.+122    	; 0x3c7e <free+0x10c>
    3c04:	e9 01       	movw	r28, r18
    3c06:	fb 83       	std	Y+3, r31	; 0x03
    3c08:	ea 83       	std	Y+2, r30	; 0x02
    3c0a:	49 91       	ld	r20, Y+
    3c0c:	59 91       	ld	r21, Y+
    3c0e:	c4 0f       	add	r28, r20
    3c10:	d5 1f       	adc	r29, r21
    3c12:	ec 17       	cp	r30, r28
    3c14:	fd 07       	cpc	r31, r29
    3c16:	61 f4       	brne	.+24     	; 0x3c30 <free+0xbe>
    3c18:	80 81       	ld	r24, Z
    3c1a:	91 81       	ldd	r25, Z+1	; 0x01
    3c1c:	84 0f       	add	r24, r20
    3c1e:	95 1f       	adc	r25, r21
    3c20:	02 96       	adiw	r24, 0x02	; 2
    3c22:	e9 01       	movw	r28, r18
    3c24:	99 83       	std	Y+1, r25	; 0x01
    3c26:	88 83       	st	Y, r24
    3c28:	82 81       	ldd	r24, Z+2	; 0x02
    3c2a:	93 81       	ldd	r25, Z+3	; 0x03
    3c2c:	9b 83       	std	Y+3, r25	; 0x03
    3c2e:	8a 83       	std	Y+2, r24	; 0x02
    3c30:	e0 e0       	ldi	r30, 0x00	; 0
    3c32:	f0 e0       	ldi	r31, 0x00	; 0
    3c34:	12 96       	adiw	r26, 0x02	; 2
    3c36:	8d 91       	ld	r24, X+
    3c38:	9c 91       	ld	r25, X
    3c3a:	13 97       	sbiw	r26, 0x03	; 3
    3c3c:	00 97       	sbiw	r24, 0x00	; 0
    3c3e:	19 f0       	breq	.+6      	; 0x3c46 <free+0xd4>
    3c40:	fd 01       	movw	r30, r26
    3c42:	dc 01       	movw	r26, r24
    3c44:	f7 cf       	rjmp	.-18     	; 0x3c34 <free+0xc2>
    3c46:	8d 91       	ld	r24, X+
    3c48:	9c 91       	ld	r25, X
    3c4a:	11 97       	sbiw	r26, 0x01	; 1
    3c4c:	9d 01       	movw	r18, r26
    3c4e:	2e 5f       	subi	r18, 0xFE	; 254
    3c50:	3f 4f       	sbci	r19, 0xFF	; 255
    3c52:	82 0f       	add	r24, r18
    3c54:	93 1f       	adc	r25, r19
    3c56:	20 91 11 06 	lds	r18, 0x0611	; 0x800611 <__brkval>
    3c5a:	30 91 12 06 	lds	r19, 0x0612	; 0x800612 <__brkval+0x1>
    3c5e:	28 17       	cp	r18, r24
    3c60:	39 07       	cpc	r19, r25
    3c62:	69 f4       	brne	.+26     	; 0x3c7e <free+0x10c>
    3c64:	30 97       	sbiw	r30, 0x00	; 0
    3c66:	29 f4       	brne	.+10     	; 0x3c72 <free+0x100>
    3c68:	10 92 14 06 	sts	0x0614, r1	; 0x800614 <__flp+0x1>
    3c6c:	10 92 13 06 	sts	0x0613, r1	; 0x800613 <__flp>
    3c70:	02 c0       	rjmp	.+4      	; 0x3c76 <free+0x104>
    3c72:	13 82       	std	Z+3, r1	; 0x03
    3c74:	12 82       	std	Z+2, r1	; 0x02
    3c76:	b0 93 12 06 	sts	0x0612, r27	; 0x800612 <__brkval+0x1>
    3c7a:	a0 93 11 06 	sts	0x0611, r26	; 0x800611 <__brkval>
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	08 95       	ret

00003c84 <strtoul>:
    3c84:	a0 e0       	ldi	r26, 0x00	; 0
    3c86:	b0 e0       	ldi	r27, 0x00	; 0
    3c88:	e8 e4       	ldi	r30, 0x48	; 72
    3c8a:	fe e1       	ldi	r31, 0x1E	; 30
    3c8c:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__prologue_saves__+0x2>
    3c90:	5c 01       	movw	r10, r24
    3c92:	6b 01       	movw	r12, r22
    3c94:	7a 01       	movw	r14, r20
    3c96:	61 15       	cp	r22, r1
    3c98:	71 05       	cpc	r23, r1
    3c9a:	19 f0       	breq	.+6      	; 0x3ca2 <strtoul+0x1e>
    3c9c:	fb 01       	movw	r30, r22
    3c9e:	91 83       	std	Z+1, r25	; 0x01
    3ca0:	80 83       	st	Z, r24
    3ca2:	e1 14       	cp	r14, r1
    3ca4:	f1 04       	cpc	r15, r1
    3ca6:	29 f0       	breq	.+10     	; 0x3cb2 <strtoul+0x2e>
    3ca8:	c7 01       	movw	r24, r14
    3caa:	02 97       	sbiw	r24, 0x02	; 2
    3cac:	83 97       	sbiw	r24, 0x23	; 35
    3cae:	08 f0       	brcs	.+2      	; 0x3cb2 <strtoul+0x2e>
    3cb0:	c9 c0       	rjmp	.+402    	; 0x3e44 <strtoul+0x1c0>
    3cb2:	e5 01       	movw	r28, r10
    3cb4:	21 96       	adiw	r28, 0x01	; 1
    3cb6:	f5 01       	movw	r30, r10
    3cb8:	10 81       	ld	r17, Z
    3cba:	81 2f       	mov	r24, r17
    3cbc:	90 e0       	ldi	r25, 0x00	; 0
    3cbe:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <isspace>
    3cc2:	89 2b       	or	r24, r25
    3cc4:	11 f0       	breq	.+4      	; 0x3cca <strtoul+0x46>
    3cc6:	5e 01       	movw	r10, r28
    3cc8:	f4 cf       	rjmp	.-24     	; 0x3cb2 <strtoul+0x2e>
    3cca:	1d 32       	cpi	r17, 0x2D	; 45
    3ccc:	29 f4       	brne	.+10     	; 0x3cd8 <strtoul+0x54>
    3cce:	21 96       	adiw	r28, 0x01	; 1
    3cd0:	f5 01       	movw	r30, r10
    3cd2:	11 81       	ldd	r17, Z+1	; 0x01
    3cd4:	01 e0       	ldi	r16, 0x01	; 1
    3cd6:	07 c0       	rjmp	.+14     	; 0x3ce6 <strtoul+0x62>
    3cd8:	1b 32       	cpi	r17, 0x2B	; 43
    3cda:	21 f4       	brne	.+8      	; 0x3ce4 <strtoul+0x60>
    3cdc:	e5 01       	movw	r28, r10
    3cde:	22 96       	adiw	r28, 0x02	; 2
    3ce0:	f5 01       	movw	r30, r10
    3ce2:	11 81       	ldd	r17, Z+1	; 0x01
    3ce4:	00 e0       	ldi	r16, 0x00	; 0
    3ce6:	e1 14       	cp	r14, r1
    3ce8:	f1 04       	cpc	r15, r1
    3cea:	b1 f0       	breq	.+44     	; 0x3d18 <strtoul+0x94>
    3cec:	f0 e1       	ldi	r31, 0x10	; 16
    3cee:	ef 16       	cp	r14, r31
    3cf0:	f1 04       	cpc	r15, r1
    3cf2:	29 f4       	brne	.+10     	; 0x3cfe <strtoul+0x7a>
    3cf4:	b0 c0       	rjmp	.+352    	; 0x3e56 <strtoul+0x1d2>
    3cf6:	10 e3       	ldi	r17, 0x30	; 48
    3cf8:	e1 14       	cp	r14, r1
    3cfa:	f1 04       	cpc	r15, r1
    3cfc:	01 f1       	breq	.+64     	; 0x3d3e <strtoul+0xba>
    3cfe:	2a e0       	ldi	r18, 0x0A	; 10
    3d00:	e2 16       	cp	r14, r18
    3d02:	f1 04       	cpc	r15, r1
    3d04:	b1 f1       	breq	.+108    	; 0x3d72 <strtoul+0xee>
    3d06:	80 e1       	ldi	r24, 0x10	; 16
    3d08:	e8 16       	cp	r14, r24
    3d0a:	f1 04       	cpc	r15, r1
    3d0c:	71 f0       	breq	.+28     	; 0x3d2a <strtoul+0xa6>
    3d0e:	e8 e0       	ldi	r30, 0x08	; 8
    3d10:	ee 16       	cp	r14, r30
    3d12:	f1 04       	cpc	r15, r1
    3d14:	f1 f4       	brne	.+60     	; 0x3d52 <strtoul+0xce>
    3d16:	13 c0       	rjmp	.+38     	; 0x3d3e <strtoul+0xba>
    3d18:	10 33       	cpi	r17, 0x30	; 48
    3d1a:	41 f5       	brne	.+80     	; 0x3d6c <strtoul+0xe8>
    3d1c:	88 81       	ld	r24, Y
    3d1e:	8f 7d       	andi	r24, 0xDF	; 223
    3d20:	88 35       	cpi	r24, 0x58	; 88
    3d22:	49 f7       	brne	.-46     	; 0x3cf6 <strtoul+0x72>
    3d24:	19 81       	ldd	r17, Y+1	; 0x01
    3d26:	22 96       	adiw	r28, 0x02	; 2
    3d28:	02 60       	ori	r16, 0x02	; 2
    3d2a:	f0 e1       	ldi	r31, 0x10	; 16
    3d2c:	ef 2e       	mov	r14, r31
    3d2e:	f1 2c       	mov	r15, r1
    3d30:	88 24       	eor	r8, r8
    3d32:	8a 94       	dec	r8
    3d34:	98 2c       	mov	r9, r8
    3d36:	a8 2c       	mov	r10, r8
    3d38:	af e0       	ldi	r26, 0x0F	; 15
    3d3a:	ba 2e       	mov	r11, r26
    3d3c:	20 c0       	rjmp	.+64     	; 0x3d7e <strtoul+0xfa>
    3d3e:	78 e0       	ldi	r23, 0x08	; 8
    3d40:	e7 2e       	mov	r14, r23
    3d42:	f1 2c       	mov	r15, r1
    3d44:	88 24       	eor	r8, r8
    3d46:	8a 94       	dec	r8
    3d48:	98 2c       	mov	r9, r8
    3d4a:	a8 2c       	mov	r10, r8
    3d4c:	ef e1       	ldi	r30, 0x1F	; 31
    3d4e:	be 2e       	mov	r11, r30
    3d50:	16 c0       	rjmp	.+44     	; 0x3d7e <strtoul+0xfa>
    3d52:	6f ef       	ldi	r22, 0xFF	; 255
    3d54:	7f ef       	ldi	r23, 0xFF	; 255
    3d56:	cb 01       	movw	r24, r22
    3d58:	97 01       	movw	r18, r14
    3d5a:	0f 2c       	mov	r0, r15
    3d5c:	00 0c       	add	r0, r0
    3d5e:	44 0b       	sbc	r20, r20
    3d60:	55 0b       	sbc	r21, r21
    3d62:	0e 94 df 1c 	call	0x39be	; 0x39be <__udivmodsi4>
    3d66:	49 01       	movw	r8, r18
    3d68:	5a 01       	movw	r10, r20
    3d6a:	09 c0       	rjmp	.+18     	; 0x3d7e <strtoul+0xfa>
    3d6c:	8a e0       	ldi	r24, 0x0A	; 10
    3d6e:	e8 2e       	mov	r14, r24
    3d70:	f1 2c       	mov	r15, r1
    3d72:	69 e9       	ldi	r22, 0x99	; 153
    3d74:	86 2e       	mov	r8, r22
    3d76:	98 2c       	mov	r9, r8
    3d78:	a8 2c       	mov	r10, r8
    3d7a:	69 e1       	ldi	r22, 0x19	; 25
    3d7c:	b6 2e       	mov	r11, r22
    3d7e:	40 e0       	ldi	r20, 0x00	; 0
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	cb 01       	movw	r24, r22
    3d86:	27 01       	movw	r4, r14
    3d88:	0f 2c       	mov	r0, r15
    3d8a:	00 0c       	add	r0, r0
    3d8c:	66 08       	sbc	r6, r6
    3d8e:	77 08       	sbc	r7, r7
    3d90:	fe 01       	movw	r30, r28
    3d92:	50 ed       	ldi	r21, 0xD0	; 208
    3d94:	35 2e       	mov	r3, r21
    3d96:	31 0e       	add	r3, r17
    3d98:	29 e0       	ldi	r18, 0x09	; 9
    3d9a:	23 15       	cp	r18, r3
    3d9c:	70 f4       	brcc	.+28     	; 0x3dba <strtoul+0x136>
    3d9e:	2f eb       	ldi	r18, 0xBF	; 191
    3da0:	21 0f       	add	r18, r17
    3da2:	2a 31       	cpi	r18, 0x1A	; 26
    3da4:	18 f4       	brcc	.+6      	; 0x3dac <strtoul+0x128>
    3da6:	39 ec       	ldi	r19, 0xC9	; 201
    3da8:	33 2e       	mov	r3, r19
    3daa:	06 c0       	rjmp	.+12     	; 0x3db8 <strtoul+0x134>
    3dac:	2f e9       	ldi	r18, 0x9F	; 159
    3dae:	21 0f       	add	r18, r17
    3db0:	2a 31       	cpi	r18, 0x1A	; 26
    3db2:	30 f5       	brcc	.+76     	; 0x3e00 <strtoul+0x17c>
    3db4:	29 ea       	ldi	r18, 0xA9	; 169
    3db6:	32 2e       	mov	r3, r18
    3db8:	31 0e       	add	r3, r17
    3dba:	23 2d       	mov	r18, r3
    3dbc:	30 e0       	ldi	r19, 0x00	; 0
    3dbe:	2e 15       	cp	r18, r14
    3dc0:	3f 05       	cpc	r19, r15
    3dc2:	f4 f4       	brge	.+60     	; 0x3e00 <strtoul+0x17c>
    3dc4:	4f 3f       	cpi	r20, 0xFF	; 255
    3dc6:	c9 f0       	breq	.+50     	; 0x3dfa <strtoul+0x176>
    3dc8:	86 16       	cp	r8, r22
    3dca:	97 06       	cpc	r9, r23
    3dcc:	a8 06       	cpc	r10, r24
    3dce:	b9 06       	cpc	r11, r25
    3dd0:	88 f0       	brcs	.+34     	; 0x3df4 <strtoul+0x170>
    3dd2:	a3 01       	movw	r20, r6
    3dd4:	92 01       	movw	r18, r4
    3dd6:	0e 94 cf 1c 	call	0x399e	; 0x399e <__mulsi3>
    3dda:	23 2d       	mov	r18, r3
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e0       	ldi	r20, 0x00	; 0
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	62 0f       	add	r22, r18
    3de4:	73 1f       	adc	r23, r19
    3de6:	84 1f       	adc	r24, r20
    3de8:	95 1f       	adc	r25, r21
    3dea:	62 17       	cp	r22, r18
    3dec:	73 07       	cpc	r23, r19
    3dee:	84 07       	cpc	r24, r20
    3df0:	95 07       	cpc	r25, r21
    3df2:	10 f4       	brcc	.+4      	; 0x3df8 <strtoul+0x174>
    3df4:	4f ef       	ldi	r20, 0xFF	; 255
    3df6:	01 c0       	rjmp	.+2      	; 0x3dfa <strtoul+0x176>
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	21 96       	adiw	r28, 0x01	; 1
    3dfc:	10 81       	ld	r17, Z
    3dfe:	c8 cf       	rjmp	.-112    	; 0x3d90 <strtoul+0x10c>
    3e00:	c1 14       	cp	r12, r1
    3e02:	d1 04       	cpc	r13, r1
    3e04:	51 f0       	breq	.+20     	; 0x3e1a <strtoul+0x196>
    3e06:	44 23       	and	r20, r20
    3e08:	11 f0       	breq	.+4      	; 0x3e0e <strtoul+0x18a>
    3e0a:	21 97       	sbiw	r28, 0x01	; 1
    3e0c:	03 c0       	rjmp	.+6      	; 0x3e14 <strtoul+0x190>
    3e0e:	01 ff       	sbrs	r16, 1
    3e10:	04 c0       	rjmp	.+8      	; 0x3e1a <strtoul+0x196>
    3e12:	22 97       	sbiw	r28, 0x02	; 2
    3e14:	f6 01       	movw	r30, r12
    3e16:	d1 83       	std	Z+1, r29	; 0x01
    3e18:	c0 83       	st	Z, r28
    3e1a:	00 ff       	sbrs	r16, 0
    3e1c:	07 c0       	rjmp	.+14     	; 0x3e2c <strtoul+0x1a8>
    3e1e:	90 95       	com	r25
    3e20:	80 95       	com	r24
    3e22:	70 95       	com	r23
    3e24:	61 95       	neg	r22
    3e26:	7f 4f       	sbci	r23, 0xFF	; 255
    3e28:	8f 4f       	sbci	r24, 0xFF	; 255
    3e2a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2c:	4f 3f       	cpi	r20, 0xFF	; 255
    3e2e:	79 f4       	brne	.+30     	; 0x3e4e <strtoul+0x1ca>
    3e30:	82 e2       	ldi	r24, 0x22	; 34
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	90 93 16 06 	sts	0x0616, r25	; 0x800616 <errno+0x1>
    3e38:	80 93 15 06 	sts	0x0615, r24	; 0x800615 <errno>
    3e3c:	3f ef       	ldi	r19, 0xFF	; 255
    3e3e:	2f ef       	ldi	r18, 0xFF	; 255
    3e40:	9f ef       	ldi	r25, 0xFF	; 255
    3e42:	0d c0       	rjmp	.+26     	; 0x3e5e <strtoul+0x1da>
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	08 c0       	rjmp	.+16     	; 0x3e5e <strtoul+0x1da>
    3e4e:	46 2f       	mov	r20, r22
    3e50:	37 2f       	mov	r19, r23
    3e52:	28 2f       	mov	r18, r24
    3e54:	04 c0       	rjmp	.+8      	; 0x3e5e <strtoul+0x1da>
    3e56:	10 33       	cpi	r17, 0x30	; 48
    3e58:	09 f0       	breq	.+2      	; 0x3e5c <strtoul+0x1d8>
    3e5a:	67 cf       	rjmp	.-306    	; 0x3d2a <strtoul+0xa6>
    3e5c:	5f cf       	rjmp	.-322    	; 0x3d1c <strtoul+0x98>
    3e5e:	64 2f       	mov	r22, r20
    3e60:	73 2f       	mov	r23, r19
    3e62:	82 2f       	mov	r24, r18
    3e64:	cd b7       	in	r28, 0x3d	; 61
    3e66:	de b7       	in	r29, 0x3e	; 62
    3e68:	e1 e1       	ldi	r30, 0x11	; 17
    3e6a:	0c 94 87 1f 	jmp	0x3f0e	; 0x3f0e <__epilogue_restores__+0x2>

00003e6e <isspace>:
    3e6e:	91 11       	cpse	r25, r1
    3e70:	0c 94 67 1f 	jmp	0x3ece	; 0x3ece <__ctype_isfalse>
    3e74:	80 32       	cpi	r24, 0x20	; 32
    3e76:	19 f0       	breq	.+6      	; 0x3e7e <isspace+0x10>
    3e78:	89 50       	subi	r24, 0x09	; 9
    3e7a:	85 50       	subi	r24, 0x05	; 5
    3e7c:	c8 f7       	brcc	.-14     	; 0x3e70 <isspace+0x2>
    3e7e:	08 95       	ret

00003e80 <memcmp>:
    3e80:	fb 01       	movw	r30, r22
    3e82:	dc 01       	movw	r26, r24
    3e84:	04 c0       	rjmp	.+8      	; 0x3e8e <memcmp+0xe>
    3e86:	8d 91       	ld	r24, X+
    3e88:	01 90       	ld	r0, Z+
    3e8a:	80 19       	sub	r24, r0
    3e8c:	21 f4       	brne	.+8      	; 0x3e96 <memcmp+0x16>
    3e8e:	41 50       	subi	r20, 0x01	; 1
    3e90:	50 40       	sbci	r21, 0x00	; 0
    3e92:	c8 f7       	brcc	.-14     	; 0x3e86 <memcmp+0x6>
    3e94:	88 1b       	sub	r24, r24
    3e96:	99 0b       	sbc	r25, r25
    3e98:	08 95       	ret

00003e9a <strchr>:
    3e9a:	fc 01       	movw	r30, r24
    3e9c:	81 91       	ld	r24, Z+
    3e9e:	86 17       	cp	r24, r22
    3ea0:	21 f0       	breq	.+8      	; 0x3eaa <strchr+0x10>
    3ea2:	88 23       	and	r24, r24
    3ea4:	d9 f7       	brne	.-10     	; 0x3e9c <strchr+0x2>
    3ea6:	99 27       	eor	r25, r25
    3ea8:	08 95       	ret
    3eaa:	31 97       	sbiw	r30, 0x01	; 1
    3eac:	cf 01       	movw	r24, r30
    3eae:	08 95       	ret

00003eb0 <strncpy>:
    3eb0:	fb 01       	movw	r30, r22
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	41 50       	subi	r20, 0x01	; 1
    3eb6:	50 40       	sbci	r21, 0x00	; 0
    3eb8:	48 f0       	brcs	.+18     	; 0x3ecc <strncpy+0x1c>
    3eba:	01 90       	ld	r0, Z+
    3ebc:	0d 92       	st	X+, r0
    3ebe:	00 20       	and	r0, r0
    3ec0:	c9 f7       	brne	.-14     	; 0x3eb4 <strncpy+0x4>
    3ec2:	01 c0       	rjmp	.+2      	; 0x3ec6 <strncpy+0x16>
    3ec4:	1d 92       	st	X+, r1
    3ec6:	41 50       	subi	r20, 0x01	; 1
    3ec8:	50 40       	sbci	r21, 0x00	; 0
    3eca:	e0 f7       	brcc	.-8      	; 0x3ec4 <strncpy+0x14>
    3ecc:	08 95       	ret

00003ece <__ctype_isfalse>:
    3ece:	99 27       	eor	r25, r25
    3ed0:	88 27       	eor	r24, r24

00003ed2 <__ctype_istrue>:
    3ed2:	08 95       	ret

00003ed4 <__prologue_saves__>:
    3ed4:	2f 92       	push	r2
    3ed6:	3f 92       	push	r3
    3ed8:	4f 92       	push	r4
    3eda:	5f 92       	push	r5
    3edc:	6f 92       	push	r6
    3ede:	7f 92       	push	r7
    3ee0:	8f 92       	push	r8
    3ee2:	9f 92       	push	r9
    3ee4:	af 92       	push	r10
    3ee6:	bf 92       	push	r11
    3ee8:	cf 92       	push	r12
    3eea:	df 92       	push	r13
    3eec:	ef 92       	push	r14
    3eee:	ff 92       	push	r15
    3ef0:	0f 93       	push	r16
    3ef2:	1f 93       	push	r17
    3ef4:	cf 93       	push	r28
    3ef6:	df 93       	push	r29
    3ef8:	cd b7       	in	r28, 0x3d	; 61
    3efa:	de b7       	in	r29, 0x3e	; 62
    3efc:	ca 1b       	sub	r28, r26
    3efe:	db 0b       	sbc	r29, r27
    3f00:	0f b6       	in	r0, 0x3f	; 63
    3f02:	f8 94       	cli
    3f04:	de bf       	out	0x3e, r29	; 62
    3f06:	0f be       	out	0x3f, r0	; 63
    3f08:	cd bf       	out	0x3d, r28	; 61
    3f0a:	09 94       	ijmp

00003f0c <__epilogue_restores__>:
    3f0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3f0e:	39 88       	ldd	r3, Y+17	; 0x11
    3f10:	48 88       	ldd	r4, Y+16	; 0x10
    3f12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3f20:	c8 84       	ldd	r12, Y+8	; 0x08
    3f22:	df 80       	ldd	r13, Y+7	; 0x07
    3f24:	ee 80       	ldd	r14, Y+6	; 0x06
    3f26:	fd 80       	ldd	r15, Y+5	; 0x05
    3f28:	0c 81       	ldd	r16, Y+4	; 0x04
    3f2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3f2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3f2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3f30:	ce 0f       	add	r28, r30
    3f32:	d1 1d       	adc	r29, r1
    3f34:	0f b6       	in	r0, 0x3f	; 63
    3f36:	f8 94       	cli
    3f38:	de bf       	out	0x3e, r29	; 62
    3f3a:	0f be       	out	0x3f, r0	; 63
    3f3c:	cd bf       	out	0x3d, r28	; 61
    3f3e:	ed 01       	movw	r28, r26
    3f40:	08 95       	ret

00003f42 <abort>:
    3f42:	81 e0       	ldi	r24, 0x01	; 1
    3f44:	90 e0       	ldi	r25, 0x00	; 0
    3f46:	f8 94       	cli
    3f48:	0c 94 a6 1f 	jmp	0x3f4c	; 0x3f4c <_exit>

00003f4c <_exit>:
    3f4c:	f8 94       	cli

00003f4e <__stop_program>:
    3f4e:	ff cf       	rjmp	.-2      	; 0x3f4e <__stop_program>
