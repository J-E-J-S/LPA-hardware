
firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00003eb8  00003f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ef  00800150  00800150  00003f9c  2**0
                  ALLOC
  3 .comment      0000006d  00000000  00000000  00003f9c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a8  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001ef7a  00000000  00000000  000047f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004621  00000000  00000000  0002376a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005516  00000000  00000000  00027d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001e34  00000000  00000000  0002d2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004e82  00000000  00000000  0002f0d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000d109  00000000  00000000  00033f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b48  00000000  00000000  00041063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 9e 18 	jmp	0x313c	; 0x313c <__vector_7>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <__vector_11>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 88 19 	jmp	0x3310	; 0x3310 <__vector_16>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__vector_18>
      4c:	0c 94 7d 1b 	jmp	0x36fa	; 0x36fa <__vector_19>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	08 13       	cpse	r16, r24
      6a:	0d 13       	cpse	r16, r29
      6c:	15 13       	cpse	r17, r21
      6e:	1b 13       	cpse	r17, r27
      70:	1d 13       	cpse	r17, r29
      72:	27 13       	cpse	r18, r23
      74:	2d 13       	cpse	r18, r29
      76:	31 13       	cpse	r19, r17

00000078 <__trampolines_end>:
      78:	7c 3c       	cpi	r23, 0xCC	; 204
      7a:	3e 5e       	subi	r19, 0xEE	; 238
      7c:	2b 3d       	cpi	r18, 0xDB	; 219
      7e:	3f 2f       	mov	r19, r31
      80:	5b 5d       	subi	r21, 0xDB	; 219
      82:	3b 2c       	mov	r3, r11
      84:	2a 22       	and	r2, r26
      86:	5c 00       	.word	0x005c	; ????

00000088 <_ZL12well2channel>:
      88:	0f 0e 00 01 1f 1e 10 11 2f 2e 20 21 0d 0c 02 03     ......../. !....
      98:	1d 1c 12 13 2d 2c 22 23 0b 0a 04 05 1b 1a 14 15     ....-,"#........
      a8:	2b 2a 24 25 09 08 06 07 19 18 16 17 29 28 26 27     +*$%........)(&'

000000b8 <digital_pin_to_timer_PGM>:
      b8:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      c8:	00 00 00 00                                         ....

000000cc <digital_pin_to_bit_mask_PGM>:
      cc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      dc:	04 08 10 20                                         ... 

000000e0 <digital_pin_to_port_PGM>:
      e0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      f0:	03 03 03 03                                         ....

000000f4 <port_to_output_PGM>:
      f4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fe <port_to_mode_PGM>:
      fe:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000108 <__ctors_start>:
     108:	cc 03       	fmulsu	r20, r20
     10a:	13 07       	cpc	r17, r19
     10c:	a3 1b       	sub	r26, r19

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d8 e0       	ldi	r29, 0x08	; 8
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e8 eb       	ldi	r30, 0xB8	; 184
     122:	fe e3       	ldi	r31, 0x3E	; 62
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x10>
     126:	05 90       	lpm	r0, Z+
     128:	0d 92       	st	X+, r0
     12a:	a0 35       	cpi	r26, 0x50	; 80
     12c:	b1 07       	cpc	r27, r17
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0xc>

00000130 <__do_clear_bss>:
     130:	25 e0       	ldi	r18, 0x05	; 5
     132:	a0 e5       	ldi	r26, 0x50	; 80
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
     13a:	af 33       	cpi	r26, 0x3F	; 63
     13c:	b2 07       	cpc	r27, r18
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>

00000140 <__do_global_ctors>:
     140:	10 e0       	ldi	r17, 0x00	; 0
     142:	c7 e8       	ldi	r28, 0x87	; 135
     144:	d0 e0       	ldi	r29, 0x00	; 0
     146:	04 c0       	rjmp	.+8      	; 0x150 <__do_global_ctors+0x10>
     148:	21 97       	sbiw	r28, 0x01	; 1
     14a:	fe 01       	movw	r30, r28
     14c:	0e 94 91 1c 	call	0x3922	; 0x3922 <__tablejump2__>
     150:	c4 38       	cpi	r28, 0x84	; 132
     152:	d1 07       	cpc	r29, r17
     154:	c9 f7       	brne	.-14     	; 0x148 <__do_global_ctors+0x8>
     156:	0e 94 ee 13 	call	0x27dc	; 0x27dc <main>
     15a:	0c 94 5a 1f 	jmp	0x3eb4	; 0x3eb4 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
     162:	cf 93       	push	r28
  uint8_t sreg = SREG;
     164:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
     166:	f8 94       	cli
  if (!initialized) {
     168:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZN8SPIClass11initializedE>
     16c:	81 11       	cpse	r24, r1
     16e:	27 c0       	rjmp	.+78     	; 0x1be <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
     170:	ea ee       	ldi	r30, 0xEA	; 234
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
     176:	e6 ed       	ldi	r30, 0xD6	; 214
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
     17c:	e8 2f       	mov	r30, r24
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	ee 0f       	add	r30, r30
     182:	ff 1f       	adc	r31, r31
     184:	e2 50       	subi	r30, 0x02	; 2
     186:	ff 4f       	sbci	r31, 0xFF	; 255
     188:	a5 91       	lpm	r26, Z+
     18a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
     18c:	ec 91       	ld	r30, X
     18e:	e9 23       	and	r30, r25
     190:	21 f4       	brne	.+8      	; 0x19a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
     192:	61 e0       	ldi	r22, 0x01	; 1
     194:	8a e0       	ldi	r24, 0x0A	; 10
     196:	0e 94 40 1a 	call	0x3480	; 0x3480 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	8a e0       	ldi	r24, 0x0A	; 10
     19e:	0e 94 07 1a 	call	0x340e	; 0x340e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
     1a2:	8c b5       	in	r24, 0x2c	; 44
     1a4:	80 61       	ori	r24, 0x10	; 16
     1a6:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
     1a8:	8c b5       	in	r24, 0x2c	; 44
     1aa:	80 64       	ori	r24, 0x40	; 64
     1ac:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
     1ae:	61 e0       	ldi	r22, 0x01	; 1
     1b0:	8d e0       	ldi	r24, 0x0D	; 13
     1b2:	0e 94 07 1a 	call	0x340e	; 0x340e <pinMode>
    pinMode(MOSI, OUTPUT);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	8b e0       	ldi	r24, 0x0B	; 11
     1ba:	0e 94 07 1a 	call	0x340e	; 0x340e <pinMode>
  }
  initialized++; // reference count
     1be:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_ZN8SPIClass11initializedE>
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_ZN8SPIClass11initializedE>
  SREG = sreg;
     1c8:	cf bf       	out	0x3f, r28	; 63
}
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <_ZN4File5writeEh>:
// buffered read for more efficient, high speed reading
int File::read(void *buf, uint16_t nbyte) {
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}
     1ce:	cf 93       	push	r28
     1d0:	df 93       	push	r29
     1d2:	1f 92       	push	r1
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
     1d8:	69 83       	std	Y+1, r22	; 0x01
     1da:	dc 01       	movw	r26, r24
     1dc:	ed 91       	ld	r30, X+
     1de:	fc 91       	ld	r31, X
     1e0:	02 80       	ldd	r0, Z+2	; 0x02
     1e2:	f3 81       	ldd	r31, Z+3	; 0x03
     1e4:	e0 2d       	mov	r30, r0
     1e6:	41 e0       	ldi	r20, 0x01	; 1
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	be 01       	movw	r22, r28
     1ec:	6f 5f       	subi	r22, 0xFF	; 255
     1ee:	7f 4f       	sbci	r23, 0xFF	; 255
     1f0:	09 95       	icall
     1f2:	0f 90       	pop	r0
     1f4:	df 91       	pop	r29
     1f6:	cf 91       	pop	r28
     1f8:	08 95       	ret

000001fa <_ZN4File5writeEPKhj>:
     1fa:	cf 93       	push	r28
     1fc:	df 93       	push	r29
     1fe:	ec 01       	movw	r28, r24
     200:	89 8d       	ldd	r24, Y+25	; 0x19
     202:	9a 8d       	ldd	r25, Y+26	; 0x1a
     204:	00 97       	sbiw	r24, 0x00	; 0
     206:	39 f4       	brne	.+14     	; 0x216 <_ZN4File5writeEPKhj+0x1c>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	9b 83       	std	Y+3, r25	; 0x03
     20e:	8a 83       	std	Y+2, r24	; 0x02
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	0b c0       	rjmp	.+22     	; 0x22c <_ZN4File5writeEPKhj+0x32>
     216:	fc 01       	movw	r30, r24
     218:	13 82       	std	Z+3, r1	; 0x03
     21a:	12 82       	std	Z+2, r1	; 0x02
     21c:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN6SdFile5writeEPKvj>
     220:	e9 8d       	ldd	r30, Y+25	; 0x19
     222:	fa 8d       	ldd	r31, Y+26	; 0x1a
     224:	22 81       	ldd	r18, Z+2	; 0x02
     226:	33 81       	ldd	r19, Z+3	; 0x03
     228:	23 2b       	or	r18, r19
     22a:	71 f7       	brne	.-36     	; 0x208 <_ZN4File5writeEPKhj+0xe>
     22c:	df 91       	pop	r29
     22e:	cf 91       	pop	r28
     230:	08 95       	ret

00000232 <_ZN4File5flushEv>:
     232:	fc 01       	movw	r30, r24
     234:	81 8d       	ldd	r24, Z+25	; 0x19
     236:	92 8d       	ldd	r25, Z+26	; 0x1a
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	11 f0       	breq	.+4      	; 0x240 <_ZN4File5flushEv+0xe>
     23c:	0c 94 27 0a 	jmp	0x144e	; 0x144e <_ZN6SdFile4syncEv>
     240:	08 95       	ret

00000242 <_ZN6SdFile4readEv>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	1f 92       	push	r1
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	50 e0       	ldi	r21, 0x00	; 0
     250:	be 01       	movw	r22, r28
     252:	6f 5f       	subi	r22, 0xFF	; 255
     254:	7f 4f       	sbci	r23, 0xFF	; 255
     256:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN6SdFile4readEPvj>
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	19 f4       	brne	.+6      	; 0x264 <_ZN6SdFile4readEv+0x22>
     25e:	89 81       	ldd	r24, Y+1	; 0x01
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	02 c0       	rjmp	.+4      	; 0x268 <_ZN6SdFile4readEv+0x26>
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	9f ef       	ldi	r25, 0xFF	; 255
     268:	0f 90       	pop	r0
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <_ZN4File4readEv>:
     270:	fc 01       	movw	r30, r24
     272:	81 8d       	ldd	r24, Z+25	; 0x19
     274:	92 8d       	ldd	r25, Z+26	; 0x1a
     276:	00 97       	sbiw	r24, 0x00	; 0
     278:	11 f0       	breq	.+4      	; 0x27e <_ZN4File4readEv+0xe>
     27a:	0c 94 21 01 	jmp	0x242	; 0x242 <_ZN6SdFile4readEv>
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	9f ef       	ldi	r25, 0xFF	; 255
     282:	08 95       	ret

00000284 <_ZN4File4peekEv>:
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	fc 01       	movw	r30, r24
     28e:	81 8d       	ldd	r24, Z+25	; 0x19
     290:	92 8d       	ldd	r25, Z+26	; 0x1a
     292:	00 97       	sbiw	r24, 0x00	; 0
     294:	b9 f0       	breq	.+46     	; 0x2c4 <_ZN4File4peekEv+0x40>
     296:	ef 01       	movw	r28, r30
     298:	0e 94 21 01 	call	0x242	; 0x242 <_ZN6SdFile4readEv>
     29c:	8c 01       	movw	r16, r24
     29e:	0f 3f       	cpi	r16, 0xFF	; 255
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	18 07       	cpc	r17, r24
     2a4:	91 f0       	breq	.+36     	; 0x2ca <_ZN4File4peekEv+0x46>
     2a6:	89 8d       	ldd	r24, Y+25	; 0x19
     2a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2aa:	fc 01       	movw	r30, r24
     2ac:	42 85       	ldd	r20, Z+10	; 0x0a
     2ae:	53 85       	ldd	r21, Z+11	; 0x0b
     2b0:	64 85       	ldd	r22, Z+12	; 0x0c
     2b2:	75 85       	ldd	r23, Z+13	; 0x0d
     2b4:	41 50       	subi	r20, 0x01	; 1
     2b6:	51 09       	sbc	r21, r1
     2b8:	61 09       	sbc	r22, r1
     2ba:	71 09       	sbc	r23, r1
     2bc:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6SdFile7seekSetEm>
     2c0:	c8 01       	movw	r24, r16
     2c2:	05 c0       	rjmp	.+10     	; 0x2ce <_ZN4File4peekEv+0x4a>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <_ZN4File4peekEv+0x4a>
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <_ZN4FileC1E6SdFilePKc>:
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ec 01       	movw	r28, r24
     2e6:	7b 01       	movw	r14, r22
     2e8:	8a 01       	movw	r16, r20
     2ea:	1b 82       	std	Y+3, r1	; 0x03
     2ec:	1a 82       	std	Y+2, r1	; 0x02
     2ee:	88 ee       	ldi	r24, 0xE8	; 232
     2f0:	93 e0       	ldi	r25, 0x03	; 3
     2f2:	a0 e0       	ldi	r26, 0x00	; 0
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	8c 83       	std	Y+4, r24	; 0x04
     2f8:	9d 83       	std	Y+5, r25	; 0x05
     2fa:	ae 83       	std	Y+6, r26	; 0x06
     2fc:	bf 83       	std	Y+7, r27	; 0x07
     2fe:	8e e0       	ldi	r24, 0x0E	; 14
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	99 83       	std	Y+1, r25	; 0x01
     304:	88 83       	st	Y, r24
     306:	8d e1       	ldi	r24, 0x1D	; 29
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 b1 1c 	call	0x3962	; 0x3962 <malloc>
     30e:	9a 8f       	std	Y+26, r25	; 0x1a
     310:	89 8f       	std	Y+25, r24	; 0x19
     312:	00 97       	sbiw	r24, 0x00	; 0
     314:	79 f0       	breq	.+30     	; 0x334 <_ZN4FileC1E6SdFilePKc+0x5c>
     316:	2d e1       	ldi	r18, 0x1D	; 29
     318:	f7 01       	movw	r30, r14
     31a:	dc 01       	movw	r26, r24
     31c:	01 90       	ld	r0, Z+
     31e:	0d 92       	st	X+, r0
     320:	2a 95       	dec	r18
     322:	e1 f7       	brne	.-8      	; 0x31c <_ZN4FileC1E6SdFilePKc+0x44>
     324:	4c e0       	ldi	r20, 0x0C	; 12
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	b8 01       	movw	r22, r16
     32a:	ce 01       	movw	r24, r28
     32c:	0c 96       	adiw	r24, 0x0c	; 12
     32e:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <strncpy>
     332:	18 8e       	std	Y+24, r1	; 0x18
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	08 95       	ret

00000342 <_ZN4FileC1Ev>:
     342:	fc 01       	movw	r30, r24
     344:	13 82       	std	Z+3, r1	; 0x03
     346:	12 82       	std	Z+2, r1	; 0x02
     348:	88 ee       	ldi	r24, 0xE8	; 232
     34a:	93 e0       	ldi	r25, 0x03	; 3
     34c:	a0 e0       	ldi	r26, 0x00	; 0
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	84 83       	std	Z+4, r24	; 0x04
     352:	95 83       	std	Z+5, r25	; 0x05
     354:	a6 83       	std	Z+6, r26	; 0x06
     356:	b7 83       	std	Z+7, r27	; 0x07
     358:	8e e0       	ldi	r24, 0x0E	; 14
     35a:	91 e0       	ldi	r25, 0x01	; 1
     35c:	91 83       	std	Z+1, r25	; 0x01
     35e:	80 83       	st	Z, r24
     360:	12 8e       	std	Z+26, r1	; 0x1a
     362:	11 8e       	std	Z+25, r1	; 0x19
     364:	14 86       	std	Z+12, r1	; 0x0c
     366:	08 95       	ret

00000368 <_ZN4File4seekEm>:
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     368:	fc 01       	movw	r30, r24
     36a:	81 8d       	ldd	r24, Z+25	; 0x19
     36c:	92 8d       	ldd	r25, Z+26	; 0x1a
     36e:	00 97       	sbiw	r24, 0x00	; 0
     370:	29 f0       	breq	.+10     	; 0x37c <_ZN4File4seekEm+0x14>

  return _file->seekSet(pos);
     372:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6SdFile7seekSetEm>
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	81 11       	cpse	r24, r1
     37a:	01 c0       	rjmp	.+2      	; 0x37e <_ZN4File4seekEm+0x16>
  if (_file)
    _file->sync();
}

boolean File::seek(uint32_t pos) {
  if (! _file) return false;
     37c:	90 e0       	ldi	r25, 0x00	; 0

  return _file->seekSet(pos);
}
     37e:	89 2f       	mov	r24, r25
     380:	08 95       	ret

00000382 <_ZN4File8positionEv>:

uint32_t File::position() {
  if (! _file) return -1;
     382:	dc 01       	movw	r26, r24
     384:	59 96       	adiw	r26, 0x19	; 25
     386:	ed 91       	ld	r30, X+
     388:	fc 91       	ld	r31, X
     38a:	5a 97       	sbiw	r26, 0x1a	; 26
     38c:	30 97       	sbiw	r30, 0x00	; 0
     38e:	29 f0       	breq	.+10     	; 0x39a <_ZN4File8positionEv+0x18>
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
     390:	62 85       	ldd	r22, Z+10	; 0x0a
     392:	73 85       	ldd	r23, Z+11	; 0x0b
     394:	84 85       	ldd	r24, Z+12	; 0x0c
     396:	95 85       	ldd	r25, Z+13	; 0x0d
  return _file->curPosition();
     398:	08 95       	ret

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
     39a:	6f ef       	ldi	r22, 0xFF	; 255
     39c:	7f ef       	ldi	r23, 0xFF	; 255
     39e:	cb 01       	movw	r24, r22
  return _file->curPosition();
}
     3a0:	08 95       	ret

000003a2 <_ZN4File4sizeEv>:

uint32_t File::size() {
  if (! _file) return 0;
     3a2:	dc 01       	movw	r26, r24
     3a4:	59 96       	adiw	r26, 0x19	; 25
     3a6:	ed 91       	ld	r30, X+
     3a8:	fc 91       	ld	r31, X
     3aa:	5a 97       	sbiw	r26, 0x1a	; 26
     3ac:	30 97       	sbiw	r30, 0x00	; 0
     3ae:	29 f0       	breq	.+10     	; 0x3ba <_ZN4File4sizeEv+0x18>
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
     3b0:	63 89       	ldd	r22, Z+19	; 0x13
     3b2:	74 89       	ldd	r23, Z+20	; 0x14
     3b4:	85 89       	ldd	r24, Z+21	; 0x15
     3b6:	96 89       	ldd	r25, Z+22	; 0x16
  return _file->fileSize();
     3b8:	08 95       	ret
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
     3ba:	60 e0       	ldi	r22, 0x00	; 0
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	cb 01       	movw	r24, r22
  return _file->fileSize();
}
     3c0:	08 95       	ret

000003c2 <_ZN4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
  if (! _file) return 0;
     3ce:	fc 01       	movw	r30, r24
     3d0:	21 8d       	ldd	r18, Z+25	; 0x19
     3d2:	32 8d       	ldd	r19, Z+26	; 0x1a
     3d4:	23 2b       	or	r18, r19
     3d6:	d9 f0       	breq	.+54     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3d8:	ec 01       	movw	r28, r24

  uint32_t n = size() - position();
     3da:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN4File4sizeEv>
     3de:	6b 01       	movw	r12, r22
     3e0:	7c 01       	movw	r14, r24
     3e2:	ce 01       	movw	r24, r28
     3e4:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN4File8positionEv>
     3e8:	a7 01       	movw	r20, r14
     3ea:	96 01       	movw	r18, r12
     3ec:	26 1b       	sub	r18, r22
     3ee:	37 0b       	sbc	r19, r23
     3f0:	48 0b       	sbc	r20, r24
     3f2:	59 0b       	sbc	r21, r25
     3f4:	da 01       	movw	r26, r20
     3f6:	c9 01       	movw	r24, r18

  return n > 0X7FFF ? 0X7FFF : n;
     3f8:	81 15       	cp	r24, r1
     3fa:	30 e8       	ldi	r19, 0x80	; 128
     3fc:	93 07       	cpc	r25, r19
     3fe:	a1 05       	cpc	r26, r1
     400:	b1 05       	cpc	r27, r1
     402:	38 f0       	brcs	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     404:	8f ef       	ldi	r24, 0xFF	; 255
     406:	9f e7       	ldi	r25, 0x7F	; 127
     408:	a0 e0       	ldi	r26, 0x00	; 0
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0

  uint32_t n = size() - position();

  return n > 0X7FFF ? 0X7FFF : n;
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	ff 90       	pop	r15
     418:	ef 90       	pop	r14
     41a:	df 90       	pop	r13
     41c:	cf 90       	pop	r12
     41e:	08 95       	ret

00000420 <_ZN4File5closeEv>:
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
  if (_file) {
     426:	89 8d       	ldd	r24, Y+25	; 0x19
     428:	9a 8d       	ldd	r25, Y+26	; 0x1a
     42a:	00 97       	sbiw	r24, 0x00	; 0
     42c:	41 f0       	breq	.+16     	; 0x43e <_ZN4File5closeEv+0x1e>
    _file->close();
     42e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN6SdFile5closeEv>
    free(_file); 
     432:	89 8d       	ldd	r24, Y+25	; 0x19
     434:	9a 8d       	ldd	r25, Y+26	; 0x1a
     436:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <free>
    _file = 0;
     43a:	1a 8e       	std	Y+26, r1	; 0x1a
     43c:	19 8e       	std	Y+25, r1	; 0x19
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <_ZN4FilecvbEv>:

File::operator bool() {
  if (_file) 
     444:	dc 01       	movw	r26, r24
     446:	59 96       	adiw	r26, 0x19	; 25
     448:	ed 91       	ld	r30, X+
     44a:	fc 91       	ld	r31, X
     44c:	5a 97       	sbiw	r26, 0x1a	; 26
     44e:	30 97       	sbiw	r30, 0x00	; 0
     450:	21 f0       	breq	.+8      	; 0x45a <_ZN4FilecvbEv+0x16>
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	95 81       	ldd	r25, Z+5	; 0x05
     456:	91 11       	cpse	r25, r1
     458:	01 c0       	rjmp	.+2      	; 0x45c <_ZN4FilecvbEv+0x18>
    return  _file->isOpen();
  return false;
     45a:	80 e0       	ldi	r24, 0x00	; 0
}
     45c:	08 95       	ret

0000045e <_ZN7SDClass5beginEh>:
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	ec 01       	movw	r28, r24
     468:	46 2f       	mov	r20, r22
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <_ZN7Sd2Card4initEhh>
     470:	88 23       	and	r24, r24
     472:	91 f0       	breq	.+36     	; 0x498 <_ZN7SDClass5beginEh+0x3a>
     474:	8e 01       	movw	r16, r28
     476:	04 5f       	subi	r16, 0xF4	; 244
     478:	1f 4f       	sbci	r17, 0xFF	; 255
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	be 01       	movw	r22, r28
     47e:	c8 01       	movw	r24, r16
     480:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN8SdVolume4initEP7Sd2Cardh>
     484:	88 23       	and	r24, r24
     486:	51 f0       	breq	.+20     	; 0x49c <_ZN7SDClass5beginEh+0x3e>
     488:	b8 01       	movw	r22, r16
     48a:	ce 01       	movw	r24, r28
     48c:	8a 96       	adiw	r24, 0x2a	; 42
     48e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_ZN6SdFile8openRootEP8SdVolume>
     492:	91 e0       	ldi	r25, 0x01	; 1
     494:	81 11       	cpse	r24, r1
     496:	0a c0       	rjmp	.+20     	; 0x4ac <_ZN7SDClass5beginEh+0x4e>
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <_ZN7SDClass5beginEh+0x4e>
     49c:	40 e0       	ldi	r20, 0x00	; 0
     49e:	be 01       	movw	r22, r28
     4a0:	c8 01       	movw	r24, r16
     4a2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <_ZN8SdVolume4initEP7Sd2Cardh>
     4a6:	88 23       	and	r24, r24
     4a8:	b9 f3       	breq	.-18     	; 0x498 <_ZN7SDClass5beginEh+0x3a>
     4aa:	ee cf       	rjmp	.-36     	; 0x488 <_ZN7SDClass5beginEh+0x2a>
     4ac:	89 2f       	mov	r24, r25
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	08 95       	ret

000004b8 <_ZN6SdFileC1ERKS_>:
     4b8:	fc 01       	movw	r30, r24
     4ba:	db 01       	movw	r26, r22
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	8d 91       	ld	r24, X+
     4c0:	9c 91       	ld	r25, X
     4c2:	13 97       	sbiw	r26, 0x03	; 3
     4c4:	93 83       	std	Z+3, r25	; 0x03
     4c6:	82 83       	std	Z+2, r24	; 0x02
     4c8:	80 e2       	ldi	r24, 0x20	; 32
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	91 83       	std	Z+1, r25	; 0x01
     4ce:	80 83       	st	Z, r24
     4d0:	14 96       	adiw	r26, 0x04	; 4
     4d2:	8c 91       	ld	r24, X
     4d4:	14 97       	sbiw	r26, 0x04	; 4
     4d6:	84 83       	std	Z+4, r24	; 0x04
     4d8:	15 96       	adiw	r26, 0x05	; 5
     4da:	8c 91       	ld	r24, X
     4dc:	15 97       	sbiw	r26, 0x05	; 5
     4de:	85 83       	std	Z+5, r24	; 0x05
     4e0:	16 96       	adiw	r26, 0x06	; 6
     4e2:	4d 91       	ld	r20, X+
     4e4:	5d 91       	ld	r21, X+
     4e6:	6d 91       	ld	r22, X+
     4e8:	7c 91       	ld	r23, X
     4ea:	19 97       	sbiw	r26, 0x09	; 9
     4ec:	46 83       	std	Z+6, r20	; 0x06
     4ee:	57 83       	std	Z+7, r21	; 0x07
     4f0:	60 87       	std	Z+8, r22	; 0x08
     4f2:	71 87       	std	Z+9, r23	; 0x09
     4f4:	1a 96       	adiw	r26, 0x0a	; 10
     4f6:	4d 91       	ld	r20, X+
     4f8:	5d 91       	ld	r21, X+
     4fa:	6d 91       	ld	r22, X+
     4fc:	7c 91       	ld	r23, X
     4fe:	1d 97       	sbiw	r26, 0x0d	; 13
     500:	42 87       	std	Z+10, r20	; 0x0a
     502:	53 87       	std	Z+11, r21	; 0x0b
     504:	64 87       	std	Z+12, r22	; 0x0c
     506:	75 87       	std	Z+13, r23	; 0x0d
     508:	1e 96       	adiw	r26, 0x0e	; 14
     50a:	4d 91       	ld	r20, X+
     50c:	5d 91       	ld	r21, X+
     50e:	6d 91       	ld	r22, X+
     510:	7c 91       	ld	r23, X
     512:	51 97       	sbiw	r26, 0x11	; 17
     514:	46 87       	std	Z+14, r20	; 0x0e
     516:	57 87       	std	Z+15, r21	; 0x0f
     518:	60 8b       	std	Z+16, r22	; 0x10
     51a:	71 8b       	std	Z+17, r23	; 0x11
     51c:	52 96       	adiw	r26, 0x12	; 18
     51e:	8c 91       	ld	r24, X
     520:	52 97       	sbiw	r26, 0x12	; 18
     522:	82 8b       	std	Z+18, r24	; 0x12
     524:	53 96       	adiw	r26, 0x13	; 19
     526:	4d 91       	ld	r20, X+
     528:	5d 91       	ld	r21, X+
     52a:	6d 91       	ld	r22, X+
     52c:	7c 91       	ld	r23, X
     52e:	56 97       	sbiw	r26, 0x16	; 22
     530:	43 8b       	std	Z+19, r20	; 0x13
     532:	54 8b       	std	Z+20, r21	; 0x14
     534:	65 8b       	std	Z+21, r22	; 0x15
     536:	76 8b       	std	Z+22, r23	; 0x16
     538:	57 96       	adiw	r26, 0x17	; 23
     53a:	4d 91       	ld	r20, X+
     53c:	5d 91       	ld	r21, X+
     53e:	6d 91       	ld	r22, X+
     540:	7c 91       	ld	r23, X
     542:	5a 97       	sbiw	r26, 0x1a	; 26
     544:	47 8b       	std	Z+23, r20	; 0x17
     546:	50 8f       	std	Z+24, r21	; 0x18
     548:	61 8f       	std	Z+25, r22	; 0x19
     54a:	72 8f       	std	Z+26, r23	; 0x1a
     54c:	5b 96       	adiw	r26, 0x1b	; 27
     54e:	8d 91       	ld	r24, X+
     550:	9c 91       	ld	r25, X
     552:	5c 97       	sbiw	r26, 0x1c	; 28
     554:	94 8f       	std	Z+28, r25	; 0x1c
     556:	83 8f       	std	Z+27, r24	; 0x1b
     558:	08 95       	ret

0000055a <_ZN7SDClass12getParentDirEPKcPi>:
     55a:	4f 92       	push	r4
     55c:	5f 92       	push	r5
     55e:	6f 92       	push	r6
     560:	7f 92       	push	r7
     562:	8f 92       	push	r8
     564:	9f 92       	push	r9
     566:	af 92       	push	r10
     568:	bf 92       	push	r11
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	0f 93       	push	r16
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	c7 54       	subi	r28, 0x47	; 71
     580:	d1 09       	sbc	r29, r1
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	6c 01       	movw	r12, r24
     58e:	5a 01       	movw	r10, r20
     590:	49 01       	movw	r8, r18
     592:	66 5d       	subi	r22, 0xD6	; 214
     594:	7f 4f       	sbci	r23, 0xFF	; 255
     596:	7e 01       	movw	r14, r28
     598:	8e e1       	ldi	r24, 0x1E	; 30
     59a:	e8 0e       	add	r14, r24
     59c:	f1 1c       	adc	r15, r1
     59e:	c7 01       	movw	r24, r14
     5a0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN6SdFileC1ERKS_>
     5a4:	1c 82       	std	Y+4, r1	; 0x04
     5a6:	1b 82       	std	Y+3, r1	; 0x03
     5a8:	80 e2       	ldi	r24, 0x20	; 32
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	1e 82       	std	Y+6, r1	; 0x06
     5b2:	85 01       	movw	r16, r10
     5b4:	fe 01       	movw	r30, r28
     5b6:	31 96       	adiw	r30, 0x01	; 1
     5b8:	3f 01       	movw	r6, r30
     5ba:	27 01       	movw	r4, r14
     5bc:	6f e2       	ldi	r22, 0x2F	; 47
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	c8 01       	movw	r24, r16
     5c2:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <strchr>
     5c6:	00 97       	sbiw	r24, 0x00	; 0
     5c8:	d9 f1       	breq	.+118    	; 0x640 <_ZN7SDClass12getParentDirEPKcPi+0xe6>
     5ca:	f8 01       	movw	r30, r16
     5cc:	20 81       	ld	r18, Z
     5ce:	2f 32       	cpi	r18, 0x2F	; 47
     5d0:	19 f4       	brne	.+6      	; 0x5d8 <_ZN7SDClass12getParentDirEPKcPi+0x7e>
     5d2:	0f 5f       	subi	r16, 0xFF	; 255
     5d4:	1f 4f       	sbci	r17, 0xFF	; 255
     5d6:	f2 cf       	rjmp	.-28     	; 0x5bc <_ZN7SDClass12getParentDirEPKcPi+0x62>
     5d8:	80 1b       	sub	r24, r16
     5da:	8d 30       	cpi	r24, 0x0D	; 13
     5dc:	08 f0       	brcs	.+2      	; 0x5e0 <_ZN7SDClass12getParentDirEPKcPi+0x86>
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	e8 2e       	mov	r14, r24
     5e2:	f1 2c       	mov	r15, r1
     5e4:	a7 01       	movw	r20, r14
     5e6:	b8 01       	movw	r22, r16
     5e8:	ce 01       	movw	r24, r28
     5ea:	cb 96       	adiw	r24, 0x3b	; 59
     5ec:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <strncpy>
     5f0:	eb e3       	ldi	r30, 0x3B	; 59
     5f2:	f0 e0       	ldi	r31, 0x00	; 0
     5f4:	ec 0f       	add	r30, r28
     5f6:	fd 1f       	adc	r31, r29
     5f8:	ee 0d       	add	r30, r14
     5fa:	ff 1d       	adc	r31, r15
     5fc:	10 82       	st	Z, r1
     5fe:	c3 01       	movw	r24, r6
     600:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN6SdFile5closeEv>
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	ae 01       	movw	r20, r28
     608:	45 5c       	subi	r20, 0xC5	; 197
     60a:	5f 4f       	sbci	r21, 0xFF	; 255
     60c:	b2 01       	movw	r22, r4
     60e:	c3 01       	movw	r24, r6
     610:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6SdFile4openEPS_PKch>
     614:	81 11       	cpse	r24, r1
     616:	09 c0       	rjmp	.+18     	; 0x62a <_ZN7SDClass12getParentDirEPKcPi+0xd0>
     618:	f6 01       	movw	r30, r12
     61a:	13 82       	std	Z+3, r1	; 0x03
     61c:	12 82       	std	Z+2, r1	; 0x02
     61e:	80 e2       	ldi	r24, 0x20	; 32
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	91 83       	std	Z+1, r25	; 0x01
     624:	80 83       	st	Z, r24
     626:	15 82       	std	Z+5, r1	; 0x05
     628:	14 c0       	rjmp	.+40     	; 0x652 <_ZN7SDClass12getParentDirEPKcPi+0xf8>
     62a:	0e 0d       	add	r16, r14
     62c:	1f 1d       	adc	r17, r15
     62e:	c2 01       	movw	r24, r4
     630:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN6SdFile5closeEv>
     634:	94 2d       	mov	r25, r4
     636:	85 2d       	mov	r24, r5
     638:	23 01       	movw	r4, r6
     63a:	69 2e       	mov	r6, r25
     63c:	78 2e       	mov	r7, r24
     63e:	be cf       	rjmp	.-132    	; 0x5bc <_ZN7SDClass12getParentDirEPKcPi+0x62>
     640:	0a 19       	sub	r16, r10
     642:	1b 09       	sbc	r17, r11
     644:	f4 01       	movw	r30, r8
     646:	11 83       	std	Z+1, r17	; 0x01
     648:	00 83       	st	Z, r16
     64a:	b2 01       	movw	r22, r4
     64c:	c6 01       	movw	r24, r12
     64e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN6SdFileC1ERKS_>
     652:	c6 01       	movw	r24, r12
     654:	c9 5b       	subi	r28, 0xB9	; 185
     656:	df 4f       	sbci	r29, 0xFF	; 255
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	ff 90       	pop	r15
     66c:	ef 90       	pop	r14
     66e:	df 90       	pop	r13
     670:	cf 90       	pop	r12
     672:	bf 90       	pop	r11
     674:	af 90       	pop	r10
     676:	9f 90       	pop	r9
     678:	8f 90       	pop	r8
     67a:	7f 90       	pop	r7
     67c:	6f 90       	pop	r6
     67e:	5f 90       	pop	r5
     680:	4f 90       	pop	r4
     682:	08 95       	ret

00000684 <_ZN7SDClass4openEPKch>:
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	c9 55       	subi	r28, 0x59	; 89
     69c:	d1 09       	sbc	r29, r1
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
     6a8:	6c 01       	movw	r12, r24
     6aa:	5b 01       	movw	r10, r22
     6ac:	8a 01       	movw	r16, r20
     6ae:	f2 2e       	mov	r15, r18
     6b0:	9e 01       	movw	r18, r28
     6b2:	28 5a       	subi	r18, 0xA8	; 168
     6b4:	3f 4f       	sbci	r19, 0xFF	; 255
     6b6:	ce 01       	movw	r24, r28
     6b8:	cb 96       	adiw	r24, 0x3b	; 59
     6ba:	0e 94 ad 02 	call	0x55a	; 0x55a <_ZN7SDClass12getParentDirEPKcPi>
     6be:	6a 96       	adiw	r28, 0x1a	; 26
     6c0:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c2:	9f ad       	ldd	r25, Y+63	; 0x3f
     6c4:	6a 97       	sbiw	r28, 0x1a	; 26
     6c6:	08 0f       	add	r16, r24
     6c8:	19 1f       	adc	r17, r25
     6ca:	f8 01       	movw	r30, r16
     6cc:	80 81       	ld	r24, Z
     6ce:	81 11       	cpse	r24, r1
     6d0:	0a c0       	rjmp	.+20     	; 0x6e6 <_ZN7SDClass4openEPKch+0x62>
     6d2:	be 01       	movw	r22, r28
     6d4:	65 5c       	subi	r22, 0xC5	; 197
     6d6:	7f 4f       	sbci	r23, 0xFF	; 255
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN6SdFileC1ERKS_>
     6e0:	4a e1       	ldi	r20, 0x1A	; 26
     6e2:	51 e0       	ldi	r21, 0x01	; 1
     6e4:	41 c0       	rjmp	.+130    	; 0x768 <_ZN7SDClass4openEPKch+0xe4>
     6e6:	19 a2       	std	Y+33, r1	; 0x21
     6e8:	18 a2       	std	Y+32, r1	; 0x20
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9f 8f       	std	Y+31, r25	; 0x1f
     6f0:	8e 8f       	std	Y+30, r24	; 0x1e
     6f2:	1b a2       	std	Y+35, r1	; 0x23
     6f4:	21 96       	adiw	r28, 0x01	; 1
     6f6:	8f ad       	ldd	r24, Y+63	; 0x3f
     6f8:	21 97       	sbiw	r28, 0x01	; 1
     6fa:	81 11       	cpse	r24, r1
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <_ZN7SDClass4openEPKch+0x82>
     6fe:	c6 01       	movw	r24, r12
     700:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN4FileC1Ev>
     704:	37 c0       	rjmp	.+110    	; 0x774 <_ZN7SDClass4openEPKch+0xf0>
     706:	82 50       	subi	r24, 0x02	; 2
     708:	82 30       	cpi	r24, 0x02	; 2
     70a:	60 f4       	brcc	.+24     	; 0x724 <_ZN7SDClass4openEPKch+0xa0>
     70c:	b5 01       	movw	r22, r10
     70e:	66 5d       	subi	r22, 0xD6	; 214
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	2f 2d       	mov	r18, r15
     714:	a8 01       	movw	r20, r16
     716:	ce 01       	movw	r24, r28
     718:	4e 96       	adiw	r24, 0x1e	; 30
     71a:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6SdFile4openEPS_PKch>
     71e:	81 11       	cpse	r24, r1
     720:	10 c0       	rjmp	.+32     	; 0x742 <_ZN7SDClass4openEPKch+0xbe>
     722:	ed cf       	rjmp	.-38     	; 0x6fe <_ZN7SDClass4openEPKch+0x7a>
     724:	2f 2d       	mov	r18, r15
     726:	a8 01       	movw	r20, r16
     728:	be 01       	movw	r22, r28
     72a:	65 5c       	subi	r22, 0xC5	; 197
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	ce 01       	movw	r24, r28
     730:	4e 96       	adiw	r24, 0x1e	; 30
     732:	0e 94 a2 0b 	call	0x1744	; 0x1744 <_ZN6SdFile4openEPS_PKch>
     736:	88 23       	and	r24, r24
     738:	11 f3       	breq	.-60     	; 0x6fe <_ZN7SDClass4openEPKch+0x7a>
     73a:	ce 01       	movw	r24, r28
     73c:	cb 96       	adiw	r24, 0x3b	; 59
     73e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN6SdFile5closeEv>
     742:	9f 2d       	mov	r25, r15
     744:	96 70       	andi	r25, 0x06	; 6
     746:	41 f0       	breq	.+16     	; 0x758 <_ZN7SDClass4openEPKch+0xd4>
     748:	49 a9       	ldd	r20, Y+49	; 0x31
     74a:	5a a9       	ldd	r21, Y+50	; 0x32
     74c:	6b a9       	ldd	r22, Y+51	; 0x33
     74e:	7c a9       	ldd	r23, Y+52	; 0x34
     750:	ce 01       	movw	r24, r28
     752:	4e 96       	adiw	r24, 0x1e	; 30
     754:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6SdFile7seekSetEm>
     758:	be 01       	movw	r22, r28
     75a:	62 5e       	subi	r22, 0xE2	; 226
     75c:	7f 4f       	sbci	r23, 0xFF	; 255
     75e:	ce 01       	movw	r24, r28
     760:	01 96       	adiw	r24, 0x01	; 1
     762:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN6SdFileC1ERKS_>
     766:	a8 01       	movw	r20, r16
     768:	be 01       	movw	r22, r28
     76a:	6f 5f       	subi	r22, 0xFF	; 255
     76c:	7f 4f       	sbci	r23, 0xFF	; 255
     76e:	c6 01       	movw	r24, r12
     770:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN4FileC1E6SdFilePKc>
     774:	c6 01       	movw	r24, r12
     776:	c7 5a       	subi	r28, 0xA7	; 167
     778:	df 4f       	sbci	r29, 0xFF	; 255
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	f8 94       	cli
     77e:	de bf       	out	0x3e, r29	; 62
     780:	0f be       	out	0x3f, r0	; 63
     782:	cd bf       	out	0x3d, r28	; 61
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	df 90       	pop	r13
     790:	cf 90       	pop	r12
     792:	bf 90       	pop	r11
     794:	af 90       	pop	r10
     796:	08 95       	ret

00000798 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
     798:	e4 e5       	ldi	r30, 0x54	; 84
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	15 82       	std	Z+5, r1	; 0x05
     79e:	16 82       	std	Z+6, r1	; 0x06
     7a0:	11 86       	std	Z+9, r1	; 0x09
     7a2:	13 86       	std	Z+11, r1	; 0x0b
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	84 87       	std	Z+12, r24	; 0x0c
     7ae:	95 87       	std	Z+13, r25	; 0x0d
     7b0:	a6 87       	std	Z+14, r26	; 0x0e
     7b2:	b7 87       	std	Z+15, r27	; 0x0f
     7b4:	13 a2       	std	Z+35, r1	; 0x23
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     7b6:	15 a6       	std	Z+45, r1	; 0x2d
     7b8:	14 a6       	std	Z+44, r1	; 0x2c
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
     7ba:	80 e2       	ldi	r24, 0x20	; 32
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	93 a7       	std	Z+43, r25	; 0x2b
     7c0:	82 a7       	std	Z+42, r24	; 0x2a
     7c2:	17 a6       	std	Z+47, r1	; 0x2f
     7c4:	08 95       	ret

000007c6 <_ZN8SPIClass16beginTransactionE11SPISettings>:

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
}
     7c6:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <_ZN8SPIClass13interruptModeE>
     7ca:	22 23       	and	r18, r18
     7cc:	99 f0       	breq	.+38     	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     7ce:	4f b7       	in	r20, 0x3f	; 63
     7d0:	f8 94       	cli
     7d2:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <_ZN8SPIClass13interruptModeE>
     7d6:	21 30       	cpi	r18, 0x01	; 1
     7d8:	59 f4       	brne	.+22     	; 0x7f0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
     7da:	2d b3       	in	r18, 0x1d	; 29
     7dc:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     7e0:	3d b3       	in	r19, 0x1d	; 29
     7e2:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <_ZN8SPIClass13interruptMaskE>
     7e6:	20 95       	com	r18
     7e8:	23 23       	and	r18, r19
     7ea:	2d bb       	out	0x1d, r18	; 29
     7ec:	4f bf       	out	0x3f, r20	; 63
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
     7f0:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <__data_end>
     7f4:	8c bd       	out	0x2c, r24	; 44
     7f6:	9d bd       	out	0x2d, r25	; 45
     7f8:	08 95       	ret

000007fa <_ZN8SPIClass8transferEh>:
     7fa:	8e bd       	out	0x2e, r24	; 46
     7fc:	00 00       	nop
     7fe:	0d b4       	in	r0, 0x2d	; 45
     800:	07 fe       	sbrs	r0, 7
     802:	fd cf       	rjmp	.-6      	; 0x7fe <_ZN8SPIClass8transferEh+0x4>
     804:	8e b5       	in	r24, 0x2e	; 46
     806:	08 95       	ret

00000808 <_ZL6spiRecv>:
     808:	8f ef       	ldi	r24, 0xFF	; 255
     80a:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>

0000080e <_ZN8SPIClass14endTransactionEv>:
     80e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <_ZN8SPIClass13interruptModeE>
     812:	88 23       	and	r24, r24
     814:	61 f0       	breq	.+24     	; 0x82e <_ZN8SPIClass14endTransactionEv+0x20>
     816:	9f b7       	in	r25, 0x3f	; 63
     818:	f8 94       	cli
     81a:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <_ZN8SPIClass13interruptModeE>
     81e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     822:	21 30       	cpi	r18, 0x01	; 1
     824:	19 f4       	brne	.+6      	; 0x82c <_ZN8SPIClass14endTransactionEv+0x1e>
     826:	8d bb       	out	0x1d, r24	; 29
     828:	9f bf       	out	0x3f, r25	; 63
     82a:	08 95       	ret
     82c:	8f bf       	out	0x3f, r24	; 63
     82e:	08 95       	ret

00000830 <_ZN7Sd2Card14chipSelectHighEv>:
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	fc 01       	movw	r30, r24
     834:	84 81       	ldd	r24, Z+4	; 0x04
     836:	0e 94 40 1a 	call	0x3480	; 0x3480 <digitalWrite>
     83a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_ZL20chip_select_asserted>
     83e:	88 23       	and	r24, r24
     840:	21 f0       	breq	.+8      	; 0x84a <_ZN7Sd2Card14chipSelectHighEv+0x1a>
     842:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <_ZL20chip_select_asserted>
     846:	0c 94 07 04 	jmp	0x80e	; 0x80e <_ZN8SPIClass14endTransactionEv>
     84a:	08 95       	ret

0000084c <_ZN7Sd2Card13chipSelectLowEv>:
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	ec 01       	movw	r28, r24
     852:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <_ZL20chip_select_asserted>
     856:	81 11       	cpse	r24, r1
     858:	09 c0       	rjmp	.+18     	; 0x86c <_ZN7Sd2Card13chipSelectLowEv+0x20>
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <_ZL20chip_select_asserted>
     860:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL8settings>
     864:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_ZL8settings+0x1>
     868:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	8c 81       	ldd	r24, Y+4	; 0x04
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <digitalWrite>

00000878 <_ZN7Sd2Card7readEndEv>:
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	ec 01       	movw	r28, r24
     87e:	8e 81       	ldd	r24, Y+6	; 0x06
     880:	88 23       	and	r24, r24
     882:	89 f0       	breq	.+34     	; 0x8a6 <_ZN7Sd2Card7readEndEv+0x2e>
     884:	8f 81       	ldd	r24, Y+7	; 0x07
     886:	98 85       	ldd	r25, Y+8	; 0x08
     888:	9c 01       	movw	r18, r24
     88a:	2f 5f       	subi	r18, 0xFF	; 255
     88c:	3f 4f       	sbci	r19, 0xFF	; 255
     88e:	38 87       	std	Y+8, r19	; 0x08
     890:	2f 83       	std	Y+7, r18	; 0x07
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	92 40       	sbci	r25, 0x02	; 2
     896:	18 f4       	brcc	.+6      	; 0x89e <_ZN7Sd2Card7readEndEv+0x26>
     898:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     89c:	f3 cf       	rjmp	.-26     	; 0x884 <_ZN7Sd2Card7readEndEv+0xc>
     89e:	ce 01       	movw	r24, r28
     8a0:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     8a4:	1e 82       	std	Y+6, r1	; 0x06
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <_ZN7Sd2Card10setSckRateEh>:
     8ac:	67 30       	cpi	r22, 0x07	; 7
     8ae:	28 f0       	brcs	.+10     	; 0x8ba <_ZN7Sd2Card10setSckRateEh+0xe>
     8b0:	26 e1       	ldi	r18, 0x16	; 22
     8b2:	fc 01       	movw	r30, r24
     8b4:	25 83       	std	Z+5, r18	; 0x05
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	08 95       	ret
     8ba:	62 30       	cpi	r22, 0x02	; 2
     8bc:	81 f0       	breq	.+32     	; 0x8de <_ZN7Sd2Card10setSckRateEh+0x32>
     8be:	30 f4       	brcc	.+12     	; 0x8cc <_ZN7Sd2Card10setSckRateEh+0x20>
     8c0:	66 23       	and	r22, r22
     8c2:	59 f0       	breq	.+22     	; 0x8da <_ZN7Sd2Card10setSckRateEh+0x2e>
     8c4:	61 30       	cpi	r22, 0x01	; 1
     8c6:	b1 f4       	brne	.+44     	; 0x8f4 <_ZN7Sd2Card10setSckRateEh+0x48>
     8c8:	80 e5       	ldi	r24, 0x50	; 80
     8ca:	15 c0       	rjmp	.+42     	; 0x8f6 <_ZN7Sd2Card10setSckRateEh+0x4a>
     8cc:	64 30       	cpi	r22, 0x04	; 4
     8ce:	59 f0       	breq	.+22     	; 0x8e6 <_ZN7Sd2Card10setSckRateEh+0x3a>
     8d0:	40 f0       	brcs	.+16     	; 0x8e2 <_ZN7Sd2Card10setSckRateEh+0x36>
     8d2:	65 30       	cpi	r22, 0x05	; 5
     8d4:	79 f4       	brne	.+30     	; 0x8f4 <_ZN7Sd2Card10setSckRateEh+0x48>
     8d6:	82 e5       	ldi	r24, 0x52	; 82
     8d8:	0e c0       	rjmp	.+28     	; 0x8f6 <_ZN7Sd2Card10setSckRateEh+0x4a>
     8da:	80 e5       	ldi	r24, 0x50	; 80
     8dc:	05 c0       	rjmp	.+10     	; 0x8e8 <_ZN7Sd2Card10setSckRateEh+0x3c>
     8de:	81 e5       	ldi	r24, 0x51	; 81
     8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <_ZN7Sd2Card10setSckRateEh+0x3c>
     8e2:	81 e5       	ldi	r24, 0x51	; 81
     8e4:	08 c0       	rjmp	.+16     	; 0x8f6 <_ZN7Sd2Card10setSckRateEh+0x4a>
     8e6:	82 e5       	ldi	r24, 0x52	; 82
     8e8:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZL8settings>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <_ZL8settings+0x1>
     8f2:	08 95       	ret
     8f4:	83 e5       	ldi	r24, 0x53	; 83
     8f6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZL8settings>
     8fa:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <_ZL8settings+0x1>
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	08 95       	ret

00000902 <_ZN7Sd2Card11waitNotBusyEj>:
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	eb 01       	movw	r28, r22
     90c:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     910:	8b 01       	movw	r16, r22
     912:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     916:	8f 3f       	cpi	r24, 0xFF	; 255
     918:	49 f0       	breq	.+18     	; 0x92c <_ZN7Sd2Card11waitNotBusyEj+0x2a>
     91a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     91e:	60 1b       	sub	r22, r16
     920:	71 0b       	sbc	r23, r17
     922:	6c 17       	cp	r22, r28
     924:	7d 07       	cpc	r23, r29
     926:	a8 f3       	brcs	.-22     	; 0x912 <_ZN7Sd2Card11waitNotBusyEj+0x10>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	01 c0       	rjmp	.+2      	; 0x92e <_ZN7Sd2Card11waitNotBusyEj+0x2c>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <_ZN7Sd2Card11cardCommandEhm>:
     938:	cf 92       	push	r12
     93a:	df 92       	push	r13
     93c:	ff 92       	push	r15
     93e:	0f 93       	push	r16
     940:	1f 93       	push	r17
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	00 d0       	rcall	.+0      	; 0x948 <_ZN7Sd2Card11cardCommandEhm+0x10>
     948:	00 d0       	rcall	.+0      	; 0x94a <_ZN7Sd2Card11cardCommandEhm+0x12>
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	6c 01       	movw	r12, r24
     950:	f6 2e       	mov	r15, r22
     952:	29 83       	std	Y+1, r18	; 0x01
     954:	3a 83       	std	Y+2, r19	; 0x02
     956:	4b 83       	std	Y+3, r20	; 0x03
     958:	5c 83       	std	Y+4, r21	; 0x04
     95a:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7Sd2Card7readEndEv>
     95e:	c6 01       	movw	r24, r12
     960:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN7Sd2Card13chipSelectLowEv>
     964:	6c e2       	ldi	r22, 0x2C	; 44
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	c6 01       	movw	r24, r12
     96a:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7Sd2Card11waitNotBusyEj>
     96e:	8f 2d       	mov	r24, r15
     970:	80 64       	ori	r24, 0x40	; 64
     972:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     976:	08 e1       	ldi	r16, 0x18	; 24
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	5c 81       	ldd	r21, Y+4	; 0x04
     97c:	4b 81       	ldd	r20, Y+3	; 0x03
     97e:	3a 81       	ldd	r19, Y+2	; 0x02
     980:	29 81       	ldd	r18, Y+1	; 0x01
     982:	da 01       	movw	r26, r20
     984:	c9 01       	movw	r24, r18
     986:	00 2e       	mov	r0, r16
     988:	04 c0       	rjmp	.+8      	; 0x992 <_ZN7Sd2Card11cardCommandEhm+0x5a>
     98a:	b6 95       	lsr	r27
     98c:	a7 95       	ror	r26
     98e:	97 95       	ror	r25
     990:	87 95       	ror	r24
     992:	0a 94       	dec	r0
     994:	d2 f7       	brpl	.-12     	; 0x98a <_ZN7Sd2Card11cardCommandEhm+0x52>
     996:	29 83       	std	Y+1, r18	; 0x01
     998:	3a 83       	std	Y+2, r19	; 0x02
     99a:	4b 83       	std	Y+3, r20	; 0x03
     99c:	5c 83       	std	Y+4, r21	; 0x04
     99e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     9a2:	08 50       	subi	r16, 0x08	; 8
     9a4:	11 09       	sbc	r17, r1
     9a6:	29 81       	ldd	r18, Y+1	; 0x01
     9a8:	3a 81       	ldd	r19, Y+2	; 0x02
     9aa:	4b 81       	ldd	r20, Y+3	; 0x03
     9ac:	5c 81       	ldd	r21, Y+4	; 0x04
     9ae:	08 3f       	cpi	r16, 0xF8	; 248
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	18 07       	cpc	r17, r24
     9b4:	31 f7       	brne	.-52     	; 0x982 <_ZN7Sd2Card11cardCommandEhm+0x4a>
     9b6:	ff 20       	and	r15, r15
     9b8:	29 f0       	breq	.+10     	; 0x9c4 <_ZN7Sd2Card11cardCommandEhm+0x8c>
     9ba:	e8 e0       	ldi	r30, 0x08	; 8
     9bc:	fe 12       	cpse	r15, r30
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <_ZN7Sd2Card11cardCommandEhm+0x90>
     9c0:	87 e8       	ldi	r24, 0x87	; 135
     9c2:	03 c0       	rjmp	.+6      	; 0x9ca <_ZN7Sd2Card11cardCommandEhm+0x92>
     9c4:	85 e9       	ldi	r24, 0x95	; 149
     9c6:	01 c0       	rjmp	.+2      	; 0x9ca <_ZN7Sd2Card11cardCommandEhm+0x92>
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     9d4:	f6 01       	movw	r30, r12
     9d6:	82 87       	std	Z+10, r24	; 0x0a
     9d8:	87 ff       	sbrs	r24, 7
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <_ZN7Sd2Card11cardCommandEhm+0xac>
     9dc:	1f 3f       	cpi	r17, 0xFF	; 255
     9de:	11 f0       	breq	.+4      	; 0x9e4 <_ZN7Sd2Card11cardCommandEhm+0xac>
     9e0:	1f 5f       	subi	r17, 0xFF	; 255
     9e2:	f6 cf       	rjmp	.-20     	; 0x9d0 <_ZN7Sd2Card11cardCommandEhm+0x98>
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	08 95       	ret

000009fc <_ZN7Sd2Card4initEhh>:
     9fc:	8f 92       	push	r8
     9fe:	9f 92       	push	r9
     a00:	af 92       	push	r10
     a02:	bf 92       	push	r11
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	ec 01       	movw	r28, r24
     a12:	e6 2e       	mov	r14, r22
     a14:	1b 86       	std	Y+11, r1	; 0x0b
     a16:	19 86       	std	Y+9, r1	; 0x09
     a18:	1e 82       	std	Y+6, r1	; 0x06
     a1a:	1d 82       	std	Y+5, r1	; 0x05
     a1c:	4c 83       	std	Y+4, r20	; 0x04
     a1e:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     a22:	4b 01       	movw	r8, r22
     a24:	5c 01       	movw	r10, r24
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	8c 81       	ldd	r24, Y+4	; 0x04
     a2a:	0e 94 07 1a 	call	0x340e	; 0x340e <pinMode>
     a2e:	61 e0       	ldi	r22, 0x01	; 1
     a30:	8c 81       	ldd	r24, Y+4	; 0x04
     a32:	0e 94 40 1a 	call	0x3480	; 0x3480 <digitalWrite>
     a36:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN8SPIClass5beginEv>
     a3a:	82 e5       	ldi	r24, 0x52	; 82
     a3c:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <_ZL8settings>
     a40:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <_ZL8settings+0x1>
     a44:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <_ZL8settings>
     a48:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <_ZL8settings+0x1>
     a4c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <_ZN8SPIClass16beginTransactionE11SPISettings>
     a50:	1a e0       	ldi	r17, 0x0A	; 10
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     a58:	11 50       	subi	r17, 0x01	; 1
     a5a:	d9 f7       	brne	.-10     	; 0xa52 <_ZN7Sd2Card4initEhh+0x56>
     a5c:	84 01       	movw	r16, r8
     a5e:	0e 94 07 04 	call	0x80e	; 0x80e <_ZN8SPIClass14endTransactionEv>
     a62:	ce 01       	movw	r24, r28
     a64:	0e 94 26 04 	call	0x84c	; 0x84c <_ZN7Sd2Card13chipSelectLowEv>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	a9 01       	movw	r20, r18
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	ce 01       	movw	r24, r28
     a72:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     a76:	f8 2e       	mov	r15, r24
     a78:	8a 87       	std	Y+10, r24	; 0x0a
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	f8 16       	cp	r15, r24
     a7e:	49 f0       	breq	.+18     	; 0xa92 <_ZN7Sd2Card4initEhh+0x96>
     a80:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     a84:	60 1b       	sub	r22, r16
     a86:	71 0b       	sbc	r23, r17
     a88:	61 3d       	cpi	r22, 0xD1	; 209
     a8a:	77 40       	sbci	r23, 0x07	; 7
     a8c:	68 f3       	brcs	.-38     	; 0xa68 <_ZN7Sd2Card4initEhh+0x6c>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	4c c0       	rjmp	.+152    	; 0xb2a <_ZN7Sd2Card4initEhh+0x12e>
     a92:	2a ea       	ldi	r18, 0xAA	; 170
     a94:	31 e0       	ldi	r19, 0x01	; 1
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	68 e0       	ldi	r22, 0x08	; 8
     a9c:	ce 01       	movw	r24, r28
     a9e:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     aa2:	82 ff       	sbrs	r24, 2
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <_ZN7Sd2Card4initEhh+0xae>
     aa6:	fb 86       	std	Y+11, r15	; 0x0b
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <_ZN7Sd2Card4initEhh+0xca>
     aaa:	94 e0       	ldi	r25, 0x04	; 4
     aac:	f9 2e       	mov	r15, r25
     aae:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     ab2:	8a 87       	std	Y+10, r24	; 0x0a
     ab4:	fa 94       	dec	r15
     ab6:	f1 10       	cpse	r15, r1
     ab8:	fa cf       	rjmp	.-12     	; 0xaae <_ZN7Sd2Card4initEhh+0xb2>
     aba:	8a 3a       	cpi	r24, 0xAA	; 170
     abc:	11 f0       	breq	.+4      	; 0xac2 <_ZN7Sd2Card4initEhh+0xc6>
     abe:	82 e0       	ldi	r24, 0x02	; 2
     ac0:	34 c0       	rjmp	.+104    	; 0xb2a <_ZN7Sd2Card4initEhh+0x12e>
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	8b 87       	std	Y+11, r24	; 0x0b
     ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	21 f0       	breq	.+8      	; 0xad4 <_ZN7Sd2Card4initEhh+0xd8>
     acc:	81 2c       	mov	r8, r1
     ace:	91 2c       	mov	r9, r1
     ad0:	54 01       	movw	r10, r8
     ad2:	05 c0       	rjmp	.+10     	; 0xade <_ZN7Sd2Card4initEhh+0xe2>
     ad4:	81 2c       	mov	r8, r1
     ad6:	91 2c       	mov	r9, r1
     ad8:	a1 2c       	mov	r10, r1
     ada:	80 e4       	ldi	r24, 0x40	; 64
     adc:	b8 2e       	mov	r11, r24
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	a9 01       	movw	r20, r18
     ae4:	67 e3       	ldi	r22, 0x37	; 55
     ae6:	ce 01       	movw	r24, r28
     ae8:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     aec:	a5 01       	movw	r20, r10
     aee:	94 01       	movw	r18, r8
     af0:	69 e2       	ldi	r22, 0x29	; 41
     af2:	ce 01       	movw	r24, r28
     af4:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     af8:	8a 87       	std	Y+10, r24	; 0x0a
     afa:	88 23       	and	r24, r24
     afc:	49 f0       	breq	.+18     	; 0xb10 <_ZN7Sd2Card4initEhh+0x114>
     afe:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     b02:	60 1b       	sub	r22, r16
     b04:	71 0b       	sbc	r23, r17
     b06:	61 3d       	cpi	r22, 0xD1	; 209
     b08:	77 40       	sbci	r23, 0x07	; 7
     b0a:	48 f3       	brcs	.-46     	; 0xade <_ZN7Sd2Card4initEhh+0xe2>
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	0d c0       	rjmp	.+26     	; 0xb2a <_ZN7Sd2Card4initEhh+0x12e>
     b10:	8b 85       	ldd	r24, Y+11	; 0x0b
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	39 f5       	brne	.+78     	; 0xb64 <_ZN7Sd2Card4initEhh+0x168>
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	a9 01       	movw	r20, r18
     b1c:	6a e3       	ldi	r22, 0x3A	; 58
     b1e:	ce 01       	movw	r24, r28
     b20:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     b24:	88 23       	and	r24, r24
     b26:	89 f0       	breq	.+34     	; 0xb4a <_ZN7Sd2Card4initEhh+0x14e>
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	8d 83       	std	Y+5, r24	; 0x05
     b2c:	ce 01       	movw	r24, r28
     b2e:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	df 91       	pop	r29
     b36:	cf 91       	pop	r28
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	bf 90       	pop	r11
     b42:	af 90       	pop	r10
     b44:	9f 90       	pop	r9
     b46:	8f 90       	pop	r8
     b48:	08 95       	ret
     b4a:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     b4e:	80 7c       	andi	r24, 0xC0	; 192
     b50:	80 3c       	cpi	r24, 0xC0	; 192
     b52:	11 f4       	brne	.+4      	; 0xb58 <_ZN7Sd2Card4initEhh+0x15c>
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	8b 87       	std	Y+11, r24	; 0x0b
     b58:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     b5c:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     b60:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     b6a:	6e 2d       	mov	r22, r14
     b6c:	ce 01       	movw	r24, r28
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	bf 90       	pop	r11
     b7c:	af 90       	pop	r10
     b7e:	9f 90       	pop	r9
     b80:	8f 90       	pop	r8
     b82:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <_ZN7Sd2Card10setSckRateEh>

00000b86 <_ZN7Sd2Card14waitStartBlockEv>:
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	ec 01       	movw	r28, r24
     b90:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     b94:	8b 01       	movw	r16, r22
     b96:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     b9a:	8a 87       	std	Y+10, r24	; 0x0a
     b9c:	8f 3f       	cpi	r24, 0xFF	; 255
     b9e:	49 f4       	brne	.+18     	; 0xbb2 <_ZN7Sd2Card14waitStartBlockEv+0x2c>
     ba0:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
     ba4:	60 1b       	sub	r22, r16
     ba6:	71 0b       	sbc	r23, r17
     ba8:	6d 32       	cpi	r22, 0x2D	; 45
     baa:	71 40       	sbci	r23, 0x01	; 1
     bac:	a0 f3       	brcs	.-24     	; 0xb96 <_ZN7Sd2Card14waitStartBlockEv+0x10>
     bae:	8f e0       	ldi	r24, 0x0F	; 15
     bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <_ZN7Sd2Card14waitStartBlockEv+0x32>
     bb2:	8e 3f       	cpi	r24, 0xFE	; 254
     bb4:	39 f0       	breq	.+14     	; 0xbc4 <_ZN7Sd2Card14waitStartBlockEv+0x3e>
     bb6:	8d e0       	ldi	r24, 0x0D	; 13
     bb8:	8d 83       	std	Y+5, r24	; 0x05
     bba:	ce 01       	movw	r24, r28
     bbc:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <_ZN7Sd2Card14waitStartBlockEv+0x40>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <_ZN7Sd2Card8readDataEmjjPh.part.6>:
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	69 01       	movw	r12, r18
     be4:	c8 01       	movw	r24, r16
     be6:	82 0f       	add	r24, r18
     be8:	93 1f       	adc	r25, r19
     bea:	81 30       	cpi	r24, 0x01	; 1
     bec:	92 40       	sbci	r25, 0x02	; 2
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x22>
     bf0:	5c c0       	rjmp	.+184    	; 0xcaa <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
     bf2:	8e 81       	ldd	r24, Y+6	; 0x06
     bf4:	88 23       	and	r24, r24
     bf6:	71 f0       	breq	.+28     	; 0xc14 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
     bf8:	88 81       	ld	r24, Y
     bfa:	99 81       	ldd	r25, Y+1	; 0x01
     bfc:	aa 81       	ldd	r26, Y+2	; 0x02
     bfe:	bb 81       	ldd	r27, Y+3	; 0x03
     c00:	48 17       	cp	r20, r24
     c02:	59 07       	cpc	r21, r25
     c04:	6a 07       	cpc	r22, r26
     c06:	7b 07       	cpc	r23, r27
     c08:	29 f4       	brne	.+10     	; 0xc14 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x44>
     c0a:	8f 81       	ldd	r24, Y+7	; 0x07
     c0c:	98 85       	ldd	r25, Y+8	; 0x08
     c0e:	c8 16       	cp	r12, r24
     c10:	d9 06       	cpc	r13, r25
     c12:	10 f5       	brcc	.+68     	; 0xc58 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
     c14:	48 83       	st	Y, r20
     c16:	59 83       	std	Y+1, r21	; 0x01
     c18:	6a 83       	std	Y+2, r22	; 0x02
     c1a:	7b 83       	std	Y+3, r23	; 0x03
     c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c1e:	83 30       	cpi	r24, 0x03	; 3
     c20:	39 f0       	breq	.+14     	; 0xc30 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x60>
     c22:	89 e0       	ldi	r24, 0x09	; 9
     c24:	44 0f       	add	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	66 1f       	adc	r22, r22
     c2a:	77 1f       	adc	r23, r23
     c2c:	8a 95       	dec	r24
     c2e:	d1 f7       	brne	.-12     	; 0xc24 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x54>
     c30:	9a 01       	movw	r18, r20
     c32:	ab 01       	movw	r20, r22
     c34:	61 e1       	ldi	r22, 0x11	; 17
     c36:	ce 01       	movw	r24, r28
     c38:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     c3c:	88 23       	and	r24, r24
     c3e:	19 f0       	breq	.+6      	; 0xc46 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x76>
     c40:	83 e0       	ldi	r24, 0x03	; 3
     c42:	8d 83       	std	Y+5, r24	; 0x05
     c44:	32 c0       	rjmp	.+100    	; 0xcaa <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
     c46:	ce 01       	movw	r24, r28
     c48:	0e 94 c3 05 	call	0xb86	; 0xb86 <_ZN7Sd2Card14waitStartBlockEv>
     c4c:	88 23       	and	r24, r24
     c4e:	69 f1       	breq	.+90     	; 0xcaa <_ZN7Sd2Card8readDataEmjjPh.part.6+0xda>
     c50:	18 86       	std	Y+8, r1	; 0x08
     c52:	1f 82       	std	Y+7, r1	; 0x07
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	8e 83       	std	Y+6, r24	; 0x06
     c58:	8f 81       	ldd	r24, Y+7	; 0x07
     c5a:	98 85       	ldd	r25, Y+8	; 0x08
     c5c:	8c 15       	cp	r24, r12
     c5e:	9d 05       	cpc	r25, r13
     c60:	40 f4       	brcc	.+16     	; 0xc72 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa2>
     c62:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     c66:	8f 81       	ldd	r24, Y+7	; 0x07
     c68:	98 85       	ldd	r25, Y+8	; 0x08
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	98 87       	std	Y+8, r25	; 0x08
     c6e:	8f 83       	std	Y+7, r24	; 0x07
     c70:	f3 cf       	rjmp	.-26     	; 0xc58 <_ZN7Sd2Card8readDataEmjjPh.part.6+0x88>
     c72:	67 01       	movw	r12, r14
     c74:	e0 0e       	add	r14, r16
     c76:	f1 1e       	adc	r15, r17
     c78:	ce 14       	cp	r12, r14
     c7a:	df 04       	cpc	r13, r15
     c7c:	31 f0       	breq	.+12     	; 0xc8a <_ZN7Sd2Card8readDataEmjjPh.part.6+0xba>
     c7e:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     c82:	f6 01       	movw	r30, r12
     c84:	81 93       	st	Z+, r24
     c86:	6f 01       	movw	r12, r30
     c88:	f7 cf       	rjmp	.-18     	; 0xc78 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xa8>
     c8a:	8f 81       	ldd	r24, Y+7	; 0x07
     c8c:	98 85       	ldd	r25, Y+8	; 0x08
     c8e:	08 0f       	add	r16, r24
     c90:	19 1f       	adc	r17, r25
     c92:	18 87       	std	Y+8, r17	; 0x08
     c94:	0f 83       	std	Y+7, r16	; 0x07
     c96:	89 85       	ldd	r24, Y+9	; 0x09
     c98:	88 23       	and	r24, r24
     c9a:	19 f0       	breq	.+6      	; 0xca2 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xd2>
     c9c:	01 15       	cp	r16, r1
     c9e:	12 40       	sbci	r17, 0x02	; 2
     ca0:	48 f0       	brcs	.+18     	; 0xcb4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
     ca2:	ce 01       	movw	r24, r28
     ca4:	0e 94 3c 04 	call	0x878	; 0x878 <_ZN7Sd2Card7readEndEv>
     ca8:	05 c0       	rjmp	.+10     	; 0xcb4 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe4>
     caa:	ce 01       	movw	r24, r28
     cac:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <_ZN7Sd2Card8readDataEmjjPh.part.6+0xe6>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	08 95       	ret

00000cc8 <_ZN7Sd2Card8readDataEmjjPh>:
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	01 15       	cp	r16, r1
     cd2:	11 05       	cpc	r17, r1
     cd4:	19 f0       	breq	.+6      	; 0xcdc <_ZN7Sd2Card8readDataEmjjPh+0x14>
     cd6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN7Sd2Card8readDataEmjjPh.part.6>
     cda:	01 c0       	rjmp	.+2      	; 0xcde <_ZN7Sd2Card8readDataEmjjPh+0x16>
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <_ZN7Sd2Card9readBlockEmPh>:
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	79 01       	movw	r14, r18
     cf2:	00 e0       	ldi	r16, 0x00	; 0
     cf4:	12 e0       	ldi	r17, 0x02	; 2
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <_ZN7Sd2Card8readDataEmjjPh.part.6>
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <_ZN7Sd2Card9writeDataEhPKh>:
     d08:	cf 92       	push	r12
     d0a:	df 92       	push	r13
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
     d18:	00 d0       	rcall	.+0      	; 0xd1a <_ZN7Sd2Card9writeDataEhPKh+0x12>
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	8c 01       	movw	r16, r24
     d20:	86 2f       	mov	r24, r22
     d22:	49 83       	std	Y+1, r20	; 0x01
     d24:	5a 83       	std	Y+2, r21	; 0x02
     d26:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     d2a:	49 81       	ldd	r20, Y+1	; 0x01
     d2c:	c4 2e       	mov	r12, r20
     d2e:	5a 81       	ldd	r21, Y+2	; 0x02
     d30:	d5 2e       	mov	r13, r21
     d32:	76 01       	movw	r14, r12
     d34:	8e ef       	ldi	r24, 0xFE	; 254
     d36:	f8 1a       	sub	r15, r24
     d38:	f6 01       	movw	r30, r12
     d3a:	81 91       	ld	r24, Z+
     d3c:	6f 01       	movw	r12, r30
     d3e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     d42:	ce 14       	cp	r12, r14
     d44:	df 04       	cpc	r13, r15
     d46:	c1 f7       	brne	.-16     	; 0xd38 <_ZN7Sd2Card9writeDataEhPKh+0x30>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     d4e:	8f ef       	ldi	r24, 0xFF	; 255
     d50:	0e 94 fd 03 	call	0x7fa	; 0x7fa <_ZN8SPIClass8transferEh>
     d54:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     d58:	f8 01       	movw	r30, r16
     d5a:	82 87       	std	Z+10, r24	; 0x0a
     d5c:	98 2f       	mov	r25, r24
     d5e:	9f 71       	andi	r25, 0x1F	; 31
     d60:	95 30       	cpi	r25, 0x05	; 5
     d62:	39 f0       	breq	.+14     	; 0xd72 <_ZN7Sd2Card9writeDataEhPKh+0x6a>
     d64:	81 e1       	ldi	r24, 0x11	; 17
     d66:	85 83       	std	Z+5, r24	; 0x05
     d68:	c8 01       	movw	r24, r16
     d6a:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <_ZN7Sd2Card9writeDataEhPKh+0x6c>
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	08 95       	ret

00000d8a <_ZN7Sd2Card10writeBlockEmPKh>:
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	ec 01       	movw	r28, r24
     d94:	89 01       	movw	r16, r18
     d96:	41 15       	cp	r20, r1
     d98:	51 05       	cpc	r21, r1
     d9a:	61 05       	cpc	r22, r1
     d9c:	71 05       	cpc	r23, r1
     d9e:	11 f4       	brne	.+4      	; 0xda4 <_ZN7Sd2Card10writeBlockEmPKh+0x1a>
     da0:	82 e1       	ldi	r24, 0x12	; 18
     da2:	32 c0       	rjmp	.+100    	; 0xe08 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
     da4:	8b 85       	ldd	r24, Y+11	; 0x0b
     da6:	83 30       	cpi	r24, 0x03	; 3
     da8:	39 f0       	breq	.+14     	; 0xdb8 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
     daa:	89 e0       	ldi	r24, 0x09	; 9
     dac:	44 0f       	add	r20, r20
     dae:	55 1f       	adc	r21, r21
     db0:	66 1f       	adc	r22, r22
     db2:	77 1f       	adc	r23, r23
     db4:	8a 95       	dec	r24
     db6:	d1 f7       	brne	.-12     	; 0xdac <_ZN7Sd2Card10writeBlockEmPKh+0x22>
     db8:	9a 01       	movw	r18, r20
     dba:	ab 01       	movw	r20, r22
     dbc:	68 e1       	ldi	r22, 0x18	; 24
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     dc4:	88 23       	and	r24, r24
     dc6:	11 f0       	breq	.+4      	; 0xdcc <_ZN7Sd2Card10writeBlockEmPKh+0x42>
     dc8:	84 e0       	ldi	r24, 0x04	; 4
     dca:	1e c0       	rjmp	.+60     	; 0xe08 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
     dcc:	a8 01       	movw	r20, r16
     dce:	6e ef       	ldi	r22, 0xFE	; 254
     dd0:	ce 01       	movw	r24, r28
     dd2:	0e 94 84 06 	call	0xd08	; 0xd08 <_ZN7Sd2Card9writeDataEhPKh>
     dd6:	88 23       	and	r24, r24
     dd8:	c1 f0       	breq	.+48     	; 0xe0a <_ZN7Sd2Card10writeBlockEmPKh+0x80>
     dda:	68 e5       	ldi	r22, 0x58	; 88
     ddc:	72 e0       	ldi	r23, 0x02	; 2
     dde:	ce 01       	movw	r24, r28
     de0:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7Sd2Card11waitNotBusyEj>
     de4:	81 11       	cpse	r24, r1
     de6:	02 c0       	rjmp	.+4      	; 0xdec <_ZN7Sd2Card10writeBlockEmPKh+0x62>
     de8:	85 e1       	ldi	r24, 0x15	; 21
     dea:	0e c0       	rjmp	.+28     	; 0xe08 <_ZN7Sd2Card10writeBlockEmPKh+0x7e>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	6d e0       	ldi	r22, 0x0D	; 13
     df4:	ce 01       	movw	r24, r28
     df6:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN7Sd2Card11cardCommandEhm>
     dfa:	81 11       	cpse	r24, r1
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <_ZN7Sd2Card10writeBlockEmPKh+0x7c>
     dfe:	0e 94 04 04 	call	0x808	; 0x808 <_ZL6spiRecv>
     e02:	88 23       	and	r24, r24
     e04:	39 f0       	breq	.+14     	; 0xe14 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
     e06:	84 e1       	ldi	r24, 0x14	; 20
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	ce 01       	movw	r24, r28
     e0c:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <_ZN7Sd2Card10writeBlockEmPKh+0x92>
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 18 04 	call	0x830	; 0x830 <_ZN7Sd2Card14chipSelectHighEv>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
     e26:	ee e9       	ldi	r30, 0x9E	; 158
     e28:	f1 e0       	ldi	r31, 0x01	; 1
     e2a:	80 e5       	ldi	r24, 0x50	; 80
     e2c:	80 83       	st	Z, r24
    spsr = clockDiv & SPI_2XCLOCK_MASK;
     e2e:	11 82       	std	Z+1, r1	; 0x01
     e30:	08 95       	ret

00000e32 <_ZN6SdFile10addClusterEv>:
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
  return rmDir();
}
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	ec 01       	movw	r28, r24
     e38:	9c 01       	movw	r18, r24
     e3a:	2a 5f       	subi	r18, 0xFA	; 250
     e3c:	3f 4f       	sbci	r19, 0xFF	; 255
     e3e:	41 e0       	ldi	r20, 0x01	; 1
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e4a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_ZN8SdVolume15allocContiguousEmPm>
     e4e:	88 23       	and	r24, r24
     e50:	a1 f0       	breq	.+40     	; 0xe7a <_ZN6SdFile10addClusterEv+0x48>
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	a9 8d       	ldd	r26, Y+25	; 0x19
     e58:	ba 8d       	ldd	r27, Y+26	; 0x1a
     e5a:	89 2b       	or	r24, r25
     e5c:	8a 2b       	or	r24, r26
     e5e:	8b 2b       	or	r24, r27
     e60:	59 f4       	brne	.+22     	; 0xe78 <_ZN6SdFile10addClusterEv+0x46>
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	a8 85       	ldd	r26, Y+8	; 0x08
     e68:	b9 85       	ldd	r27, Y+9	; 0x09
     e6a:	8f 8b       	std	Y+23, r24	; 0x17
     e6c:	98 8f       	std	Y+24, r25	; 0x18
     e6e:	a9 8f       	std	Y+25, r26	; 0x19
     e70:	ba 8f       	std	Y+26, r27	; 0x1a
     e72:	8c 81       	ldd	r24, Y+4	; 0x04
     e74:	80 68       	ori	r24, 0x80	; 128
     e76:	8c 83       	std	Y+4, r24	; 0x04
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <_ZN6SdFile13addDirClusterEv>:
     e80:	cf 92       	push	r12
     e82:	df 92       	push	r13
     e84:	ef 92       	push	r14
     e86:	ff 92       	push	r15
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
     e90:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6SdFile10addClusterEv>
     e94:	81 11       	cpse	r24, r1
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <_ZN6SdFile13addDirClusterEv+0x1c>
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	4a c0       	rjmp	.+148    	; 0xf30 <_ZN6SdFile13addDirClusterEv+0xb0>
     e9c:	eb 8d       	ldd	r30, Y+27	; 0x1b
     e9e:	fc 8d       	ldd	r31, Y+28	; 0x1c
     ea0:	ce 80       	ldd	r12, Y+6	; 0x06
     ea2:	df 80       	ldd	r13, Y+7	; 0x07
     ea4:	e8 84       	ldd	r14, Y+8	; 0x08
     ea6:	f9 84       	ldd	r15, Y+9	; 0x09
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	c8 1a       	sub	r12, r24
     eac:	d1 08       	sbc	r13, r1
     eae:	e1 08       	sbc	r14, r1
     eb0:	f1 08       	sbc	r15, r1
     eb2:	05 84       	ldd	r0, Z+13	; 0x0d
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <_ZN6SdFile13addDirClusterEv+0x3e>
     eb6:	cc 0c       	add	r12, r12
     eb8:	dd 1c       	adc	r13, r13
     eba:	ee 1c       	adc	r14, r14
     ebc:	ff 1c       	adc	r15, r15
     ebe:	0a 94       	dec	r0
     ec0:	d2 f7       	brpl	.-12     	; 0xeb6 <_ZN6SdFile13addDirClusterEv+0x36>
     ec2:	86 85       	ldd	r24, Z+14	; 0x0e
     ec4:	97 85       	ldd	r25, Z+15	; 0x0f
     ec6:	a0 89       	ldd	r26, Z+16	; 0x10
     ec8:	b1 89       	ldd	r27, Z+17	; 0x11
     eca:	c8 0e       	add	r12, r24
     ecc:	d9 1e       	adc	r13, r25
     ece:	ea 1e       	adc	r14, r26
     ed0:	fb 1e       	adc	r15, r27
     ed2:	14 81       	ldd	r17, Z+4	; 0x04
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	c8 1a       	sub	r12, r24
     ed8:	d1 08       	sbc	r13, r1
     eda:	e1 08       	sbc	r14, r1
     edc:	f1 08       	sbc	r15, r1
     ede:	11 23       	and	r17, r17
     ee0:	61 f0       	breq	.+24     	; 0xefa <_ZN6SdFile13addDirClusterEv+0x7a>
     ee2:	c7 01       	movw	r24, r14
     ee4:	b6 01       	movw	r22, r12
     ee6:	61 0f       	add	r22, r17
     ee8:	71 1d       	adc	r23, r1
     eea:	81 1d       	adc	r24, r1
     eec:	91 1d       	adc	r25, r1
     eee:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN8SdVolume14cacheZeroBlockEm>
     ef2:	88 23       	and	r24, r24
     ef4:	89 f2       	breq	.-94     	; 0xe98 <_ZN6SdFile13addDirClusterEv+0x18>
     ef6:	11 50       	subi	r17, 0x01	; 1
     ef8:	f2 cf       	rjmp	.-28     	; 0xede <_ZN6SdFile13addDirClusterEv+0x5e>
     efa:	eb 8d       	ldd	r30, Y+27	; 0x1b
     efc:	fc 8d       	ldd	r31, Y+28	; 0x1c
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	92 e0       	ldi	r25, 0x02	; 2
     f02:	a0 e0       	ldi	r26, 0x00	; 0
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	05 84       	ldd	r0, Z+13	; 0x0d
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <_ZN6SdFile13addDirClusterEv+0x92>
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	aa 1f       	adc	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	0a 94       	dec	r0
     f14:	d2 f7       	brpl	.-12     	; 0xf0a <_ZN6SdFile13addDirClusterEv+0x8a>
     f16:	4b 89       	ldd	r20, Y+19	; 0x13
     f18:	5c 89       	ldd	r21, Y+20	; 0x14
     f1a:	6d 89       	ldd	r22, Y+21	; 0x15
     f1c:	7e 89       	ldd	r23, Y+22	; 0x16
     f1e:	84 0f       	add	r24, r20
     f20:	95 1f       	adc	r25, r21
     f22:	a6 1f       	adc	r26, r22
     f24:	b7 1f       	adc	r27, r23
     f26:	8b 8b       	std	Y+19, r24	; 0x13
     f28:	9c 8b       	std	Y+20, r25	; 0x14
     f2a:	ad 8b       	std	Y+21, r26	; 0x15
     f2c:	be 8b       	std	Y+22, r27	; 0x16
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	08 95       	ret

00000f40 <_ZN6SdFile13cacheDirEntryEh>:
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	ec 01       	movw	r28, r24
     f46:	46 2f       	mov	r20, r22
     f48:	6e 85       	ldd	r22, Y+14	; 0x0e
     f4a:	7f 85       	ldd	r23, Y+15	; 0x0f
     f4c:	88 89       	ldd	r24, Y+16	; 0x10
     f4e:	99 89       	ldd	r25, Y+17	; 0x11
     f50:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
     f54:	88 23       	and	r24, r24
     f56:	41 f0       	breq	.+16     	; 0xf68 <_ZN6SdFile13cacheDirEntryEh+0x28>
     f58:	8a 89       	ldd	r24, Y+18	; 0x12
     f5a:	20 e2       	ldi	r18, 0x20	; 32
     f5c:	82 9f       	mul	r24, r18
     f5e:	c0 01       	movw	r24, r0
     f60:	11 24       	eor	r1, r1
     f62:	87 55       	subi	r24, 0x57	; 87
     f64:	9e 4f       	sbci	r25, 0xFE	; 254
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <_ZN6SdFile13cacheDirEntryEh+0x2c>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <_ZN6SdFile10make83NameEPKcPh>:
     f72:	fb 01       	movw	r30, r22
     f74:	9b 01       	movw	r18, r22
     f76:	25 5f       	subi	r18, 0xF5	; 245
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	41 93       	st	Z+, r20
     f7e:	e2 17       	cp	r30, r18
     f80:	f3 07       	cpc	r31, r19
     f82:	e1 f7       	brne	.-8      	; 0xf7c <_ZN6SdFile10make83NameEPKcPh+0xa>
     f84:	dc 01       	movw	r26, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	27 e0       	ldi	r18, 0x07	; 7
     f8a:	8d 91       	ld	r24, X+
     f8c:	88 23       	and	r24, r24
     f8e:	19 f1       	breq	.+70     	; 0xfd6 <_ZN6SdFile10make83NameEPKcPh+0x64>
     f90:	8e 32       	cpi	r24, 0x2E	; 46
     f92:	19 f0       	breq	.+6      	; 0xf9a <_ZN6SdFile10make83NameEPKcPh+0x28>
     f94:	e8 e7       	ldi	r30, 0x78	; 120
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <_ZN6SdFile10make83NameEPKcPh+0x38>
     f9a:	2a 30       	cpi	r18, 0x0A	; 10
     f9c:	09 f1       	breq	.+66     	; 0xfe0 <_ZN6SdFile10make83NameEPKcPh+0x6e>
     f9e:	98 e0       	ldi	r25, 0x08	; 8
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	f3 cf       	rjmp	.-26     	; 0xf8a <_ZN6SdFile10make83NameEPKcPh+0x18>
     fa4:	31 96       	adiw	r30, 0x01	; 1
     fa6:	38 17       	cp	r19, r24
     fa8:	d9 f0       	breq	.+54     	; 0xfe0 <_ZN6SdFile10make83NameEPKcPh+0x6e>
     faa:	34 91       	lpm	r19, Z
     fac:	31 11       	cpse	r19, r1
     fae:	fa cf       	rjmp	.-12     	; 0xfa4 <_ZN6SdFile10make83NameEPKcPh+0x32>
     fb0:	29 17       	cp	r18, r25
     fb2:	b0 f0       	brcs	.+44     	; 0xfe0 <_ZN6SdFile10make83NameEPKcPh+0x6e>
     fb4:	3f ed       	ldi	r19, 0xDF	; 223
     fb6:	38 0f       	add	r19, r24
     fb8:	3e 35       	cpi	r19, 0x5E	; 94
     fba:	90 f4       	brcc	.+36     	; 0xfe0 <_ZN6SdFile10make83NameEPKcPh+0x6e>
     fbc:	31 e0       	ldi	r19, 0x01	; 1
     fbe:	39 0f       	add	r19, r25
     fc0:	fb 01       	movw	r30, r22
     fc2:	e9 0f       	add	r30, r25
     fc4:	f1 1d       	adc	r31, r1
     fc6:	9f e9       	ldi	r25, 0x9F	; 159
     fc8:	98 0f       	add	r25, r24
     fca:	9a 31       	cpi	r25, 0x1A	; 26
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <_ZN6SdFile10make83NameEPKcPh+0x5e>
     fce:	80 52       	subi	r24, 0x20	; 32
     fd0:	80 83       	st	Z, r24
     fd2:	93 2f       	mov	r25, r19
     fd4:	da cf       	rjmp	.-76     	; 0xf8a <_ZN6SdFile10make83NameEPKcPh+0x18>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	fb 01       	movw	r30, r22
     fda:	90 81       	ld	r25, Z
     fdc:	90 32       	cpi	r25, 0x20	; 32
     fde:	09 f4       	brne	.+2      	; 0xfe2 <_ZN6SdFile10make83NameEPKcPh+0x70>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	08 95       	ret

00000fe4 <_ZN6SdFile8openRootEP8SdVolume>:
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	fc 01       	movw	r30, r24
     fee:	25 81       	ldd	r18, Z+5	; 0x05
     ff0:	22 23       	and	r18, r18
     ff2:	11 f0       	breq	.+4      	; 0xff8 <_ZN6SdFile8openRootEP8SdVolume+0x14>
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	42 c0       	rjmp	.+132    	; 0x107c <_ZN6SdFile8openRootEP8SdVolume+0x98>
     ff8:	8b 01       	movw	r16, r22
     ffa:	ec 01       	movw	r28, r24
     ffc:	fb 01       	movw	r30, r22
     ffe:	87 89       	ldd	r24, Z+23	; 0x17
    1000:	80 31       	cpi	r24, 0x10	; 16
    1002:	b1 f4       	brne	.+44     	; 0x1030 <_ZN6SdFile8openRootEP8SdVolume+0x4c>
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	1f 8a       	std	Y+23, r1	; 0x17
    100a:	18 8e       	std	Y+24, r1	; 0x18
    100c:	19 8e       	std	Y+25, r1	; 0x19
    100e:	1a 8e       	std	Y+26, r1	; 0x1a
    1010:	80 8d       	ldd	r24, Z+24	; 0x18
    1012:	91 8d       	ldd	r25, Z+25	; 0x19
    1014:	a0 e0       	ldi	r26, 0x00	; 0
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	25 e0       	ldi	r18, 0x05	; 5
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	aa 1f       	adc	r26, r26
    1020:	bb 1f       	adc	r27, r27
    1022:	2a 95       	dec	r18
    1024:	d1 f7       	brne	.-12     	; 0x101a <_ZN6SdFile8openRootEP8SdVolume+0x36>
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	9c 8b       	std	Y+20, r25	; 0x14
    102a:	ad 8b       	std	Y+21, r26	; 0x15
    102c:	be 8b       	std	Y+22, r27	; 0x16
    102e:	15 c0       	rjmp	.+42     	; 0x105a <_ZN6SdFile8openRootEP8SdVolume+0x76>
    1030:	80 32       	cpi	r24, 0x20	; 32
    1032:	01 f7       	brne	.-64     	; 0xff4 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	fb 01       	movw	r30, r22
    103a:	42 8d       	ldd	r20, Z+26	; 0x1a
    103c:	53 8d       	ldd	r21, Z+27	; 0x1b
    103e:	64 8d       	ldd	r22, Z+28	; 0x1c
    1040:	75 8d       	ldd	r23, Z+29	; 0x1d
    1042:	4f 8b       	std	Y+23, r20	; 0x17
    1044:	58 8f       	std	Y+24, r21	; 0x18
    1046:	69 8f       	std	Y+25, r22	; 0x19
    1048:	7a 8f       	std	Y+26, r23	; 0x1a
    104a:	9e 01       	movw	r18, r28
    104c:	2d 5e       	subi	r18, 0xED	; 237
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	c8 01       	movw	r24, r16
    1052:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZNK8SdVolume9chainSizeEmPm>
    1056:	88 23       	and	r24, r24
    1058:	69 f2       	breq	.-102    	; 0xff4 <_ZN6SdFile8openRootEP8SdVolume+0x10>
    105a:	1c 8f       	std	Y+28, r17	; 0x1c
    105c:	0b 8f       	std	Y+27, r16	; 0x1b
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	8c 83       	std	Y+4, r24	; 0x04
    1062:	1e 82       	std	Y+6, r1	; 0x06
    1064:	1f 82       	std	Y+7, r1	; 0x07
    1066:	18 86       	std	Y+8, r1	; 0x08
    1068:	19 86       	std	Y+9, r1	; 0x09
    106a:	1a 86       	std	Y+10, r1	; 0x0a
    106c:	1b 86       	std	Y+11, r1	; 0x0b
    106e:	1c 86       	std	Y+12, r1	; 0x0c
    1070:	1d 86       	std	Y+13, r1	; 0x0d
    1072:	1e 86       	std	Y+14, r1	; 0x0e
    1074:	1f 86       	std	Y+15, r1	; 0x0f
    1076:	18 8a       	std	Y+16, r1	; 0x10
    1078:	19 8a       	std	Y+17, r1	; 0x11
    107a:	1a 8a       	std	Y+18, r1	; 0x12
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	1f 91       	pop	r17
    1082:	0f 91       	pop	r16
    1084:	08 95       	ret

00001086 <_ZN6SdFile4readEPvj>:
    1086:	2f 92       	push	r2
    1088:	3f 92       	push	r3
    108a:	4f 92       	push	r4
    108c:	5f 92       	push	r5
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	ec 01       	movw	r28, r24
    10ac:	5b 01       	movw	r10, r22
    10ae:	4a 01       	movw	r8, r20
    10b0:	8d 81       	ldd	r24, Y+5	; 0x05
    10b2:	81 11       	cpse	r24, r1
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <_ZN6SdFile4readEPvj+0x36>
    10b6:	8f ef       	ldi	r24, 0xFF	; 255
    10b8:	9f ef       	ldi	r25, 0xFF	; 255
    10ba:	d7 c0       	rjmp	.+430    	; 0x126a <_ZN6SdFile4readEPvj+0x1e4>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	80 ff       	sbrs	r24, 0
    10c0:	fa cf       	rjmp	.-12     	; 0x10b6 <_ZN6SdFile4readEPvj+0x30>
    10c2:	4b 88       	ldd	r4, Y+19	; 0x13
    10c4:	5c 88       	ldd	r5, Y+20	; 0x14
    10c6:	6d 88       	ldd	r6, Y+21	; 0x15
    10c8:	7e 88       	ldd	r7, Y+22	; 0x16
    10ca:	4a 85       	ldd	r20, Y+10	; 0x0a
    10cc:	5b 85       	ldd	r21, Y+11	; 0x0b
    10ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    10d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    10d2:	c4 01       	movw	r24, r8
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	93 01       	movw	r18, r6
    10da:	82 01       	movw	r16, r4
    10dc:	04 1b       	sub	r16, r20
    10de:	15 0b       	sbc	r17, r21
    10e0:	26 0b       	sbc	r18, r22
    10e2:	37 0b       	sbc	r19, r23
    10e4:	08 17       	cp	r16, r24
    10e6:	19 07       	cpc	r17, r25
    10e8:	2a 07       	cpc	r18, r26
    10ea:	3b 07       	cpc	r19, r27
    10ec:	18 f4       	brcc	.+6      	; 0x10f4 <_ZN6SdFile4readEPvj+0x6e>
    10ee:	42 01       	movw	r8, r4
    10f0:	84 1a       	sub	r8, r20
    10f2:	95 0a       	sbc	r9, r21
    10f4:	24 01       	movw	r4, r8
    10f6:	1e 01       	movw	r2, r28
    10f8:	26 e0       	ldi	r18, 0x06	; 6
    10fa:	22 0e       	add	r2, r18
    10fc:	31 1c       	adc	r3, r1
    10fe:	41 14       	cp	r4, r1
    1100:	51 04       	cpc	r5, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <_ZN6SdFile4readEPvj+0x80>
    1104:	7e c0       	rjmp	.+252    	; 0x1202 <_ZN6SdFile4readEPvj+0x17c>
    1106:	4a 85       	ldd	r20, Y+10	; 0x0a
    1108:	5b 85       	ldd	r21, Y+11	; 0x0b
    110a:	6c 85       	ldd	r22, Y+12	; 0x0c
    110c:	7d 85       	ldd	r23, Y+13	; 0x0d
    110e:	6a 01       	movw	r12, r20
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	d8 22       	and	r13, r24
    1114:	ed 81       	ldd	r30, Y+5	; 0x05
    1116:	8a 01       	movw	r16, r20
    1118:	9b 01       	movw	r18, r22
    111a:	89 e0       	ldi	r24, 0x09	; 9
    111c:	36 95       	lsr	r19
    111e:	27 95       	ror	r18
    1120:	17 95       	ror	r17
    1122:	07 95       	ror	r16
    1124:	8a 95       	dec	r24
    1126:	d1 f7       	brne	.-12     	; 0x111c <_ZN6SdFile4readEPvj+0x96>
    1128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    112a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    112c:	e2 30       	cpi	r30, 0x02	; 2
    112e:	61 f4       	brne	.+24     	; 0x1148 <_ZN6SdFile4readEPvj+0xc2>
    1130:	fc 01       	movw	r30, r24
    1132:	82 8d       	ldd	r24, Z+26	; 0x1a
    1134:	93 8d       	ldd	r25, Z+27	; 0x1b
    1136:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1138:	b5 8d       	ldd	r27, Z+29	; 0x1d
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	60 0f       	add	r22, r16
    1140:	71 1f       	adc	r23, r17
    1142:	82 1f       	adc	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	3f c0       	rjmp	.+126    	; 0x11c6 <_ZN6SdFile4readEPvj+0x140>
    1148:	fc 01       	movw	r30, r24
    114a:	74 80       	ldd	r7, Z+4	; 0x04
    114c:	7a 94       	dec	r7
    114e:	70 22       	and	r7, r16
    1150:	c1 14       	cp	r12, r1
    1152:	d1 04       	cpc	r13, r1
    1154:	c9 f4       	brne	.+50     	; 0x1188 <_ZN6SdFile4readEPvj+0x102>
    1156:	71 10       	cpse	r7, r1
    1158:	17 c0       	rjmp	.+46     	; 0x1188 <_ZN6SdFile4readEPvj+0x102>
    115a:	45 2b       	or	r20, r21
    115c:	46 2b       	or	r20, r22
    115e:	47 2b       	or	r20, r23
    1160:	49 f4       	brne	.+18     	; 0x1174 <_ZN6SdFile4readEPvj+0xee>
    1162:	8f 89       	ldd	r24, Y+23	; 0x17
    1164:	98 8d       	ldd	r25, Y+24	; 0x18
    1166:	a9 8d       	ldd	r26, Y+25	; 0x19
    1168:	ba 8d       	ldd	r27, Y+26	; 0x1a
    116a:	8e 83       	std	Y+6, r24	; 0x06
    116c:	9f 83       	std	Y+7, r25	; 0x07
    116e:	a8 87       	std	Y+8, r26	; 0x08
    1170:	b9 87       	std	Y+9, r27	; 0x09
    1172:	0a c0       	rjmp	.+20     	; 0x1188 <_ZN6SdFile4readEPvj+0x102>
    1174:	4e 81       	ldd	r20, Y+6	; 0x06
    1176:	5f 81       	ldd	r21, Y+7	; 0x07
    1178:	68 85       	ldd	r22, Y+8	; 0x08
    117a:	79 85       	ldd	r23, Y+9	; 0x09
    117c:	91 01       	movw	r18, r2
    117e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    1182:	88 23       	and	r24, r24
    1184:	09 f4       	brne	.+2      	; 0x1188 <_ZN6SdFile4readEPvj+0x102>
    1186:	97 cf       	rjmp	.-210    	; 0x10b6 <_ZN6SdFile4readEPvj+0x30>
    1188:	eb 8d       	ldd	r30, Y+27	; 0x1b
    118a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    118c:	8e 81       	ldd	r24, Y+6	; 0x06
    118e:	9f 81       	ldd	r25, Y+7	; 0x07
    1190:	a8 85       	ldd	r26, Y+8	; 0x08
    1192:	b9 85       	ldd	r27, Y+9	; 0x09
    1194:	02 97       	sbiw	r24, 0x02	; 2
    1196:	a1 09       	sbc	r26, r1
    1198:	b1 09       	sbc	r27, r1
    119a:	05 84       	ldd	r0, Z+13	; 0x0d
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <_ZN6SdFile4readEPvj+0x120>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	aa 1f       	adc	r26, r26
    11a4:	bb 1f       	adc	r27, r27
    11a6:	0a 94       	dec	r0
    11a8:	d2 f7       	brpl	.-12     	; 0x119e <_ZN6SdFile4readEPvj+0x118>
    11aa:	46 85       	ldd	r20, Z+14	; 0x0e
    11ac:	57 85       	ldd	r21, Z+15	; 0x0f
    11ae:	60 89       	ldd	r22, Z+16	; 0x10
    11b0:	71 89       	ldd	r23, Z+17	; 0x11
    11b2:	84 0f       	add	r24, r20
    11b4:	95 1f       	adc	r25, r21
    11b6:	a6 1f       	adc	r26, r22
    11b8:	b7 1f       	adc	r27, r23
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	67 0d       	add	r22, r7
    11c0:	71 1d       	adc	r23, r1
    11c2:	81 1d       	adc	r24, r1
    11c4:	91 1d       	adc	r25, r1
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	32 e0       	ldi	r19, 0x02	; 2
    11ca:	2c 19       	sub	r18, r12
    11cc:	3d 09       	sbc	r19, r13
    11ce:	32 01       	movw	r6, r4
    11d0:	24 15       	cp	r18, r4
    11d2:	35 05       	cpc	r19, r5
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <_ZN6SdFile4readEPvj+0x152>
    11d6:	39 01       	movw	r6, r18
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	26 fd       	sbrc	r18, 6
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <_ZN6SdFile4readEPvj+0x160>
    11de:	61 14       	cp	r6, r1
    11e0:	f2 e0       	ldi	r31, 0x02	; 2
    11e2:	7f 06       	cpc	r7, r31
    11e4:	79 f5       	brne	.+94     	; 0x1244 <_ZN6SdFile4readEPvj+0x1be>
    11e6:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    11ea:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    11ee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    11f2:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    11f6:	60 17       	cp	r22, r16
    11f8:	71 07       	cpc	r23, r17
    11fa:	82 07       	cpc	r24, r18
    11fc:	93 07       	cpc	r25, r19
    11fe:	19 f4       	brne	.+6      	; 0x1206 <_ZN6SdFile4readEPvj+0x180>
    1200:	21 c0       	rjmp	.+66     	; 0x1244 <_ZN6SdFile4readEPvj+0x1be>
    1202:	c4 01       	movw	r24, r8
    1204:	32 c0       	rjmp	.+100    	; 0x126a <_ZN6SdFile4readEPvj+0x1e4>
    1206:	75 01       	movw	r14, r10
    1208:	83 01       	movw	r16, r6
    120a:	96 01       	movw	r18, r12
    120c:	ab 01       	movw	r20, r22
    120e:	bc 01       	movw	r22, r24
    1210:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN8SdVolume7sdCard_E>
    1214:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN8SdVolume7sdCard_E+0x1>
    1218:	0e 94 64 06 	call	0xcc8	; 0xcc8 <_ZN7Sd2Card8readDataEmjjPh>
    121c:	88 23       	and	r24, r24
    121e:	09 f4       	brne	.+2      	; 0x1222 <_ZN6SdFile4readEPvj+0x19c>
    1220:	4a cf       	rjmp	.-364    	; 0x10b6 <_ZN6SdFile4readEPvj+0x30>
    1222:	a6 0c       	add	r10, r6
    1224:	b7 1c       	adc	r11, r7
    1226:	8a 85       	ldd	r24, Y+10	; 0x0a
    1228:	9b 85       	ldd	r25, Y+11	; 0x0b
    122a:	ac 85       	ldd	r26, Y+12	; 0x0c
    122c:	bd 85       	ldd	r27, Y+13	; 0x0d
    122e:	86 0d       	add	r24, r6
    1230:	97 1d       	adc	r25, r7
    1232:	a1 1d       	adc	r26, r1
    1234:	b1 1d       	adc	r27, r1
    1236:	8a 87       	std	Y+10, r24	; 0x0a
    1238:	9b 87       	std	Y+11, r25	; 0x0b
    123a:	ac 87       	std	Y+12, r26	; 0x0c
    123c:	bd 87       	std	Y+13, r27	; 0x0d
    123e:	46 18       	sub	r4, r6
    1240:	57 08       	sbc	r5, r7
    1242:	5d cf       	rjmp	.-326    	; 0x10fe <_ZN6SdFile4readEPvj+0x78>
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
    124a:	88 23       	and	r24, r24
    124c:	09 f4       	brne	.+2      	; 0x1250 <_ZN6SdFile4readEPvj+0x1ca>
    124e:	33 cf       	rjmp	.-410    	; 0x10b6 <_ZN6SdFile4readEPvj+0x30>
    1250:	f6 01       	movw	r30, r12
    1252:	e7 55       	subi	r30, 0x57	; 87
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	d5 01       	movw	r26, r10
    1258:	cf 01       	movw	r24, r30
    125a:	86 0d       	add	r24, r6
    125c:	97 1d       	adc	r25, r7
    125e:	e8 17       	cp	r30, r24
    1260:	f9 07       	cpc	r31, r25
    1262:	f9 f2       	breq	.-66     	; 0x1222 <_ZN6SdFile4readEPvj+0x19c>
    1264:	21 91       	ld	r18, Z+
    1266:	2d 93       	st	X+, r18
    1268:	fa cf       	rjmp	.-12     	; 0x125e <_ZN6SdFile4readEPvj+0x1d8>
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	1f 91       	pop	r17
    1270:	0f 91       	pop	r16
    1272:	ff 90       	pop	r15
    1274:	ef 90       	pop	r14
    1276:	df 90       	pop	r13
    1278:	cf 90       	pop	r12
    127a:	bf 90       	pop	r11
    127c:	af 90       	pop	r10
    127e:	9f 90       	pop	r9
    1280:	8f 90       	pop	r8
    1282:	7f 90       	pop	r7
    1284:	6f 90       	pop	r6
    1286:	5f 90       	pop	r5
    1288:	4f 90       	pop	r4
    128a:	3f 90       	pop	r3
    128c:	2f 90       	pop	r2
    128e:	08 95       	ret

00001290 <_ZN6SdFile12readDirCacheEv>:
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	1f 92       	push	r1
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	fc 01       	movw	r30, r24
    12a2:	25 81       	ldd	r18, Z+5	; 0x05
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	18 f4       	brcc	.+6      	; 0x12ae <_ZN6SdFile12readDirCacheEv+0x1e>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	33 c0       	rjmp	.+102    	; 0x1314 <_ZN6SdFile12readDirCacheEv+0x84>
    12ae:	8c 01       	movw	r16, r24
    12b0:	fc 01       	movw	r30, r24
    12b2:	42 85       	ldd	r20, Z+10	; 0x0a
    12b4:	53 85       	ldd	r21, Z+11	; 0x0b
    12b6:	64 85       	ldd	r22, Z+12	; 0x0c
    12b8:	75 85       	ldd	r23, Z+13	; 0x0d
    12ba:	85 e0       	ldi	r24, 0x05	; 5
    12bc:	76 95       	lsr	r23
    12be:	67 95       	ror	r22
    12c0:	57 95       	ror	r21
    12c2:	47 95       	ror	r20
    12c4:	8a 95       	dec	r24
    12c6:	d1 f7       	brne	.-12     	; 0x12bc <_ZN6SdFile12readDirCacheEv+0x2c>
    12c8:	f4 2f       	mov	r31, r20
    12ca:	ff 70       	andi	r31, 0x0F	; 15
    12cc:	ff 2e       	mov	r15, r31
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	be 01       	movw	r22, r28
    12d4:	6f 5f       	subi	r22, 0xFF	; 255
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	c8 01       	movw	r24, r16
    12da:	0e 94 43 08 	call	0x1086	; 0x1086 <_ZN6SdFile4readEPvj>
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <_ZN6SdFile12readDirCacheEv+0x58>
    12e2:	89 81       	ldd	r24, Y+1	; 0x01
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <_ZN6SdFile12readDirCacheEv+0x5c>
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	9f ef       	ldi	r25, 0xFF	; 255
    12ec:	01 96       	adiw	r24, 0x01	; 1
    12ee:	e1 f2       	breq	.-72     	; 0x12a8 <_ZN6SdFile12readDirCacheEv+0x18>
    12f0:	f8 01       	movw	r30, r16
    12f2:	82 85       	ldd	r24, Z+10	; 0x0a
    12f4:	93 85       	ldd	r25, Z+11	; 0x0b
    12f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    12f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    12fa:	4f 96       	adiw	r24, 0x1f	; 31
    12fc:	a1 1d       	adc	r26, r1
    12fe:	b1 1d       	adc	r27, r1
    1300:	82 87       	std	Z+10, r24	; 0x0a
    1302:	93 87       	std	Z+11, r25	; 0x0b
    1304:	a4 87       	std	Z+12, r26	; 0x0c
    1306:	b5 87       	std	Z+13, r27	; 0x0d
    1308:	f0 e2       	ldi	r31, 0x20	; 32
    130a:	ff 9e       	mul	r15, r31
    130c:	c0 01       	movw	r24, r0
    130e:	11 24       	eor	r1, r1
    1310:	87 55       	subi	r24, 0x57	; 87
    1312:	9e 4f       	sbci	r25, 0xFE	; 254
    1314:	0f 90       	pop	r0
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	08 95       	ret

00001322 <_ZN6SdFile7seekSetEm>:
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	ec 01       	movw	r28, r24
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	81 11       	cpse	r24, r1
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <_ZN6SdFile7seekSetEm+0x24>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	77 c0       	rjmp	.+238    	; 0x1434 <_ZN6SdFile7seekSetEm+0x112>
    1346:	0b 89       	ldd	r16, Y+19	; 0x13
    1348:	1c 89       	ldd	r17, Y+20	; 0x14
    134a:	2d 89       	ldd	r18, Y+21	; 0x15
    134c:	3e 89       	ldd	r19, Y+22	; 0x16
    134e:	04 17       	cp	r16, r20
    1350:	15 07       	cpc	r17, r21
    1352:	26 07       	cpc	r18, r22
    1354:	37 07       	cpc	r19, r23
    1356:	a8 f3       	brcs	.-22     	; 0x1342 <_ZN6SdFile7seekSetEm+0x20>
    1358:	6a 01       	movw	r12, r20
    135a:	7b 01       	movw	r14, r22
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	29 f4       	brne	.+10     	; 0x136a <_ZN6SdFile7seekSetEm+0x48>
    1360:	ca 86       	std	Y+10, r12	; 0x0a
    1362:	db 86       	std	Y+11, r13	; 0x0b
    1364:	ec 86       	std	Y+12, r14	; 0x0c
    1366:	fd 86       	std	Y+13, r15	; 0x0d
    1368:	0d c0       	rjmp	.+26     	; 0x1384 <_ZN6SdFile7seekSetEm+0x62>
    136a:	c1 14       	cp	r12, r1
    136c:	d1 04       	cpc	r13, r1
    136e:	e1 04       	cpc	r14, r1
    1370:	f1 04       	cpc	r15, r1
    1372:	51 f4       	brne	.+20     	; 0x1388 <_ZN6SdFile7seekSetEm+0x66>
    1374:	1e 82       	std	Y+6, r1	; 0x06
    1376:	1f 82       	std	Y+7, r1	; 0x07
    1378:	18 86       	std	Y+8, r1	; 0x08
    137a:	19 86       	std	Y+9, r1	; 0x09
    137c:	1a 86       	std	Y+10, r1	; 0x0a
    137e:	1b 86       	std	Y+11, r1	; 0x0b
    1380:	1c 86       	std	Y+12, r1	; 0x0c
    1382:	1d 86       	std	Y+13, r1	; 0x0d
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	56 c0       	rjmp	.+172    	; 0x1434 <_ZN6SdFile7seekSetEm+0x112>
    1388:	8a 84       	ldd	r8, Y+10	; 0x0a
    138a:	9b 84       	ldd	r9, Y+11	; 0x0b
    138c:	ac 84       	ldd	r10, Y+12	; 0x0c
    138e:	bd 84       	ldd	r11, Y+13	; 0x0d
    1390:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1392:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1394:	25 85       	ldd	r18, Z+13	; 0x0d
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	27 5f       	subi	r18, 0xF7	; 247
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	b5 01       	movw	r22, r10
    139e:	a4 01       	movw	r20, r8
    13a0:	41 50       	subi	r20, 0x01	; 1
    13a2:	51 09       	sbc	r21, r1
    13a4:	61 09       	sbc	r22, r1
    13a6:	71 09       	sbc	r23, r1
    13a8:	02 2e       	mov	r0, r18
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <_ZN6SdFile7seekSetEm+0x92>
    13ac:	76 95       	lsr	r23
    13ae:	67 95       	ror	r22
    13b0:	57 95       	ror	r21
    13b2:	47 95       	ror	r20
    13b4:	0a 94       	dec	r0
    13b6:	d2 f7       	brpl	.-12     	; 0x13ac <_ZN6SdFile7seekSetEm+0x8a>
    13b8:	d7 01       	movw	r26, r14
    13ba:	c6 01       	movw	r24, r12
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	a1 09       	sbc	r26, r1
    13c0:	b1 09       	sbc	r27, r1
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <_ZN6SdFile7seekSetEm+0xaa>
    13c4:	b6 95       	lsr	r27
    13c6:	a7 95       	ror	r26
    13c8:	97 95       	ror	r25
    13ca:	87 95       	ror	r24
    13cc:	2a 95       	dec	r18
    13ce:	d2 f7       	brpl	.-12     	; 0x13c4 <_ZN6SdFile7seekSetEm+0xa2>
    13d0:	84 17       	cp	r24, r20
    13d2:	95 07       	cpc	r25, r21
    13d4:	a6 07       	cpc	r26, r22
    13d6:	b7 07       	cpc	r27, r23
    13d8:	20 f0       	brcs	.+8      	; 0x13e2 <_ZN6SdFile7seekSetEm+0xc0>
    13da:	89 28       	or	r8, r9
    13dc:	8a 28       	or	r8, r10
    13de:	8b 28       	or	r8, r11
    13e0:	49 f4       	brne	.+18     	; 0x13f4 <_ZN6SdFile7seekSetEm+0xd2>
    13e2:	4f 89       	ldd	r20, Y+23	; 0x17
    13e4:	58 8d       	ldd	r21, Y+24	; 0x18
    13e6:	69 8d       	ldd	r22, Y+25	; 0x19
    13e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ea:	4e 83       	std	Y+6, r20	; 0x06
    13ec:	5f 83       	std	Y+7, r21	; 0x07
    13ee:	68 87       	std	Y+8, r22	; 0x08
    13f0:	79 87       	std	Y+9, r23	; 0x09
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <_ZN6SdFile7seekSetEm+0xda>
    13f4:	84 1b       	sub	r24, r20
    13f6:	95 0b       	sbc	r25, r21
    13f8:	a6 0b       	sbc	r26, r22
    13fa:	b7 0b       	sbc	r27, r23
    13fc:	4c 01       	movw	r8, r24
    13fe:	5d 01       	movw	r10, r26
    1400:	8e 01       	movw	r16, r28
    1402:	0a 5f       	subi	r16, 0xFA	; 250
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	81 14       	cp	r8, r1
    1408:	91 04       	cpc	r9, r1
    140a:	a1 04       	cpc	r10, r1
    140c:	b1 04       	cpc	r11, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <_ZN6SdFile7seekSetEm+0xf0>
    1410:	a7 cf       	rjmp	.-178    	; 0x1360 <_ZN6SdFile7seekSetEm+0x3e>
    1412:	4e 81       	ldd	r20, Y+6	; 0x06
    1414:	5f 81       	ldd	r21, Y+7	; 0x07
    1416:	68 85       	ldd	r22, Y+8	; 0x08
    1418:	79 85       	ldd	r23, Y+9	; 0x09
    141a:	98 01       	movw	r18, r16
    141c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1420:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	89 1a       	sub	r8, r25
    1428:	91 08       	sbc	r9, r1
    142a:	a1 08       	sbc	r10, r1
    142c:	b1 08       	sbc	r11, r1
    142e:	81 11       	cpse	r24, r1
    1430:	ea cf       	rjmp	.-44     	; 0x1406 <_ZN6SdFile7seekSetEm+0xe4>
    1432:	87 cf       	rjmp	.-242    	; 0x1342 <_ZN6SdFile7seekSetEm+0x20>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	df 90       	pop	r13
    1442:	cf 90       	pop	r12
    1444:	bf 90       	pop	r11
    1446:	af 90       	pop	r10
    1448:	9f 90       	pop	r9
    144a:	8f 90       	pop	r8
    144c:	08 95       	ret

0000144e <_ZN6SdFile4syncEv>:
    144e:	0f 93       	push	r16
    1450:	1f 93       	push	r17
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ec 01       	movw	r28, r24
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	88 23       	and	r24, r24
    145c:	c9 f1       	breq	.+114    	; 0x14d0 <_ZN6SdFile4syncEv+0x82>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	87 ff       	sbrs	r24, 7
    1462:	30 c0       	rjmp	.+96     	; 0x14c4 <_ZN6SdFile4syncEv+0x76>
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	ce 01       	movw	r24, r28
    1468:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6SdFile13cacheDirEntryEh>
    146c:	8c 01       	movw	r16, r24
    146e:	89 2b       	or	r24, r25
    1470:	79 f1       	breq	.+94     	; 0x14d0 <_ZN6SdFile4syncEv+0x82>
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	82 30       	cpi	r24, 0x02	; 2
    1476:	48 f4       	brcc	.+18     	; 0x148a <_ZN6SdFile4syncEv+0x3c>
    1478:	8b 89       	ldd	r24, Y+19	; 0x13
    147a:	9c 89       	ldd	r25, Y+20	; 0x14
    147c:	ad 89       	ldd	r26, Y+21	; 0x15
    147e:	be 89       	ldd	r27, Y+22	; 0x16
    1480:	f8 01       	movw	r30, r16
    1482:	84 8f       	std	Z+28, r24	; 0x1c
    1484:	95 8f       	std	Z+29, r25	; 0x1d
    1486:	a6 8f       	std	Z+30, r26	; 0x1e
    1488:	b7 8f       	std	Z+31, r27	; 0x1f
    148a:	8f 89       	ldd	r24, Y+23	; 0x17
    148c:	98 8d       	ldd	r25, Y+24	; 0x18
    148e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1490:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1492:	f8 01       	movw	r30, r16
    1494:	93 8f       	std	Z+27, r25	; 0x1b
    1496:	82 8f       	std	Z+26, r24	; 0x1a
    1498:	b5 8b       	std	Z+21, r27	; 0x15
    149a:	a4 8b       	std	Z+20, r26	; 0x14
    149c:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZN6SdFile9dateTime_E>
    14a0:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <_ZN6SdFile9dateTime_E+0x1>
    14a4:	30 97       	sbiw	r30, 0x00	; 0
    14a6:	59 f0       	breq	.+22     	; 0x14be <_ZN6SdFile4syncEv+0x70>
    14a8:	b8 01       	movw	r22, r16
    14aa:	6a 5e       	subi	r22, 0xEA	; 234
    14ac:	7f 4f       	sbci	r23, 0xFF	; 255
    14ae:	c8 01       	movw	r24, r16
    14b0:	48 96       	adiw	r24, 0x18	; 24
    14b2:	09 95       	icall
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 8d       	ldd	r24, Z+24	; 0x18
    14b8:	91 8d       	ldd	r25, Z+25	; 0x19
    14ba:	93 8b       	std	Z+19, r25	; 0x13
    14bc:	82 8b       	std	Z+18, r24	; 0x12
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	8f 77       	andi	r24, 0x7F	; 127
    14c2:	8c 83       	std	Y+4, r24	; 0x04
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <_ZN8SdVolume10cacheFlushEv>
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <_ZN6SdFile5closeEv>:
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	ec 01       	movw	r28, r24
    14e2:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN6SdFile4syncEv>
    14e6:	88 23       	and	r24, r24
    14e8:	11 f0       	breq	.+4      	; 0x14ee <_ZN6SdFile5closeEv+0x12>
    14ea:	1d 82       	std	Y+5, r1	; 0x05
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	08 95       	ret

000014f4 <_ZN6SdFile8truncateEm>:
    14f4:	4f 92       	push	r4
    14f6:	5f 92       	push	r5
    14f8:	6f 92       	push	r6
    14fa:	7f 92       	push	r7
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	00 d0       	rcall	.+0      	; 0x1512 <_ZN6SdFile8truncateEm+0x1e>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <_ZN6SdFile8truncateEm+0x20>
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	fc 01       	movw	r30, r24
    151a:	85 81       	ldd	r24, Z+5	; 0x05
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	e9 f4       	brne	.+58     	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    1520:	84 81       	ldd	r24, Z+4	; 0x04
    1522:	81 ff       	sbrs	r24, 1
    1524:	1a c0       	rjmp	.+52     	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    1526:	83 89       	ldd	r24, Z+19	; 0x13
    1528:	94 89       	ldd	r25, Z+20	; 0x14
    152a:	a5 89       	ldd	r26, Z+21	; 0x15
    152c:	b6 89       	ldd	r27, Z+22	; 0x16
    152e:	84 17       	cp	r24, r20
    1530:	95 07       	cpc	r25, r21
    1532:	a6 07       	cpc	r26, r22
    1534:	b7 07       	cpc	r27, r23
    1536:	88 f0       	brcs	.+34     	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    1538:	89 2b       	or	r24, r25
    153a:	8a 2b       	or	r24, r26
    153c:	8b 2b       	or	r24, r27
    153e:	09 f4       	brne	.+2      	; 0x1542 <_ZN6SdFile8truncateEm+0x4e>
    1540:	79 c0       	rjmp	.+242    	; 0x1634 <_ZN6SdFile8truncateEm+0x140>
    1542:	4a 01       	movw	r8, r20
    1544:	5b 01       	movw	r10, r22
    1546:	7f 01       	movw	r14, r30
    1548:	42 84       	ldd	r4, Z+10	; 0x0a
    154a:	53 84       	ldd	r5, Z+11	; 0x0b
    154c:	64 84       	ldd	r6, Z+12	; 0x0c
    154e:	75 84       	ldd	r7, Z+13	; 0x0d
    1550:	cf 01       	movw	r24, r30
    1552:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6SdFile7seekSetEm>
    1556:	81 11       	cpse	r24, r1
    1558:	02 c0       	rjmp	.+4      	; 0x155e <_ZN6SdFile8truncateEm+0x6a>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	6c c0       	rjmp	.+216    	; 0x1636 <_ZN6SdFile8truncateEm+0x142>
    155e:	f7 01       	movw	r30, r14
    1560:	83 8d       	ldd	r24, Z+27	; 0x1b
    1562:	94 8d       	ldd	r25, Z+28	; 0x1c
    1564:	81 14       	cp	r8, r1
    1566:	91 04       	cpc	r9, r1
    1568:	a1 04       	cpc	r10, r1
    156a:	b1 04       	cpc	r11, r1
    156c:	71 f4       	brne	.+28     	; 0x158a <_ZN6SdFile8truncateEm+0x96>
    156e:	47 89       	ldd	r20, Z+23	; 0x17
    1570:	50 8d       	ldd	r21, Z+24	; 0x18
    1572:	61 8d       	ldd	r22, Z+25	; 0x19
    1574:	72 8d       	ldd	r23, Z+26	; 0x1a
    1576:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_ZN8SdVolume9freeChainEm>
    157a:	88 23       	and	r24, r24
    157c:	71 f3       	breq	.-36     	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    157e:	f7 01       	movw	r30, r14
    1580:	17 8a       	std	Z+23, r1	; 0x17
    1582:	10 8e       	std	Z+24, r1	; 0x18
    1584:	11 8e       	std	Z+25, r1	; 0x19
    1586:	12 8e       	std	Z+26, r1	; 0x1a
    1588:	3a c0       	rjmp	.+116    	; 0x15fe <_ZN6SdFile8truncateEm+0x10a>
    158a:	f7 01       	movw	r30, r14
    158c:	46 81       	ldd	r20, Z+6	; 0x06
    158e:	57 81       	ldd	r21, Z+7	; 0x07
    1590:	60 85       	ldd	r22, Z+8	; 0x08
    1592:	71 85       	ldd	r23, Z+9	; 0x09
    1594:	9e 01       	movw	r18, r28
    1596:	2f 5f       	subi	r18, 0xFF	; 255
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    159e:	88 23       	and	r24, r24
    15a0:	e1 f2       	breq	.-72     	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    15a2:	49 81       	ldd	r20, Y+1	; 0x01
    15a4:	5a 81       	ldd	r21, Y+2	; 0x02
    15a6:	6b 81       	ldd	r22, Y+3	; 0x03
    15a8:	7c 81       	ldd	r23, Y+4	; 0x04
    15aa:	f7 01       	movw	r30, r14
    15ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    15ae:	94 8d       	ldd	r25, Z+28	; 0x1c
    15b0:	fc 01       	movw	r30, r24
    15b2:	27 89       	ldd	r18, Z+23	; 0x17
    15b4:	20 31       	cpi	r18, 0x10	; 16
    15b6:	29 f0       	breq	.+10     	; 0x15c2 <_ZN6SdFile8truncateEm+0xce>
    15b8:	08 ef       	ldi	r16, 0xF8	; 248
    15ba:	1f ef       	ldi	r17, 0xFF	; 255
    15bc:	2f ef       	ldi	r18, 0xFF	; 255
    15be:	3f e0       	ldi	r19, 0x0F	; 15
    15c0:	04 c0       	rjmp	.+8      	; 0x15ca <_ZN6SdFile8truncateEm+0xd6>
    15c2:	08 ef       	ldi	r16, 0xF8	; 248
    15c4:	1f ef       	ldi	r17, 0xFF	; 255
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 17       	cp	r20, r16
    15cc:	51 07       	cpc	r21, r17
    15ce:	62 07       	cpc	r22, r18
    15d0:	73 07       	cpc	r23, r19
    15d2:	a8 f4       	brcc	.+42     	; 0x15fe <_ZN6SdFile8truncateEm+0x10a>
    15d4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <_ZN8SdVolume9freeChainEm>
    15d8:	88 23       	and	r24, r24
    15da:	09 f4       	brne	.+2      	; 0x15de <_ZN6SdFile8truncateEm+0xea>
    15dc:	be cf       	rjmp	.-132    	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    15de:	f7 01       	movw	r30, r14
    15e0:	46 81       	ldd	r20, Z+6	; 0x06
    15e2:	57 81       	ldd	r21, Z+7	; 0x07
    15e4:	60 85       	ldd	r22, Z+8	; 0x08
    15e6:	71 85       	ldd	r23, Z+9	; 0x09
    15e8:	0f ef       	ldi	r16, 0xFF	; 255
    15ea:	1f ef       	ldi	r17, 0xFF	; 255
    15ec:	2f ef       	ldi	r18, 0xFF	; 255
    15ee:	3f e0       	ldi	r19, 0x0F	; 15
    15f0:	83 8d       	ldd	r24, Z+27	; 0x1b
    15f2:	94 8d       	ldd	r25, Z+28	; 0x1c
    15f4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN8SdVolume6fatPutEmm>
    15f8:	88 23       	and	r24, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <_ZN6SdFile8truncateEm+0x10a>
    15fc:	ae cf       	rjmp	.-164    	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    15fe:	f7 01       	movw	r30, r14
    1600:	83 8a       	std	Z+19, r8	; 0x13
    1602:	94 8a       	std	Z+20, r9	; 0x14
    1604:	a5 8a       	std	Z+21, r10	; 0x15
    1606:	b6 8a       	std	Z+22, r11	; 0x16
    1608:	84 81       	ldd	r24, Z+4	; 0x04
    160a:	80 68       	ori	r24, 0x80	; 128
    160c:	84 83       	std	Z+4, r24	; 0x04
    160e:	c7 01       	movw	r24, r14
    1610:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN6SdFile4syncEv>
    1614:	88 23       	and	r24, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <_ZN6SdFile8truncateEm+0x126>
    1618:	a0 cf       	rjmp	.-192    	; 0x155a <_ZN6SdFile8truncateEm+0x66>
    161a:	b5 01       	movw	r22, r10
    161c:	a4 01       	movw	r20, r8
    161e:	48 14       	cp	r4, r8
    1620:	59 04       	cpc	r5, r9
    1622:	6a 04       	cpc	r6, r10
    1624:	7b 04       	cpc	r7, r11
    1626:	10 f4       	brcc	.+4      	; 0x162c <_ZN6SdFile8truncateEm+0x138>
    1628:	b3 01       	movw	r22, r6
    162a:	a2 01       	movw	r20, r4
    162c:	c7 01       	movw	r24, r14
    162e:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6SdFile7seekSetEm>
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <_ZN6SdFile8truncateEm+0x142>
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	ff 90       	pop	r15
    1648:	ef 90       	pop	r14
    164a:	bf 90       	pop	r11
    164c:	af 90       	pop	r10
    164e:	9f 90       	pop	r9
    1650:	8f 90       	pop	r8
    1652:	7f 90       	pop	r7
    1654:	6f 90       	pop	r6
    1656:	5f 90       	pop	r5
    1658:	4f 90       	pop	r4
    165a:	08 95       	ret

0000165c <_ZN6SdFile15openCachedEntryEhh>:
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	80 e2       	ldi	r24, 0x20	; 32
    1666:	68 9f       	mul	r22, r24
    1668:	f0 01       	movw	r30, r0
    166a:	11 24       	eor	r1, r1
    166c:	9f 01       	movw	r18, r30
    166e:	27 55       	subi	r18, 0x57	; 87
    1670:	3e 4f       	sbci	r19, 0xFE	; 254
    1672:	d9 01       	movw	r26, r18
    1674:	1b 96       	adiw	r26, 0x0b	; 11
    1676:	9c 91       	ld	r25, X
    1678:	91 71       	andi	r25, 0x11	; 17
    167a:	29 f0       	breq	.+10     	; 0x1686 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    167c:	84 2f       	mov	r24, r20
    167e:	82 74       	andi	r24, 0x42	; 66
    1680:	11 f0       	breq	.+4      	; 0x1686 <_ZN6SdFile15openCachedEntryEhh+0x2a>
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	5b c0       	rjmp	.+182    	; 0x173c <_ZN6SdFile15openCachedEntryEhh+0xe0>
    1686:	14 2f       	mov	r17, r20
    1688:	6a 8b       	std	Y+18, r22	; 0x12
    168a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    168e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1692:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1696:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    169a:	8e 87       	std	Y+14, r24	; 0x0e
    169c:	9f 87       	std	Y+15, r25	; 0x0f
    169e:	a8 8b       	std	Y+16, r26	; 0x10
    16a0:	b9 8b       	std	Y+17, r27	; 0x11
    16a2:	e7 55       	subi	r30, 0x57	; 87
    16a4:	fe 4f       	sbci	r31, 0xFE	; 254
    16a6:	44 89       	ldd	r20, Z+20	; 0x14
    16a8:	55 89       	ldd	r21, Z+21	; 0x15
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	ba 01       	movw	r22, r20
    16b0:	55 27       	eor	r21, r21
    16b2:	44 27       	eor	r20, r20
    16b4:	4f 8b       	std	Y+23, r20	; 0x17
    16b6:	58 8f       	std	Y+24, r21	; 0x18
    16b8:	69 8f       	std	Y+25, r22	; 0x19
    16ba:	7a 8f       	std	Y+26, r23	; 0x1a
    16bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    16be:	93 8d       	ldd	r25, Z+27	; 0x1b
    16c0:	a0 e0       	ldi	r26, 0x00	; 0
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	48 2b       	or	r20, r24
    16c6:	59 2b       	or	r21, r25
    16c8:	6a 2b       	or	r22, r26
    16ca:	7b 2b       	or	r23, r27
    16cc:	4f 8b       	std	Y+23, r20	; 0x17
    16ce:	58 8f       	std	Y+24, r21	; 0x18
    16d0:	69 8f       	std	Y+25, r22	; 0x19
    16d2:	7a 8f       	std	Y+26, r23	; 0x1a
    16d4:	d9 01       	movw	r26, r18
    16d6:	1b 96       	adiw	r26, 0x0b	; 11
    16d8:	8c 91       	ld	r24, X
    16da:	88 71       	andi	r24, 0x18	; 24
    16dc:	51 f4       	brne	.+20     	; 0x16f2 <_ZN6SdFile15openCachedEntryEhh+0x96>
    16de:	84 8d       	ldd	r24, Z+28	; 0x1c
    16e0:	95 8d       	ldd	r25, Z+29	; 0x1d
    16e2:	a6 8d       	ldd	r26, Z+30	; 0x1e
    16e4:	b7 8d       	ldd	r27, Z+31	; 0x1f
    16e6:	8b 8b       	std	Y+19, r24	; 0x13
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	ad 8b       	std	Y+21, r26	; 0x15
    16ec:	be 8b       	std	Y+22, r27	; 0x16
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0d c0       	rjmp	.+26     	; 0x170c <_ZN6SdFile15openCachedEntryEhh+0xb0>
    16f2:	80 31       	cpi	r24, 0x10	; 16
    16f4:	31 f6       	brne	.-116    	; 0x1682 <_ZN6SdFile15openCachedEntryEhh+0x26>
    16f6:	9e 01       	movw	r18, r28
    16f8:	2d 5e       	subi	r18, 0xED	; 237
    16fa:	3f 4f       	sbci	r19, 0xFF	; 255
    16fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1700:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <_ZNK8SdVolume9chainSizeEmPm>
    1704:	88 23       	and	r24, r24
    1706:	09 f4       	brne	.+2      	; 0x170a <_ZN6SdFile15openCachedEntryEhh+0xae>
    1708:	bc cf       	rjmp	.-136    	; 0x1682 <_ZN6SdFile15openCachedEntryEhh+0x26>
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	8d 83       	std	Y+5, r24	; 0x05
    170e:	81 2f       	mov	r24, r17
    1710:	8f 70       	andi	r24, 0x0F	; 15
    1712:	8c 83       	std	Y+4, r24	; 0x04
    1714:	1e 82       	std	Y+6, r1	; 0x06
    1716:	1f 82       	std	Y+7, r1	; 0x07
    1718:	18 86       	std	Y+8, r1	; 0x08
    171a:	19 86       	std	Y+9, r1	; 0x09
    171c:	1a 86       	std	Y+10, r1	; 0x0a
    171e:	1b 86       	std	Y+11, r1	; 0x0b
    1720:	1c 86       	std	Y+12, r1	; 0x0c
    1722:	1d 86       	std	Y+13, r1	; 0x0d
    1724:	16 ff       	sbrs	r17, 6
    1726:	09 c0       	rjmp	.+18     	; 0x173a <_ZN6SdFile15openCachedEntryEhh+0xde>
    1728:	40 e0       	ldi	r20, 0x00	; 0
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	ba 01       	movw	r22, r20
    172e:	ce 01       	movw	r24, r28
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <_ZN6SdFile8truncateEm>
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	08 95       	ret

00001744 <_ZN6SdFile4openEPS_PKch>:
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	2c 97       	sbiw	r28, 0x0c	; 12
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	fc 01       	movw	r30, r24
    1766:	35 81       	ldd	r19, Z+5	; 0x05
    1768:	31 11       	cpse	r19, r1
    176a:	c2 c0       	rjmp	.+388    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    176c:	d2 2e       	mov	r13, r18
    176e:	8b 01       	movw	r16, r22
    1770:	7c 01       	movw	r14, r24
    1772:	be 01       	movw	r22, r28
    1774:	6f 5f       	subi	r22, 0xFF	; 255
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	ca 01       	movw	r24, r20
    177a:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN6SdFile10make83NameEPKcPh>
    177e:	88 23       	and	r24, r24
    1780:	09 f4       	brne	.+2      	; 0x1784 <_ZN6SdFile4openEPS_PKch+0x40>
    1782:	b6 c0       	rjmp	.+364    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    1784:	f8 01       	movw	r30, r16
    1786:	83 8d       	ldd	r24, Z+27	; 0x1b
    1788:	94 8d       	ldd	r25, Z+28	; 0x1c
    178a:	f7 01       	movw	r30, r14
    178c:	94 8f       	std	Z+28, r25	; 0x1c
    178e:	83 8f       	std	Z+27, r24	; 0x1b
    1790:	f8 01       	movw	r30, r16
    1792:	16 82       	std	Z+6, r1	; 0x06
    1794:	17 82       	std	Z+7, r1	; 0x07
    1796:	10 86       	std	Z+8, r1	; 0x08
    1798:	11 86       	std	Z+9, r1	; 0x09
    179a:	12 86       	std	Z+10, r1	; 0x0a
    179c:	13 86       	std	Z+11, r1	; 0x0b
    179e:	14 86       	std	Z+12, r1	; 0x0c
    17a0:	15 86       	std	Z+13, r1	; 0x0d
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	f8 01       	movw	r30, r16
    17a6:	82 85       	ldd	r24, Z+10	; 0x0a
    17a8:	93 85       	ldd	r25, Z+11	; 0x0b
    17aa:	a4 85       	ldd	r26, Z+12	; 0x0c
    17ac:	b5 85       	ldd	r27, Z+13	; 0x0d
    17ae:	43 89       	ldd	r20, Z+19	; 0x13
    17b0:	54 89       	ldd	r21, Z+20	; 0x14
    17b2:	65 89       	ldd	r22, Z+21	; 0x15
    17b4:	76 89       	ldd	r23, Z+22	; 0x16
    17b6:	84 17       	cp	r24, r20
    17b8:	95 07       	cpc	r25, r21
    17ba:	a6 07       	cpc	r26, r22
    17bc:	b7 07       	cpc	r27, r23
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <_ZN6SdFile4openEPS_PKch+0x7e>
    17c0:	41 c0       	rjmp	.+130    	; 0x1844 <_ZN6SdFile4openEPS_PKch+0x100>
    17c2:	25 e0       	ldi	r18, 0x05	; 5
    17c4:	b6 95       	lsr	r27
    17c6:	a7 95       	ror	r26
    17c8:	97 95       	ror	r25
    17ca:	87 95       	ror	r24
    17cc:	2a 95       	dec	r18
    17ce:	d1 f7       	brne	.-12     	; 0x17c4 <_ZN6SdFile4openEPS_PKch+0x80>
    17d0:	f8 2f       	mov	r31, r24
    17d2:	ff 70       	andi	r31, 0x0F	; 15
    17d4:	cf 2e       	mov	r12, r31
    17d6:	c8 01       	movw	r24, r16
    17d8:	3c 87       	std	Y+12, r19	; 0x0c
    17da:	0e 94 48 09 	call	0x1290	; 0x1290 <_ZN6SdFile12readDirCacheEv>
    17de:	3c 85       	ldd	r19, Y+12	; 0x0c
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <_ZN6SdFile4openEPS_PKch+0xa2>
    17e4:	85 c0       	rjmp	.+266    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 81       	ld	r18, Z
    17ea:	22 23       	and	r18, r18
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <_ZN6SdFile4openEPS_PKch+0xac>
    17ee:	84 c0       	rjmp	.+264    	; 0x18f8 <_ZN6SdFile4openEPS_PKch+0x1b4>
    17f0:	25 3e       	cpi	r18, 0xE5	; 229
    17f2:	99 f0       	breq	.+38     	; 0x181a <_ZN6SdFile4openEPS_PKch+0xd6>
    17f4:	4b e0       	ldi	r20, 0x0B	; 11
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	bc 01       	movw	r22, r24
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	3c 87       	std	Y+12, r19	; 0x0c
    1800:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <memcmp>
    1804:	3c 85       	ldd	r19, Y+12	; 0x0c
    1806:	89 2b       	or	r24, r25
    1808:	69 f6       	brne	.-102    	; 0x17a4 <_ZN6SdFile4openEPS_PKch+0x60>
    180a:	8d 2d       	mov	r24, r13
    180c:	80 73       	andi	r24, 0x30	; 48
    180e:	80 33       	cpi	r24, 0x30	; 48
    1810:	09 f4       	brne	.+2      	; 0x1814 <_ZN6SdFile4openEPS_PKch+0xd0>
    1812:	6e c0       	rjmp	.+220    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    1814:	4d 2d       	mov	r20, r13
    1816:	6c 2d       	mov	r22, r12
    1818:	67 c0       	rjmp	.+206    	; 0x18e8 <_ZN6SdFile4openEPS_PKch+0x1a4>
    181a:	31 11       	cpse	r19, r1
    181c:	6b c0       	rjmp	.+214    	; 0x18f4 <_ZN6SdFile4openEPS_PKch+0x1b0>
    181e:	f7 01       	movw	r30, r14
    1820:	c2 8a       	std	Z+18, r12	; 0x12
    1822:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1826:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    182a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    182e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1832:	46 87       	std	Z+14, r20	; 0x0e
    1834:	57 87       	std	Z+15, r21	; 0x0f
    1836:	60 8b       	std	Z+16, r22	; 0x10
    1838:	71 8b       	std	Z+17, r23	; 0x11
    183a:	fc 01       	movw	r30, r24
    183c:	80 81       	ld	r24, Z
    183e:	31 e0       	ldi	r19, 0x01	; 1
    1840:	81 11       	cpse	r24, r1
    1842:	b0 cf       	rjmp	.-160    	; 0x17a4 <_ZN6SdFile4openEPS_PKch+0x60>
    1844:	8d 2d       	mov	r24, r13
    1846:	82 71       	andi	r24, 0x12	; 18
    1848:	82 31       	cpi	r24, 0x12	; 18
    184a:	09 f0       	breq	.+2      	; 0x184e <_ZN6SdFile4openEPS_PKch+0x10a>
    184c:	51 c0       	rjmp	.+162    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    184e:	33 23       	and	r19, r19
    1850:	41 f0       	breq	.+16     	; 0x1862 <_ZN6SdFile4openEPS_PKch+0x11e>
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	c7 01       	movw	r24, r14
    1856:	0e 94 a0 07 	call	0xf40	; 0xf40 <_ZN6SdFile13cacheDirEntryEh>
    185a:	8c 01       	movw	r16, r24
    185c:	89 2b       	or	r24, r25
    185e:	79 f4       	brne	.+30     	; 0x187e <_ZN6SdFile4openEPS_PKch+0x13a>
    1860:	47 c0       	rjmp	.+142    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    1862:	f8 01       	movw	r30, r16
    1864:	85 81       	ldd	r24, Z+5	; 0x05
    1866:	82 30       	cpi	r24, 0x02	; 2
    1868:	09 f4       	brne	.+2      	; 0x186c <_ZN6SdFile4openEPS_PKch+0x128>
    186a:	42 c0       	rjmp	.+132    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    186c:	c8 01       	movw	r24, r16
    186e:	0e 94 40 07 	call	0xe80	; 0xe80 <_ZN6SdFile13addDirClusterEv>
    1872:	88 23       	and	r24, r24
    1874:	e9 f1       	breq	.+122    	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    1876:	f7 01       	movw	r30, r14
    1878:	12 8a       	std	Z+18, r1	; 0x12
    187a:	09 ea       	ldi	r16, 0xA9	; 169
    187c:	11 e0       	ldi	r17, 0x01	; 1
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	f8 01       	movw	r30, r16
    1882:	11 92       	st	Z+, r1
    1884:	8a 95       	dec	r24
    1886:	e9 f7       	brne	.-6      	; 0x1882 <_ZN6SdFile4openEPS_PKch+0x13e>
    1888:	8b e0       	ldi	r24, 0x0B	; 11
    188a:	fe 01       	movw	r30, r28
    188c:	31 96       	adiw	r30, 0x01	; 1
    188e:	d8 01       	movw	r26, r16
    1890:	01 90       	ld	r0, Z+
    1892:	0d 92       	st	X+, r0
    1894:	8a 95       	dec	r24
    1896:	e1 f7       	brne	.-8      	; 0x1890 <_ZN6SdFile4openEPS_PKch+0x14c>
    1898:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <_ZN6SdFile9dateTime_E>
    189c:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <_ZN6SdFile9dateTime_E+0x1>
    18a0:	30 97       	sbiw	r30, 0x00	; 0
    18a2:	39 f0       	breq	.+14     	; 0x18b2 <_ZN6SdFile4openEPS_PKch+0x16e>
    18a4:	b8 01       	movw	r22, r16
    18a6:	62 5f       	subi	r22, 0xF2	; 242
    18a8:	7f 4f       	sbci	r23, 0xFF	; 255
    18aa:	c8 01       	movw	r24, r16
    18ac:	40 96       	adiw	r24, 0x10	; 16
    18ae:	09 95       	icall
    18b0:	09 c0       	rjmp	.+18     	; 0x18c4 <_ZN6SdFile4openEPS_PKch+0x180>
    18b2:	81 e2       	ldi	r24, 0x21	; 33
    18b4:	98 e2       	ldi	r25, 0x28	; 40
    18b6:	f8 01       	movw	r30, r16
    18b8:	91 8b       	std	Z+17, r25	; 0x11
    18ba:	80 8b       	std	Z+16, r24	; 0x10
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	98 e0       	ldi	r25, 0x08	; 8
    18c0:	97 87       	std	Z+15, r25	; 0x0f
    18c2:	86 87       	std	Z+14, r24	; 0x0e
    18c4:	f8 01       	movw	r30, r16
    18c6:	80 89       	ldd	r24, Z+16	; 0x10
    18c8:	91 89       	ldd	r25, Z+17	; 0x11
    18ca:	93 8b       	std	Z+19, r25	; 0x13
    18cc:	82 8b       	std	Z+18, r24	; 0x12
    18ce:	91 8f       	std	Z+25, r25	; 0x19
    18d0:	80 8f       	std	Z+24, r24	; 0x18
    18d2:	86 85       	ldd	r24, Z+14	; 0x0e
    18d4:	97 85       	ldd	r25, Z+15	; 0x0f
    18d6:	97 8b       	std	Z+23, r25	; 0x17
    18d8:	86 8b       	std	Z+22, r24	; 0x16
    18da:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN8SdVolume10cacheFlushEv>
    18de:	88 23       	and	r24, r24
    18e0:	39 f0       	breq	.+14     	; 0x18f0 <_ZN6SdFile4openEPS_PKch+0x1ac>
    18e2:	4d 2d       	mov	r20, r13
    18e4:	f7 01       	movw	r30, r14
    18e6:	62 89       	ldd	r22, Z+18	; 0x12
    18e8:	c7 01       	movw	r24, r14
    18ea:	0e 94 2e 0b 	call	0x165c	; 0x165c <_ZN6SdFile15openCachedEntryEhh>
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <_ZN6SdFile4openEPS_PKch+0x1be>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	07 c0       	rjmp	.+14     	; 0x1902 <_ZN6SdFile4openEPS_PKch+0x1be>
    18f4:	31 e0       	ldi	r19, 0x01	; 1
    18f6:	56 cf       	rjmp	.-340    	; 0x17a4 <_ZN6SdFile4openEPS_PKch+0x60>
    18f8:	33 23       	and	r19, r19
    18fa:	09 f4       	brne	.+2      	; 0x18fe <_ZN6SdFile4openEPS_PKch+0x1ba>
    18fc:	90 cf       	rjmp	.-224    	; 0x181e <_ZN6SdFile4openEPS_PKch+0xda>
    18fe:	31 e0       	ldi	r19, 0x01	; 1
    1900:	a1 cf       	rjmp	.-190    	; 0x1844 <_ZN6SdFile4openEPS_PKch+0x100>
    1902:	2c 96       	adiw	r28, 0x0c	; 12
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	08 95       	ret

00001920 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    1920:	2f 92       	push	r2
    1922:	3f 92       	push	r3
    1924:	4f 92       	push	r4
    1926:	5f 92       	push	r5
    1928:	6f 92       	push	r6
    192a:	7f 92       	push	r7
    192c:	8f 92       	push	r8
    192e:	9f 92       	push	r9
    1930:	af 92       	push	r10
    1932:	bf 92       	push	r11
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	00 d0       	rcall	.+0      	; 0x1946 <_ZN6SdFile5writeEPKvj+0x26>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <_ZN6SdFile5writeEPKvj+0x28>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	8c 01       	movw	r16, r24
    194e:	6b 01       	movw	r12, r22
    1950:	3a 01       	movw	r6, r20

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    1952:	dc 01       	movw	r26, r24
    1954:	15 96       	adiw	r26, 0x05	; 5
    1956:	8c 91       	ld	r24, X
    1958:	15 97       	sbiw	r26, 0x05	; 5
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	c9 f4       	brne	.+50     	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>
    195e:	14 96       	adiw	r26, 0x04	; 4
    1960:	8c 91       	ld	r24, X
    1962:	81 ff       	sbrs	r24, 1
    1964:	15 c0       	rjmp	.+42     	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    1966:	82 ff       	sbrs	r24, 2
    1968:	1d c0       	rjmp	.+58     	; 0x19a4 <_ZN6SdFile5writeEPKvj+0x84>
    196a:	f8 01       	movw	r30, r16
    196c:	43 89       	ldd	r20, Z+19	; 0x13
    196e:	54 89       	ldd	r21, Z+20	; 0x14
    1970:	65 89       	ldd	r22, Z+21	; 0x15
    1972:	76 89       	ldd	r23, Z+22	; 0x16
    1974:	82 85       	ldd	r24, Z+10	; 0x0a
    1976:	93 85       	ldd	r25, Z+11	; 0x0b
    1978:	a4 85       	ldd	r26, Z+12	; 0x0c
    197a:	b5 85       	ldd	r27, Z+13	; 0x0d
    197c:	84 17       	cp	r24, r20
    197e:	95 07       	cpc	r25, r21
    1980:	a6 07       	cpc	r26, r22
    1982:	b7 07       	cpc	r27, r23
    1984:	79 f0       	breq	.+30     	; 0x19a4 <_ZN6SdFile5writeEPKvj+0x84>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    1986:	c8 01       	movw	r24, r16
    1988:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    198c:	81 11       	cpse	r24, r1
    198e:	0a c0       	rjmp	.+20     	; 0x19a4 <_ZN6SdFile5writeEPKvj+0x84>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	d8 01       	movw	r26, r16
    1996:	13 96       	adiw	r26, 0x03	; 3
    1998:	9c 93       	st	X, r25
    199a:	8e 93       	st	-X, r24
    199c:	12 97       	sbiw	r26, 0x02	; 2

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	48 c1       	rjmp	.+656    	; 0x1c34 <_ZN6SdFile5writeEPKvj+0x314>
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    19a4:	43 01       	movw	r8, r6
    19a6:	84 c0       	rjmp	.+264    	; 0x1ab0 <_ZN6SdFile5writeEPKvj+0x190>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    19a8:	d8 01       	movw	r26, r16
    19aa:	5b 96       	adiw	r26, 0x1b	; 27
    19ac:	8d 91       	ld	r24, X+
    19ae:	9c 91       	ld	r25, X
    19b0:	5c 97       	sbiw	r26, 0x1c	; 28
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    19b2:	fc 01       	movw	r30, r24
    19b4:	54 80       	ldd	r5, Z+4	; 0x04
    19b6:	2f ef       	ldi	r18, 0xFF	; 255
    19b8:	25 0d       	add	r18, r5
    19ba:	1a 01       	movw	r2, r20
    19bc:	2b 01       	movw	r4, r22
    19be:	39 e0       	ldi	r19, 0x09	; 9
    19c0:	56 94       	lsr	r5
    19c2:	47 94       	ror	r4
    19c4:	37 94       	ror	r3
    19c6:	27 94       	ror	r2
    19c8:	3a 95       	dec	r19
    19ca:	d1 f7       	brne	.-12     	; 0x19c0 <_ZN6SdFile5writeEPKvj+0xa0>
    19cc:	52 2e       	mov	r5, r18
    19ce:	52 20       	and	r5, r2
    uint16_t blockOffset = curPosition_ & 0X1FF;
    19d0:	7a 01       	movw	r14, r20
    19d2:	f1 e0       	ldi	r31, 0x01	; 1
    19d4:	ff 22       	and	r15, r31
    if (blockOfCluster == 0 && blockOffset == 0) {
    19d6:	55 20       	and	r5, r5
    19d8:	09 f4       	brne	.+2      	; 0x19dc <_ZN6SdFile5writeEPKvj+0xbc>
    19da:	76 c0       	rjmp	.+236    	; 0x1ac8 <_ZN6SdFile5writeEPKvj+0x1a8>
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	92 e0       	ldi	r25, 0x02	; 2
    19e0:	8e 19       	sub	r24, r14
    19e2:	9f 09       	sbc	r25, r15
    19e4:	54 01       	movw	r10, r8
    19e6:	88 15       	cp	r24, r8
    19e8:	99 05       	cpc	r25, r9
    19ea:	08 f4       	brcc	.+2      	; 0x19ee <_ZN6SdFile5writeEPKvj+0xce>
    19ec:	5c 01       	movw	r10, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    19ee:	d8 01       	movw	r26, r16
    19f0:	5b 96       	adiw	r26, 0x1b	; 27
    19f2:	2d 91       	ld	r18, X+
    19f4:	3c 91       	ld	r19, X
    19f6:	5c 97       	sbiw	r26, 0x1c	; 28
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    19f8:	16 96       	adiw	r26, 0x06	; 6
    19fa:	8d 91       	ld	r24, X+
    19fc:	9d 91       	ld	r25, X+
    19fe:	0d 90       	ld	r0, X+
    1a00:	bc 91       	ld	r27, X
    1a02:	a0 2d       	mov	r26, r0
    1a04:	02 97       	sbiw	r24, 0x02	; 2
    1a06:	a1 09       	sbc	r26, r1
    1a08:	b1 09       	sbc	r27, r1
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	05 84       	ldd	r0, Z+13	; 0x0d
    1a0e:	04 c0       	rjmp	.+8      	; 0x1a18 <_ZN6SdFile5writeEPKvj+0xf8>
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	aa 1f       	adc	r26, r26
    1a16:	bb 1f       	adc	r27, r27
    1a18:	0a 94       	dec	r0
    1a1a:	d2 f7       	brpl	.-12     	; 0x1a10 <_ZN6SdFile5writeEPKvj+0xf0>
    1a1c:	46 85       	ldd	r20, Z+14	; 0x0e
    1a1e:	57 85       	ldd	r21, Z+15	; 0x0f
    1a20:	60 89       	ldd	r22, Z+16	; 0x10
    1a22:	71 89       	ldd	r23, Z+17	; 0x11
    1a24:	84 0f       	add	r24, r20
    1a26:	95 1f       	adc	r25, r21
    1a28:	a6 1f       	adc	r26, r22
    1a2a:	b7 1f       	adc	r27, r23
    1a2c:	9c 01       	movw	r18, r24
    1a2e:	ad 01       	movw	r20, r26
    1a30:	25 0d       	add	r18, r5
    1a32:	31 1d       	adc	r19, r1
    1a34:	41 1d       	adc	r20, r1
    1a36:	51 1d       	adc	r21, r1
    1a38:	19 01       	movw	r2, r18
    1a3a:	2a 01       	movw	r4, r20
    if (n == 512) {
    1a3c:	a1 14       	cp	r10, r1
    1a3e:	32 e0       	ldi	r19, 0x02	; 2
    1a40:	b3 06       	cpc	r11, r19
    1a42:	09 f0       	breq	.+2      	; 0x1a46 <_ZN6SdFile5writeEPKvj+0x126>
    1a44:	88 c0       	rjmp	.+272    	; 0x1b56 <_ZN6SdFile5writeEPKvj+0x236>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    1a46:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1a4a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1a4e:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1a52:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1a56:	82 15       	cp	r24, r2
    1a58:	93 05       	cpc	r25, r3
    1a5a:	a4 05       	cpc	r26, r4
    1a5c:	b5 05       	cpc	r27, r5
    1a5e:	59 f4       	brne	.+22     	; 0x1a76 <_ZN6SdFile5writeEPKvj+0x156>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	9f ef       	ldi	r25, 0xFF	; 255
    1a64:	dc 01       	movw	r26, r24
    1a66:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1a6a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1a6e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1a72:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    1a76:	96 01       	movw	r18, r12
    1a78:	b2 01       	movw	r22, r4
    1a7a:	a1 01       	movw	r20, r2
    1a7c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN8SdVolume7sdCard_E>
    1a80:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN8SdVolume7sdCard_E+0x1>
    1a84:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <_ZN6SdFile5writeEPKvj+0x16e>
    1a8c:	81 cf       	rjmp	.-254    	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>
      src += 512;
    1a8e:	9e ef       	ldi	r25, 0xFE	; 254
    1a90:	d9 1a       	sub	r13, r25
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    1a92:	8a 18       	sub	r8, r10
    1a94:	9b 08       	sbc	r9, r11
    curPosition_ += n;
    1a96:	f8 01       	movw	r30, r16
    1a98:	82 85       	ldd	r24, Z+10	; 0x0a
    1a9a:	93 85       	ldd	r25, Z+11	; 0x0b
    1a9c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a9e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1aa0:	8a 0d       	add	r24, r10
    1aa2:	9b 1d       	adc	r25, r11
    1aa4:	a1 1d       	adc	r26, r1
    1aa6:	b1 1d       	adc	r27, r1
    1aa8:	82 87       	std	Z+10, r24	; 0x0a
    1aaa:	93 87       	std	Z+11, r25	; 0x0b
    1aac:	a4 87       	std	Z+12, r26	; 0x0c
    1aae:	b5 87       	std	Z+13, r27	; 0x0d
    1ab0:	d8 01       	movw	r26, r16
    1ab2:	1a 96       	adiw	r26, 0x0a	; 10
    1ab4:	4d 91       	ld	r20, X+
    1ab6:	5d 91       	ld	r21, X+
    1ab8:	6d 91       	ld	r22, X+
    1aba:	7c 91       	ld	r23, X
    1abc:	1d 97       	sbiw	r26, 0x0d	; 13
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    1abe:	81 14       	cp	r8, r1
    1ac0:	91 04       	cpc	r9, r1
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <_ZN6SdFile5writeEPKvj+0x1a6>
    1ac4:	71 cf       	rjmp	.-286    	; 0x19a8 <_ZN6SdFile5writeEPKvj+0x88>
    1ac6:	87 c0       	rjmp	.+270    	; 0x1bd6 <_ZN6SdFile5writeEPKvj+0x2b6>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    uint16_t blockOffset = curPosition_ & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
    1ac8:	e1 14       	cp	r14, r1
    1aca:	f1 04       	cpc	r15, r1
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <_ZN6SdFile5writeEPKvj+0x1b0>
    1ace:	86 cf       	rjmp	.-244    	; 0x19dc <_ZN6SdFile5writeEPKvj+0xbc>
      // start of new cluster
      if (curCluster_ == 0) {
    1ad0:	16 96       	adiw	r26, 0x06	; 6
    1ad2:	4d 91       	ld	r20, X+
    1ad4:	5d 91       	ld	r21, X+
    1ad6:	6d 91       	ld	r22, X+
    1ad8:	7c 91       	ld	r23, X
    1ada:	19 97       	sbiw	r26, 0x09	; 9
    1adc:	41 15       	cp	r20, r1
    1ade:	51 05       	cpc	r21, r1
    1ae0:	61 05       	cpc	r22, r1
    1ae2:	71 05       	cpc	r23, r1
    1ae4:	59 f4       	brne	.+22     	; 0x1afc <_ZN6SdFile5writeEPKvj+0x1dc>
        if (firstCluster_ == 0) {
    1ae6:	57 96       	adiw	r26, 0x17	; 23
    1ae8:	8d 91       	ld	r24, X+
    1aea:	9d 91       	ld	r25, X+
    1aec:	0d 90       	ld	r0, X+
    1aee:	bc 91       	ld	r27, X
    1af0:	a0 2d       	mov	r26, r0
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	a1 05       	cpc	r26, r1
    1af6:	b1 05       	cpc	r27, r1
    1af8:	41 f5       	brne	.+80     	; 0x1b4a <_ZN6SdFile5writeEPKvj+0x22a>
    1afa:	21 c0       	rjmp	.+66     	; 0x1b3e <_ZN6SdFile5writeEPKvj+0x21e>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1afc:	9e 01       	movw	r18, r28
    1afe:	2f 5f       	subi	r18, 0xFF	; 255
    1b00:	3f 4f       	sbci	r19, 0xFF	; 255
    1b02:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    1b06:	88 23       	and	r24, r24
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <_ZN6SdFile5writeEPKvj+0x1ec>
    1b0a:	4a cf       	rjmp	.-364    	; 0x19a0 <_ZN6SdFile5writeEPKvj+0x80>
        if (vol_->isEOC(next)) {
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
    1b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b10:	ab 81       	ldd	r26, Y+3	; 0x03
    1b12:	bc 81       	ldd	r27, Y+4	; 0x04
    1b14:	f8 01       	movw	r30, r16
    1b16:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b18:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	27 89       	ldd	r18, Z+23	; 0x17
    1b1e:	20 31       	cpi	r18, 0x10	; 16
    1b20:	29 f0       	breq	.+10     	; 0x1b2c <_ZN6SdFile5writeEPKvj+0x20c>
    1b22:	48 ef       	ldi	r20, 0xF8	; 248
    1b24:	5f ef       	ldi	r21, 0xFF	; 255
    1b26:	6f ef       	ldi	r22, 0xFF	; 255
    1b28:	7f e0       	ldi	r23, 0x0F	; 15
    1b2a:	04 c0       	rjmp	.+8      	; 0x1b34 <_ZN6SdFile5writeEPKvj+0x214>
    1b2c:	48 ef       	ldi	r20, 0xF8	; 248
    1b2e:	5f ef       	ldi	r21, 0xFF	; 255
    1b30:	60 e0       	ldi	r22, 0x00	; 0
    1b32:	70 e0       	ldi	r23, 0x00	; 0
    1b34:	84 17       	cp	r24, r20
    1b36:	95 07       	cpc	r25, r21
    1b38:	a6 07       	cpc	r26, r22
    1b3a:	b7 07       	cpc	r27, r23
    1b3c:	30 f0       	brcs	.+12     	; 0x1b4a <_ZN6SdFile5writeEPKvj+0x22a>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    1b3e:	c8 01       	movw	r24, r16
    1b40:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN6SdFile10addClusterEv>
    1b44:	81 11       	cpse	r24, r1
    1b46:	4a cf       	rjmp	.-364    	; 0x19dc <_ZN6SdFile5writeEPKvj+0xbc>
    1b48:	23 cf       	rjmp	.-442    	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>
        } else {
          curCluster_ = next;
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	86 83       	std	Z+6, r24	; 0x06
    1b4e:	97 83       	std	Z+7, r25	; 0x07
    1b50:	a0 87       	std	Z+8, r26	; 0x08
    1b52:	b1 87       	std	Z+9, r27	; 0x09
    1b54:	43 cf       	rjmp	.-378    	; 0x19dc <_ZN6SdFile5writeEPKvj+0xbc>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    1b56:	e1 14       	cp	r14, r1
    1b58:	f1 04       	cpc	r15, r1
    1b5a:	29 f5       	brne	.+74     	; 0x1ba6 <_ZN6SdFile5writeEPKvj+0x286>
    1b5c:	d8 01       	movw	r26, r16
    1b5e:	1a 96       	adiw	r26, 0x0a	; 10
    1b60:	4d 91       	ld	r20, X+
    1b62:	5d 91       	ld	r21, X+
    1b64:	6d 91       	ld	r22, X+
    1b66:	7c 91       	ld	r23, X
    1b68:	1d 97       	sbiw	r26, 0x0d	; 13
    1b6a:	53 96       	adiw	r26, 0x13	; 19
    1b6c:	8d 91       	ld	r24, X+
    1b6e:	9d 91       	ld	r25, X+
    1b70:	0d 90       	ld	r0, X+
    1b72:	bc 91       	ld	r27, X
    1b74:	a0 2d       	mov	r26, r0
    1b76:	48 17       	cp	r20, r24
    1b78:	59 07       	cpc	r21, r25
    1b7a:	6a 07       	cpc	r22, r26
    1b7c:	7b 07       	cpc	r23, r27
    1b7e:	98 f0       	brcs	.+38     	; 0x1ba6 <_ZN6SdFile5writeEPKvj+0x286>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    1b80:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN8SdVolume10cacheFlushEv>
    1b84:	88 23       	and	r24, r24
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <_ZN6SdFile5writeEPKvj+0x26a>
    1b88:	03 cf       	rjmp	.-506    	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>
        SdVolume::cacheBlockNumber_ = block;
    1b8a:	20 92 06 01 	sts	0x0106, r2	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1b8e:	30 92 07 01 	sts	0x0107, r3	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1b92:	40 92 08 01 	sts	0x0108, r4	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1b96:	50 92 09 01 	sts	0x0109, r5	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    1b9a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
    1b9e:	81 60       	ori	r24, 0x01	; 1
    1ba0:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <_ZN6SdFile5writeEPKvj+0x296>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	c2 01       	movw	r24, r4
    1baa:	b1 01       	movw	r22, r2
    1bac:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <_ZN6SdFile5writeEPKvj+0x296>
    1bb4:	ed ce       	rjmp	.-550    	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>
    1bb6:	d6 01       	movw	r26, r12
    1bb8:	f7 01       	movw	r30, r14
    1bba:	e7 55       	subi	r30, 0x57	; 87
    1bbc:	fe 4f       	sbci	r31, 0xFE	; 254
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	8a 0d       	add	r24, r10
    1bc2:	9b 1d       	adc	r25, r11
      while (dst != end) *dst++ = *src++;
    1bc4:	e8 17       	cp	r30, r24
    1bc6:	f9 07       	cpc	r31, r25
    1bc8:	19 f0       	breq	.+6      	; 0x1bd0 <_ZN6SdFile5writeEPKvj+0x2b0>
    1bca:	2d 91       	ld	r18, X+
    1bcc:	21 93       	st	Z+, r18
    1bce:	fa cf       	rjmp	.-12     	; 0x1bc4 <_ZN6SdFile5writeEPKvj+0x2a4>
    1bd0:	ca 0c       	add	r12, r10
    1bd2:	db 1c       	adc	r13, r11
    1bd4:	5e cf       	rjmp	.-324    	; 0x1a92 <_ZN6SdFile5writeEPKvj+0x172>
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    1bd6:	53 96       	adiw	r26, 0x13	; 19
    1bd8:	cd 90       	ld	r12, X+
    1bda:	dd 90       	ld	r13, X+
    1bdc:	ed 90       	ld	r14, X+
    1bde:	fc 90       	ld	r15, X
    1be0:	56 97       	sbiw	r26, 0x16	; 22
    1be2:	14 96       	adiw	r26, 0x04	; 4
    1be4:	8c 91       	ld	r24, X
    1be6:	c4 16       	cp	r12, r20
    1be8:	d5 06       	cpc	r13, r21
    1bea:	e6 06       	cpc	r14, r22
    1bec:	f7 06       	cpc	r15, r23
    1bee:	40 f4       	brcc	.+16     	; 0x1c00 <_ZN6SdFile5writeEPKvj+0x2e0>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	43 8b       	std	Z+19, r20	; 0x13
    1bf4:	54 8b       	std	Z+20, r21	; 0x14
    1bf6:	65 8b       	std	Z+21, r22	; 0x15
    1bf8:	76 8b       	std	Z+22, r23	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    1bfa:	80 68       	ori	r24, 0x80	; 128
    1bfc:	84 83       	std	Z+4, r24	; 0x04
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <_ZN6SdFile5writeEPKvj+0x2fa>
  } else if (dateTime_ && nbyte) {
    1c00:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <_ZN6SdFile9dateTime_E>
    1c04:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <_ZN6SdFile9dateTime_E+0x1>
    1c08:	23 2b       	or	r18, r19
    1c0a:	39 f0       	breq	.+14     	; 0x1c1a <_ZN6SdFile5writeEPKvj+0x2fa>
    1c0c:	61 14       	cp	r6, r1
    1c0e:	71 04       	cpc	r7, r1
    1c10:	21 f0       	breq	.+8      	; 0x1c1a <_ZN6SdFile5writeEPKvj+0x2fa>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    1c12:	80 68       	ori	r24, 0x80	; 128
    1c14:	d8 01       	movw	r26, r16
    1c16:	14 96       	adiw	r26, 0x04	; 4
    1c18:	8c 93       	st	X, r24
  }

  if (flags_ & O_SYNC) {
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	84 81       	ldd	r24, Z+4	; 0x04
    1c1e:	83 fd       	sbrc	r24, 3
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <_ZN6SdFile5writeEPKvj+0x306>
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    1c22:	c3 01       	movw	r24, r6
    1c24:	07 c0       	rjmp	.+14     	; 0x1c34 <_ZN6SdFile5writeEPKvj+0x314>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    1c26:	c8 01       	movw	r24, r16
    1c28:	0e 94 27 0a 	call	0x144e	; 0x144e <_ZN6SdFile4syncEv>
    1c2c:	88 23       	and	r24, r24
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <_ZN6SdFile5writeEPKvj+0x312>
    1c30:	af ce       	rjmp	.-674    	; 0x1990 <_ZN6SdFile5writeEPKvj+0x70>
    1c32:	f7 cf       	rjmp	.-18     	; 0x1c22 <_ZN6SdFile5writeEPKvj+0x302>
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	9f 90       	pop	r9
    1c52:	8f 90       	pop	r8
    1c54:	7f 90       	pop	r7
    1c56:	6f 90       	pop	r6
    1c58:	5f 90       	pop	r5
    1c5a:	4f 90       	pop	r4
    1c5c:	3f 90       	pop	r3
    1c5e:	2f 90       	pop	r2
    1c60:	08 95       	ret

00001c62 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    1c62:	cf 93       	push	r28
    1c64:	df 93       	push	r29
    1c66:	1f 92       	push	r1
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    1c6e:	41 e0       	ldi	r20, 0x01	; 1
    1c70:	50 e0       	ldi	r21, 0x00	; 0
    1c72:	be 01       	movw	r22, r28
    1c74:	6f 5f       	subi	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	0e 94 90 0c 	call	0x1920	; 0x1920 <_ZN6SdFile5writeEPKvj>
}
    1c7c:	0f 90       	pop	r0
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    1c84:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
    1c88:	88 23       	and	r24, r24
    1c8a:	a9 f1       	breq	.+106    	; 0x1cf6 <_ZN8SdVolume10cacheFlushEv+0x72>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    1c8c:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1c90:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1c94:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1c98:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1c9c:	29 ea       	ldi	r18, 0xA9	; 169
    1c9e:	31 e0       	ldi	r19, 0x01	; 1
    1ca0:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN8SdVolume7sdCard_E>
    1ca4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN8SdVolume7sdCard_E+0x1>
    1ca8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN7Sd2Card10writeBlockEmPKh>
    1cac:	81 11       	cpse	r24, r1
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <_ZN8SdVolume10cacheFlushEv+0x30>
      return false;
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	08 95       	ret
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    1cb4:	40 91 a2 01 	lds	r20, 0x01A2	; 0x8001a2 <_ZN8SdVolume17cacheMirrorBlock_E>
    1cb8:	50 91 a3 01 	lds	r21, 0x01A3	; 0x8001a3 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    1cbc:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    1cc0:	70 91 a5 01 	lds	r23, 0x01A5	; 0x8001a5 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    1cc4:	41 15       	cp	r20, r1
    1cc6:	51 05       	cpc	r21, r1
    1cc8:	61 05       	cpc	r22, r1
    1cca:	71 05       	cpc	r23, r1
    1ccc:	91 f0       	breq	.+36     	; 0x1cf2 <_ZN8SdVolume10cacheFlushEv+0x6e>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    1cce:	29 ea       	ldi	r18, 0xA9	; 169
    1cd0:	31 e0       	ldi	r19, 0x01	; 1
    1cd2:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN8SdVolume7sdCard_E>
    1cd6:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN8SdVolume7sdCard_E+0x1>
    1cda:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN7Sd2Card10writeBlockEmPKh>
    1cde:	88 23       	and	r24, r24
    1ce0:	39 f3       	breq	.-50     	; 0x1cb0 <_ZN8SdVolume10cacheFlushEv+0x2c>
        return false;
      }
      cacheMirrorBlock_ = 0;
    1ce2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <_ZN8SdVolume17cacheMirrorBlock_E>
    1ce6:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    1cea:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    1cee:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
    }
    cacheDirty_ = 0;
    1cf2:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
  }
  return true;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
}
    1cf8:	08 95       	ret

00001cfa <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	cf 93       	push	r28
    1d04:	6b 01       	movw	r12, r22
    1d06:	7c 01       	movw	r14, r24
    1d08:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    1d0a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1d0e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1d12:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1d16:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1d1a:	8c 15       	cp	r24, r12
    1d1c:	9d 05       	cpc	r25, r13
    1d1e:	ae 05       	cpc	r26, r14
    1d20:	bf 05       	cpc	r27, r15
    1d22:	d1 f0       	breq	.+52     	; 0x1d58 <_ZN8SdVolume13cacheRawBlockEmh+0x5e>
    if (!cacheFlush()) return false;
    1d24:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN8SdVolume10cacheFlushEv>
    1d28:	81 11       	cpse	r24, r1
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <_ZN8SdVolume13cacheRawBlockEmh+0x36>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	1a c0       	rjmp	.+52     	; 0x1d64 <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    1d30:	29 ea       	ldi	r18, 0xA9	; 169
    1d32:	31 e0       	ldi	r19, 0x01	; 1
    1d34:	b7 01       	movw	r22, r14
    1d36:	a6 01       	movw	r20, r12
    1d38:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <_ZN8SdVolume7sdCard_E>
    1d3c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <_ZN8SdVolume7sdCard_E+0x1>
    1d40:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN7Sd2Card9readBlockEmPh>
    1d44:	88 23       	and	r24, r24
    1d46:	91 f3       	breq	.-28     	; 0x1d2c <_ZN8SdVolume13cacheRawBlockEmh+0x32>
    cacheBlockNumber_ = blockNumber;
    1d48:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1d4c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1d50:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1d54:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
  }
  cacheDirty_ |= action;
    1d58:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
    1d5c:	c8 2b       	or	r28, r24
    1d5e:	c0 93 a6 01 	sts	0x01A6, r28	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
  return true;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
}
    1d64:	cf 91       	pop	r28
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	08 95       	ret

00001d70 <_ZN8SdVolume14cacheZeroBlockEm>:
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    1d70:	cf 92       	push	r12
    1d72:	df 92       	push	r13
    1d74:	ef 92       	push	r14
    1d76:	ff 92       	push	r15
    1d78:	6b 01       	movw	r12, r22
    1d7a:	7c 01       	movw	r14, r24
  if (!cacheFlush()) return false;
    1d7c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <_ZN8SdVolume10cacheFlushEv>
    1d80:	88 23       	and	r24, r24
    1d82:	a9 f0       	breq	.+42     	; 0x1dae <_ZN8SdVolume14cacheZeroBlockEm+0x3e>
    1d84:	e9 ea       	ldi	r30, 0xA9	; 169
    1d86:	f1 e0       	ldi	r31, 0x01	; 1

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    1d88:	11 92       	st	Z+, r1
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	e9 3a       	cpi	r30, 0xA9	; 169
    1d8e:	f8 07       	cpc	r31, r24
    1d90:	d9 f7       	brne	.-10     	; 0x1d88 <_ZN8SdVolume14cacheZeroBlockEm+0x18>
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    1d92:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1d96:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1d9a:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1d9e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1da2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
    1da6:	81 60       	ori	r24, 0x01	; 1
    1da8:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
  cacheSetDirty();
  return true;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
}
    1dae:	ff 90       	pop	r15
    1db0:	ef 90       	pop	r14
    1db2:	df 90       	pop	r13
    1db4:	cf 90       	pop	r12
    1db6:	08 95       	ret

00001db8 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    1db8:	8f 92       	push	r8
    1dba:	9f 92       	push	r9
    1dbc:	af 92       	push	r10
    1dbe:	bf 92       	push	r11
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	fc 01       	movw	r30, r24
  if (cluster > (clusterCount_ + 1)) return false;
    1dd2:	81 85       	ldd	r24, Z+9	; 0x09
    1dd4:	92 85       	ldd	r25, Z+10	; 0x0a
    1dd6:	a3 85       	ldd	r26, Z+11	; 0x0b
    1dd8:	b4 85       	ldd	r27, Z+12	; 0x0c
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	a1 1d       	adc	r26, r1
    1dde:	b1 1d       	adc	r27, r1
    1de0:	84 17       	cp	r24, r20
    1de2:	95 07       	cpc	r25, r21
    1de4:	a6 07       	cpc	r26, r22
    1de6:	b7 07       	cpc	r27, r23
    1de8:	10 f4       	brcc	.+4      	; 0x1dee <_ZNK8SdVolume6fatGetEmPm+0x36>
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	5c c0       	rjmp	.+184    	; 0x1ea6 <_ZNK8SdVolume6fatGetEmPm+0xee>
  uint32_t lba = fatStartBlock_;
    1dee:	83 89       	ldd	r24, Z+19	; 0x13
    1df0:	94 89       	ldd	r25, Z+20	; 0x14
    1df2:	a5 89       	ldd	r26, Z+21	; 0x15
    1df4:	b6 89       	ldd	r27, Z+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1df6:	c7 89       	ldd	r28, Z+23	; 0x17
    1df8:	c0 31       	cpi	r28, 0x10	; 16
    1dfa:	29 f4       	brne	.+10     	; 0x1e06 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    1dfc:	85 2e       	mov	r8, r21
    1dfe:	96 2e       	mov	r9, r22
    1e00:	a7 2e       	mov	r10, r23
    1e02:	bb 24       	eor	r11, r11
    1e04:	09 c0       	rjmp	.+18     	; 0x1e18 <_ZNK8SdVolume6fatGetEmPm+0x60>
    1e06:	4a 01       	movw	r8, r20
    1e08:	5b 01       	movw	r10, r22
    1e0a:	c7 e0       	ldi	r28, 0x07	; 7
    1e0c:	b6 94       	lsr	r11
    1e0e:	a7 94       	ror	r10
    1e10:	97 94       	ror	r9
    1e12:	87 94       	ror	r8
    1e14:	ca 95       	dec	r28
    1e16:	d1 f7       	brne	.-12     	; 0x1e0c <_ZNK8SdVolume6fatGetEmPm+0x54>
    1e18:	e9 01       	movw	r28, r18
    1e1a:	6a 01       	movw	r12, r20
    1e1c:	7b 01       	movw	r14, r22
    1e1e:	8f 01       	movw	r16, r30
    1e20:	bc 01       	movw	r22, r24
    1e22:	cd 01       	movw	r24, r26
    1e24:	68 0d       	add	r22, r8
    1e26:	79 1d       	adc	r23, r9
    1e28:	8a 1d       	adc	r24, r10
    1e2a:	9b 1d       	adc	r25, r11
  if (lba != cacheBlockNumber_) {
    1e2c:	80 90 06 01 	lds	r8, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    1e30:	90 90 07 01 	lds	r9, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    1e34:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    1e38:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    1e3c:	68 15       	cp	r22, r8
    1e3e:	79 05       	cpc	r23, r9
    1e40:	8a 05       	cpc	r24, r10
    1e42:	9b 05       	cpc	r25, r11
    1e44:	99 f4       	brne	.+38     	; 0x1e6c <_ZNK8SdVolume6fatGetEmPm+0xb4>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    1e46:	f8 01       	movw	r30, r16
    1e48:	87 89       	ldd	r24, Z+23	; 0x17
    1e4a:	80 31       	cpi	r24, 0x10	; 16
    1e4c:	a9 f4       	brne	.+42     	; 0x1e78 <_ZNK8SdVolume6fatGetEmPm+0xc0>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    1e4e:	b7 01       	movw	r22, r14
    1e50:	a6 01       	movw	r20, r12
    1e52:	55 27       	eor	r21, r21
    1e54:	66 27       	eor	r22, r22
    1e56:	77 27       	eor	r23, r23
    1e58:	44 0f       	add	r20, r20
    1e5a:	55 1f       	adc	r21, r21
    1e5c:	fa 01       	movw	r30, r20
    1e5e:	e7 55       	subi	r30, 0x57	; 87
    1e60:	fe 4f       	sbci	r31, 0xFE	; 254
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	18 c0       	rjmp	.+48     	; 0x1e9c <_ZNK8SdVolume6fatGetEmPm+0xe4>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
    1e72:	81 11       	cpse	r24, r1
    1e74:	e8 cf       	rjmp	.-48     	; 0x1e46 <_ZNK8SdVolume6fatGetEmPm+0x8e>
    1e76:	b9 cf       	rjmp	.-142    	; 0x1dea <_ZNK8SdVolume6fatGetEmPm+0x32>
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    1e78:	b7 01       	movw	r22, r14
    1e7a:	a6 01       	movw	r20, r12
    1e7c:	4f 77       	andi	r20, 0x7F	; 127
    1e7e:	55 27       	eor	r21, r21
    1e80:	66 27       	eor	r22, r22
    1e82:	77 27       	eor	r23, r23
    1e84:	44 0f       	add	r20, r20
    1e86:	55 1f       	adc	r21, r21
    1e88:	44 0f       	add	r20, r20
    1e8a:	55 1f       	adc	r21, r21
    1e8c:	fa 01       	movw	r30, r20
    1e8e:	e7 55       	subi	r30, 0x57	; 87
    1e90:	fe 4f       	sbci	r31, 0xFE	; 254
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	a2 81       	ldd	r26, Z+2	; 0x02
    1e98:	b3 81       	ldd	r27, Z+3	; 0x03
    1e9a:	bf 70       	andi	r27, 0x0F	; 15
    1e9c:	88 83       	st	Y, r24
    1e9e:	99 83       	std	Y+1, r25	; 0x01
    1ea0:	aa 83       	std	Y+2, r26	; 0x02
    1ea2:	bb 83       	std	Y+3, r27	; 0x03
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
  }
  return true;
}
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	ff 90       	pop	r15
    1eb0:	ef 90       	pop	r14
    1eb2:	df 90       	pop	r13
    1eb4:	cf 90       	pop	r12
    1eb6:	bf 90       	pop	r11
    1eb8:	af 90       	pop	r10
    1eba:	9f 90       	pop	r9
    1ebc:	8f 90       	pop	r8
    1ebe:	08 95       	ret

00001ec0 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    1ec0:	4f 92       	push	r4
    1ec2:	5f 92       	push	r5
    1ec4:	6f 92       	push	r6
    1ec6:	7f 92       	push	r7
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	00 d0       	rcall	.+0      	; 0x1ede <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    1ede:	00 d0       	rcall	.+0      	; 0x1ee0 <_ZNK8SdVolume9chainSizeEmPm+0x20>
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	8c 01       	movw	r16, r24
    1ee6:	49 83       	std	Y+1, r20	; 0x01
    1ee8:	5a 83       	std	Y+2, r21	; 0x02
    1eea:	6b 83       	std	Y+3, r22	; 0x03
    1eec:	7c 83       	std	Y+4, r23	; 0x04
    1eee:	59 01       	movw	r10, r18
  uint32_t s = 0;
    1ef0:	c1 2c       	mov	r12, r1
    1ef2:	d1 2c       	mov	r13, r1
    1ef4:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    1ef6:	41 2c       	mov	r4, r1
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	58 2e       	mov	r5, r24
    1efc:	61 2c       	mov	r6, r1
    1efe:	71 2c       	mov	r7, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    1f00:	49 81       	ldd	r20, Y+1	; 0x01
    1f02:	5a 81       	ldd	r21, Y+2	; 0x02
    1f04:	6b 81       	ldd	r22, Y+3	; 0x03
    1f06:	7c 81       	ldd	r23, Y+4	; 0x04
    1f08:	9e 01       	movw	r18, r28
    1f0a:	2f 5f       	subi	r18, 0xFF	; 255
    1f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0e:	c8 01       	movw	r24, r16
    1f10:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    1f14:	88 23       	and	r24, r24
    1f16:	51 f1       	breq	.+84     	; 0x1f6c <_ZNK8SdVolume9chainSizeEmPm+0xac>
    s += 512UL << clusterSizeShift_;
    1f18:	d3 01       	movw	r26, r6
    1f1a:	c2 01       	movw	r24, r4
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	05 84       	ldd	r0, Z+13	; 0x0d
    1f20:	04 c0       	rjmp	.+8      	; 0x1f2a <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	aa 1f       	adc	r26, r26
    1f28:	bb 1f       	adc	r27, r27
    1f2a:	0a 94       	dec	r0
    1f2c:	d2 f7       	brpl	.-12     	; 0x1f22 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    1f2e:	c8 0e       	add	r12, r24
    1f30:	d9 1e       	adc	r13, r25
    1f32:	ea 1e       	adc	r14, r26
    1f34:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    1f36:	49 81       	ldd	r20, Y+1	; 0x01
    1f38:	5a 81       	ldd	r21, Y+2	; 0x02
    1f3a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f3c:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    1f3e:	87 89       	ldd	r24, Z+23	; 0x17
    1f40:	80 31       	cpi	r24, 0x10	; 16
    1f42:	29 f0       	breq	.+10     	; 0x1f4e <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    1f44:	88 ef       	ldi	r24, 0xF8	; 248
    1f46:	9f ef       	ldi	r25, 0xFF	; 255
    1f48:	af ef       	ldi	r26, 0xFF	; 255
    1f4a:	bf e0       	ldi	r27, 0x0F	; 15
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <_ZNK8SdVolume9chainSizeEmPm+0x96>
    1f4e:	88 ef       	ldi	r24, 0xF8	; 248
    1f50:	9f ef       	ldi	r25, 0xFF	; 255
    1f52:	a0 e0       	ldi	r26, 0x00	; 0
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    1f56:	48 17       	cp	r20, r24
    1f58:	59 07       	cpc	r21, r25
    1f5a:	6a 07       	cpc	r22, r26
    1f5c:	7b 07       	cpc	r23, r27
    1f5e:	80 f2       	brcs	.-96     	; 0x1f00 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    1f60:	f5 01       	movw	r30, r10
    1f62:	c0 82       	st	Z, r12
    1f64:	d1 82       	std	Z+1, r13	; 0x01
    1f66:	e2 82       	std	Z+2, r14	; 0x02
    1f68:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
}
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	0f 90       	pop	r0
    1f72:	0f 90       	pop	r0
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	7f 90       	pop	r7
    1f8a:	6f 90       	pop	r6
    1f8c:	5f 90       	pop	r5
    1f8e:	4f 90       	pop	r4
    1f90:	08 95       	ret

00001f92 <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    1f92:	4f 92       	push	r4
    1f94:	5f 92       	push	r5
    1f96:	6f 92       	push	r6
    1f98:	7f 92       	push	r7
    1f9a:	8f 92       	push	r8
    1f9c:	9f 92       	push	r9
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	cf 92       	push	r12
    1fa4:	df 92       	push	r13
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	6a 01       	movw	r12, r20
    1fb6:	7b 01       	movw	r14, r22
    1fb8:	28 01       	movw	r4, r16
    1fba:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    1fbc:	42 30       	cpi	r20, 0x02	; 2
    1fbe:	51 05       	cpc	r21, r1
    1fc0:	61 05       	cpc	r22, r1
    1fc2:	71 05       	cpc	r23, r1
    1fc4:	10 f4       	brcc	.+4      	; 0x1fca <_ZN8SdVolume6fatPutEmm+0x38>
    1fc6:	80 e0       	ldi	r24, 0x00	; 0
    1fc8:	73 c0       	rjmp	.+230    	; 0x20b0 <_ZN8SdVolume6fatPutEmm+0x11e>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fd0:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	b1 1d       	adc	r27, r1
    1fd8:	84 17       	cp	r24, r20
    1fda:	95 07       	cpc	r25, r21
    1fdc:	a6 07       	cpc	r26, r22
    1fde:	b7 07       	cpc	r27, r23
    1fe0:	90 f3       	brcs	.-28     	; 0x1fc6 <_ZN8SdVolume6fatPutEmm+0x34>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    1fe2:	8b 88       	ldd	r8, Y+19	; 0x13
    1fe4:	9c 88       	ldd	r9, Y+20	; 0x14
    1fe6:	ad 88       	ldd	r10, Y+21	; 0x15
    1fe8:	be 88       	ldd	r11, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    1fea:	8f 89       	ldd	r24, Y+23	; 0x17
    1fec:	80 31       	cpi	r24, 0x10	; 16
    1fee:	29 f4       	brne	.+10     	; 0x1ffa <_ZN8SdVolume6fatPutEmm+0x68>
    1ff0:	bb 27       	eor	r27, r27
    1ff2:	af 2d       	mov	r26, r15
    1ff4:	9e 2d       	mov	r25, r14
    1ff6:	8d 2d       	mov	r24, r13
    1ff8:	09 c0       	rjmp	.+18     	; 0x200c <_ZN8SdVolume6fatPutEmm+0x7a>
    1ffa:	db 01       	movw	r26, r22
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	47 e0       	ldi	r20, 0x07	; 7
    2000:	b6 95       	lsr	r27
    2002:	a7 95       	ror	r26
    2004:	97 95       	ror	r25
    2006:	87 95       	ror	r24
    2008:	4a 95       	dec	r20
    200a:	d1 f7       	brne	.-12     	; 0x2000 <_ZN8SdVolume6fatPutEmm+0x6e>
    200c:	88 0e       	add	r8, r24
    200e:	99 1e       	adc	r9, r25
    2010:	aa 1e       	adc	r10, r26
    2012:	bb 1e       	adc	r11, r27

  if (lba != cacheBlockNumber_) {
    2014:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_ZN8SdVolume17cacheBlockNumber_E>
    2018:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_ZN8SdVolume17cacheBlockNumber_E+0x1>
    201c:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_ZN8SdVolume17cacheBlockNumber_E+0x2>
    2020:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_ZN8SdVolume17cacheBlockNumber_E+0x3>
    2024:	88 16       	cp	r8, r24
    2026:	99 06       	cpc	r9, r25
    2028:	aa 06       	cpc	r10, r26
    202a:	bb 06       	cpc	r11, r27
    202c:	79 f4       	brne	.+30     	; 0x204c <_ZN8SdVolume6fatPutEmm+0xba>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    202e:	8f 89       	ldd	r24, Y+23	; 0x17
    2030:	80 31       	cpi	r24, 0x10	; 16
    2032:	a1 f4       	brne	.+40     	; 0x205c <_ZN8SdVolume6fatPutEmm+0xca>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2034:	dd 24       	eor	r13, r13
    2036:	ee 24       	eor	r14, r14
    2038:	ff 24       	eor	r15, r15
    203a:	c6 01       	movw	r24, r12
    203c:	88 0f       	add	r24, r24
    203e:	99 1f       	adc	r25, r25
    2040:	fc 01       	movw	r30, r24
    2042:	e7 55       	subi	r30, 0x57	; 87
    2044:	fe 4f       	sbci	r31, 0xFE	; 254
    2046:	51 82       	std	Z+1, r5	; 0x01
    2048:	40 82       	st	Z, r4
    204a:	19 c0       	rjmp	.+50     	; 0x207e <_ZN8SdVolume6fatPutEmm+0xec>
  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	c5 01       	movw	r24, r10
    2050:	b4 01       	movw	r22, r8
    2052:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
    2056:	81 11       	cpse	r24, r1
    2058:	ea cf       	rjmp	.-44     	; 0x202e <_ZN8SdVolume6fatPutEmm+0x9c>
    205a:	b5 cf       	rjmp	.-150    	; 0x1fc6 <_ZN8SdVolume6fatPutEmm+0x34>
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    205c:	e8 94       	clt
    205e:	c7 f8       	bld	r12, 7
    2060:	dd 24       	eor	r13, r13
    2062:	ee 24       	eor	r14, r14
    2064:	ff 24       	eor	r15, r15
    2066:	c6 01       	movw	r24, r12
    2068:	88 0f       	add	r24, r24
    206a:	99 1f       	adc	r25, r25
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	fc 01       	movw	r30, r24
    2072:	e7 55       	subi	r30, 0x57	; 87
    2074:	fe 4f       	sbci	r31, 0xFE	; 254
    2076:	40 82       	st	Z, r4
    2078:	51 82       	std	Z+1, r5	; 0x01
    207a:	62 82       	std	Z+2, r6	; 0x02
    207c:	73 82       	std	Z+3, r7	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    207e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
    2082:	81 60       	ori	r24, 0x01	; 1
    2084:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <_ZN8SdVolume11cacheDirty_E>
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2088:	8a 89       	ldd	r24, Y+18	; 0x12
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	80 f0       	brcs	.+32     	; 0x20ae <_ZN8SdVolume6fatPutEmm+0x11c>
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	af 81       	ldd	r26, Y+7	; 0x07
    2094:	b8 85       	ldd	r27, Y+8	; 0x08
    2096:	88 0e       	add	r8, r24
    2098:	99 1e       	adc	r9, r25
    209a:	aa 1e       	adc	r10, r26
    209c:	bb 1e       	adc	r11, r27
    209e:	80 92 a2 01 	sts	0x01A2, r8	; 0x8001a2 <_ZN8SdVolume17cacheMirrorBlock_E>
    20a2:	90 92 a3 01 	sts	0x01A3, r9	; 0x8001a3 <_ZN8SdVolume17cacheMirrorBlock_E+0x1>
    20a6:	a0 92 a4 01 	sts	0x01A4, r10	; 0x8001a4 <_ZN8SdVolume17cacheMirrorBlock_E+0x2>
    20aa:	b0 92 a5 01 	sts	0x01A5, r11	; 0x8001a5 <_ZN8SdVolume17cacheMirrorBlock_E+0x3>
  return true;
    20ae:	81 e0       	ldi	r24, 0x01	; 1
}
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	1f 91       	pop	r17
    20b6:	0f 91       	pop	r16
    20b8:	ff 90       	pop	r15
    20ba:	ef 90       	pop	r14
    20bc:	df 90       	pop	r13
    20be:	cf 90       	pop	r12
    20c0:	bf 90       	pop	r11
    20c2:	af 90       	pop	r10
    20c4:	9f 90       	pop	r9
    20c6:	8f 90       	pop	r8
    20c8:	7f 90       	pop	r7
    20ca:	6f 90       	pop	r6
    20cc:	5f 90       	pop	r5
    20ce:	4f 90       	pop	r4
    20d0:	08 95       	ret

000020d2 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    20d2:	2f 92       	push	r2
    20d4:	3f 92       	push	r3
    20d6:	4f 92       	push	r4
    20d8:	5f 92       	push	r5
    20da:	6f 92       	push	r6
    20dc:	7f 92       	push	r7
    20de:	9f 92       	push	r9
    20e0:	af 92       	push	r10
    20e2:	bf 92       	push	r11
    20e4:	cf 92       	push	r12
    20e6:	df 92       	push	r13
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	cf 93       	push	r28
    20f2:	df 93       	push	r29
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	60 97       	sbiw	r28, 0x10	; 16
    20fa:	0f b6       	in	r0, 0x3f	; 63
    20fc:	f8 94       	cli
    20fe:	de bf       	out	0x3e, r29	; 62
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	cd bf       	out	0x3d, r28	; 61
    2104:	5c 01       	movw	r10, r24
    2106:	49 87       	std	Y+9, r20	; 0x09
    2108:	5a 87       	std	Y+10, r21	; 0x0a
    210a:	6b 87       	std	Y+11, r22	; 0x0b
    210c:	7c 87       	std	Y+12, r23	; 0x0c
    210e:	19 01       	movw	r2, r18

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2110:	d9 01       	movw	r26, r18
    2112:	cd 90       	ld	r12, X+
    2114:	dd 90       	ld	r13, X+
    2116:	ed 90       	ld	r14, X+
    2118:	fc 90       	ld	r15, X
    211a:	c1 14       	cp	r12, r1
    211c:	d1 04       	cpc	r13, r1
    211e:	e1 04       	cpc	r14, r1
    2120:	f1 04       	cpc	r15, r1
    2122:	31 f0       	breq	.+12     	; 0x2130 <_ZN8SdVolume15allocContiguousEmPm+0x5e>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2124:	bf ef       	ldi	r27, 0xFF	; 255
    2126:	cb 1a       	sub	r12, r27
    2128:	db 0a       	sbc	r13, r27
    212a:	eb 0a       	sbc	r14, r27
    212c:	fb 0a       	sbc	r15, r27
    212e:	10 c0       	rjmp	.+32     	; 0x2150 <_ZN8SdVolume15allocContiguousEmPm+0x7e>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2130:	fc 01       	movw	r30, r24
    2132:	c0 80       	ld	r12, Z
    2134:	d1 80       	ldd	r13, Z+1	; 0x01
    2136:	e2 80       	ldd	r14, Z+2	; 0x02
    2138:	f3 80       	ldd	r15, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    213a:	99 24       	eor	r9, r9
    213c:	93 94       	inc	r9
    213e:	09 85       	ldd	r16, Y+9	; 0x09
    2140:	1a 85       	ldd	r17, Y+10	; 0x0a
    2142:	2b 85       	ldd	r18, Y+11	; 0x0b
    2144:	3c 85       	ldd	r19, Y+12	; 0x0c
    2146:	01 30       	cpi	r16, 0x01	; 1
    2148:	11 05       	cpc	r17, r1
    214a:	21 05       	cpc	r18, r1
    214c:	31 05       	cpc	r19, r1
    214e:	09 f0       	breq	.+2      	; 0x2152 <_ZN8SdVolume15allocContiguousEmPm+0x80>
    2150:	91 2c       	mov	r9, r1
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2152:	f5 01       	movw	r30, r10
    2154:	81 85       	ldd	r24, Z+9	; 0x09
    2156:	92 85       	ldd	r25, Z+10	; 0x0a
    2158:	a3 85       	ldd	r26, Z+11	; 0x0b
    215a:	b4 85       	ldd	r27, Z+12	; 0x0c
    215c:	8c 01       	movw	r16, r24
    215e:	9d 01       	movw	r18, r26
    2160:	0f 5f       	subi	r16, 0xFF	; 255
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	2f 4f       	sbci	r18, 0xFF	; 255
    2166:	3f 4f       	sbci	r19, 0xFF	; 255
    2168:	0d 87       	std	Y+13, r16	; 0x0d
    216a:	1e 87       	std	Y+14, r17	; 0x0e
    216c:	2f 87       	std	Y+15, r18	; 0x0f
    216e:	38 8b       	std	Y+16, r19	; 0x10

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2170:	26 01       	movw	r4, r12
    2172:	37 01       	movw	r6, r14

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2174:	1d 82       	std	Y+5, r1	; 0x05
    2176:	1e 82       	std	Y+6, r1	; 0x06
    2178:	1f 82       	std	Y+7, r1	; 0x07
    217a:	18 86       	std	Y+8, r1	; 0x08
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    217c:	f5 01       	movw	r30, r10
    217e:	81 85       	ldd	r24, Z+9	; 0x09
    2180:	92 85       	ldd	r25, Z+10	; 0x0a
    2182:	a3 85       	ldd	r26, Z+11	; 0x0b
    2184:	b4 85       	ldd	r27, Z+12	; 0x0c
    2186:	0d 81       	ldd	r16, Y+5	; 0x05
    2188:	1e 81       	ldd	r17, Y+6	; 0x06
    218a:	2f 81       	ldd	r18, Y+7	; 0x07
    218c:	38 85       	ldd	r19, Y+8	; 0x08
    218e:	08 17       	cp	r16, r24
    2190:	19 07       	cpc	r17, r25
    2192:	2a 07       	cpc	r18, r26
    2194:	3b 07       	cpc	r19, r27
    2196:	08 f0       	brcs	.+2      	; 0x219a <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2198:	56 c0       	rjmp	.+172    	; 0x2246 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    219a:	2d 85       	ldd	r18, Y+13	; 0x0d
    219c:	3e 85       	ldd	r19, Y+14	; 0x0e
    219e:	4f 85       	ldd	r20, Y+15	; 0x0f
    21a0:	58 89       	ldd	r21, Y+16	; 0x10
    21a2:	24 15       	cp	r18, r4
    21a4:	35 05       	cpc	r19, r5
    21a6:	46 05       	cpc	r20, r6
    21a8:	57 05       	cpc	r21, r7
    21aa:	50 f4       	brcc	.+20     	; 0x21c0 <_ZN8SdVolume15allocContiguousEmPm+0xee>
      bgnCluster = endCluster = 2;
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	48 2e       	mov	r4, r24
    21b0:	51 2c       	mov	r5, r1
    21b2:	61 2c       	mov	r6, r1
    21b4:	71 2c       	mov	r7, r1
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	c9 2e       	mov	r12, r25
    21ba:	d1 2c       	mov	r13, r1
    21bc:	e1 2c       	mov	r14, r1
    21be:	f1 2c       	mov	r15, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    21c0:	9e 01       	movw	r18, r28
    21c2:	2f 5f       	subi	r18, 0xFF	; 255
    21c4:	3f 4f       	sbci	r19, 0xFF	; 255
    21c6:	b3 01       	movw	r22, r6
    21c8:	a2 01       	movw	r20, r4
    21ca:	c5 01       	movw	r24, r10
    21cc:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    21d0:	88 23       	and	r24, r24
    21d2:	c9 f1       	breq	.+114    	; 0x2246 <_ZN8SdVolume15allocContiguousEmPm+0x174>

    if (f != 0) {
    21d4:	49 81       	ldd	r20, Y+1	; 0x01
    21d6:	5a 81       	ldd	r21, Y+2	; 0x02
    21d8:	6b 81       	ldd	r22, Y+3	; 0x03
    21da:	7c 81       	ldd	r23, Y+4	; 0x04
    21dc:	d3 01       	movw	r26, r6
    21de:	c2 01       	movw	r24, r4
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	a1 1d       	adc	r26, r1
    21e4:	b1 1d       	adc	r27, r1
    21e6:	45 2b       	or	r20, r21
    21e8:	46 2b       	or	r20, r22
    21ea:	47 2b       	or	r20, r23
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <_ZN8SdVolume15allocContiguousEmPm+0x122>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    21ee:	6c 01       	movw	r12, r24
    21f0:	7d 01       	movw	r14, r26
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <_ZN8SdVolume15allocContiguousEmPm+0x140>
    } else if ((endCluster - bgnCluster + 1) == count) {
    21f4:	ac 01       	movw	r20, r24
    21f6:	bd 01       	movw	r22, r26
    21f8:	4c 19       	sub	r20, r12
    21fa:	5d 09       	sbc	r21, r13
    21fc:	6e 09       	sbc	r22, r14
    21fe:	7f 09       	sbc	r23, r15
    2200:	09 85       	ldd	r16, Y+9	; 0x09
    2202:	1a 85       	ldd	r17, Y+10	; 0x0a
    2204:	2b 85       	ldd	r18, Y+11	; 0x0b
    2206:	3c 85       	ldd	r19, Y+12	; 0x0c
    2208:	40 17       	cp	r20, r16
    220a:	51 07       	cpc	r21, r17
    220c:	62 07       	cpc	r22, r18
    220e:	73 07       	cpc	r23, r19
    2210:	79 f0       	breq	.+30     	; 0x2230 <_ZN8SdVolume15allocContiguousEmPm+0x15e>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2212:	2d 81       	ldd	r18, Y+5	; 0x05
    2214:	3e 81       	ldd	r19, Y+6	; 0x06
    2216:	4f 81       	ldd	r20, Y+7	; 0x07
    2218:	58 85       	ldd	r21, Y+8	; 0x08
    221a:	2f 5f       	subi	r18, 0xFF	; 255
    221c:	3f 4f       	sbci	r19, 0xFF	; 255
    221e:	4f 4f       	sbci	r20, 0xFF	; 255
    2220:	5f 4f       	sbci	r21, 0xFF	; 255
    2222:	2d 83       	std	Y+5, r18	; 0x05
    2224:	3e 83       	std	Y+6, r19	; 0x06
    2226:	4f 83       	std	Y+7, r20	; 0x07
    2228:	58 87       	std	Y+8, r21	; 0x08
    222a:	2c 01       	movw	r4, r24
    222c:	3d 01       	movw	r6, r26
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
  }
    222e:	a6 cf       	rjmp	.-180    	; 0x217c <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    2230:	0f ef       	ldi	r16, 0xFF	; 255
    2232:	1f ef       	ldi	r17, 0xFF	; 255
    2234:	2f ef       	ldi	r18, 0xFF	; 255
    2236:	3f e0       	ldi	r19, 0x0F	; 15
    2238:	b3 01       	movw	r22, r6
    223a:	a2 01       	movw	r20, r4
    223c:	c5 01       	movw	r24, r10
    223e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN8SdVolume6fatPutEmm>
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    2242:	81 11       	cpse	r24, r1
    2244:	18 c0       	rjmp	.+48     	; 0x2276 <_ZN8SdVolume15allocContiguousEmPm+0x1a4>
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	41 c0       	rjmp	.+130    	; 0x22cc <_ZN8SdVolume15allocContiguousEmPm+0x1fa>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    224a:	d3 01       	movw	r26, r6
    224c:	c2 01       	movw	r24, r4
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	a1 09       	sbc	r26, r1
    2252:	b1 09       	sbc	r27, r1
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	af 83       	std	Y+7, r26	; 0x07
    225a:	b8 87       	std	Y+8, r27	; 0x08
    225c:	93 01       	movw	r18, r6
    225e:	82 01       	movw	r16, r4
    2260:	ac 01       	movw	r20, r24
    2262:	bd 01       	movw	r22, r26
    2264:	c5 01       	movw	r24, r10
    2266:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN8SdVolume6fatPutEmm>
    226a:	88 23       	and	r24, r24
    226c:	61 f3       	breq	.-40     	; 0x2246 <_ZN8SdVolume15allocContiguousEmPm+0x174>
    endCluster--;
    226e:	4d 80       	ldd	r4, Y+5	; 0x05
    2270:	5e 80       	ldd	r5, Y+6	; 0x06
    2272:	6f 80       	ldd	r6, Y+7	; 0x07
    2274:	78 84       	ldd	r7, Y+8	; 0x08
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    2276:	c4 14       	cp	r12, r4
    2278:	d5 04       	cpc	r13, r5
    227a:	e6 04       	cpc	r14, r6
    227c:	f7 04       	cpc	r15, r7
    227e:	28 f3       	brcs	.-54     	; 0x224a <_ZN8SdVolume15allocContiguousEmPm+0x178>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    2280:	d1 01       	movw	r26, r2
    2282:	4d 91       	ld	r20, X+
    2284:	5d 91       	ld	r21, X+
    2286:	6d 91       	ld	r22, X+
    2288:	7c 91       	ld	r23, X
    228a:	41 15       	cp	r20, r1
    228c:	51 05       	cpc	r21, r1
    228e:	61 05       	cpc	r22, r1
    2290:	71 05       	cpc	r23, r1
    2292:	99 f4       	brne	.+38     	; 0x22ba <_ZN8SdVolume15allocContiguousEmPm+0x1e8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    2294:	f1 01       	movw	r30, r2
    2296:	c0 82       	st	Z, r12
    2298:	d1 82       	std	Z+1, r13	; 0x01
    229a:	e2 82       	std	Z+2, r14	; 0x02
    229c:	f3 82       	std	Z+3, r15	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    229e:	99 20       	and	r9, r9
    22a0:	a1 f0       	breq	.+40     	; 0x22ca <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    22a2:	ff ef       	ldi	r31, 0xFF	; 255
    22a4:	cf 1a       	sub	r12, r31
    22a6:	df 0a       	sbc	r13, r31
    22a8:	ef 0a       	sbc	r14, r31
    22aa:	ff 0a       	sbc	r15, r31
    22ac:	d5 01       	movw	r26, r10
    22ae:	cd 92       	st	X+, r12
    22b0:	dd 92       	st	X+, r13
    22b2:	ed 92       	st	X+, r14
    22b4:	fc 92       	st	X, r15
    22b6:	13 97       	sbiw	r26, 0x03	; 3
    22b8:	08 c0       	rjmp	.+16     	; 0x22ca <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    22ba:	97 01       	movw	r18, r14
    22bc:	86 01       	movw	r16, r12
    22be:	c5 01       	movw	r24, r10
    22c0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN8SdVolume6fatPutEmm>
    22c4:	81 11       	cpse	r24, r1
    22c6:	e6 cf       	rjmp	.-52     	; 0x2294 <_ZN8SdVolume15allocContiguousEmPm+0x1c2>
    22c8:	be cf       	rjmp	.-132    	; 0x2246 <_ZN8SdVolume15allocContiguousEmPm+0x174>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
}
    22cc:	60 96       	adiw	r28, 0x10	; 16
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	bf 90       	pop	r11
    22ea:	af 90       	pop	r10
    22ec:	9f 90       	pop	r9
    22ee:	7f 90       	pop	r7
    22f0:	6f 90       	pop	r6
    22f2:	5f 90       	pop	r5
    22f4:	4f 90       	pop	r4
    22f6:	3f 90       	pop	r3
    22f8:	2f 90       	pop	r2
    22fa:	08 95       	ret

000022fc <_ZN8SdVolume9freeChainEm>:
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    22fc:	af 92       	push	r10
    22fe:	bf 92       	push	r11
    2300:	cf 92       	push	r12
    2302:	df 92       	push	r13
    2304:	ef 92       	push	r14
    2306:	ff 92       	push	r15
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	00 d0       	rcall	.+0      	; 0x2312 <_ZN8SdVolume9freeChainEm+0x16>
    2312:	00 d0       	rcall	.+0      	; 0x2314 <_ZN8SdVolume9freeChainEm+0x18>
    2314:	cd b7       	in	r28, 0x3d	; 61
    2316:	de b7       	in	r29, 0x3e	; 62
    2318:	5c 01       	movw	r10, r24
    231a:	6a 01       	movw	r12, r20
    231c:	7b 01       	movw	r14, r22
  // clear free cluster location
  allocSearchStart_ = 2;
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	f5 01       	movw	r30, r10
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2330:	9e 01       	movw	r18, r28
    2332:	2f 5f       	subi	r18, 0xFF	; 255
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	b7 01       	movw	r22, r14
    2338:	a6 01       	movw	r20, r12
    233a:	c5 01       	movw	r24, r10
    233c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <_ZNK8SdVolume6fatGetEmPm>
    2340:	88 23       	and	r24, r24
    2342:	11 f1       	breq	.+68     	; 0x2388 <_ZN8SdVolume9freeChainEm+0x8c>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    2344:	00 e0       	ldi	r16, 0x00	; 0
    2346:	10 e0       	ldi	r17, 0x00	; 0
    2348:	98 01       	movw	r18, r16
    234a:	b7 01       	movw	r22, r14
    234c:	a6 01       	movw	r20, r12
    234e:	c5 01       	movw	r24, r10
    2350:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <_ZN8SdVolume6fatPutEmm>
    2354:	88 23       	and	r24, r24
    2356:	c1 f0       	breq	.+48     	; 0x2388 <_ZN8SdVolume9freeChainEm+0x8c>

    cluster = next;
    2358:	c9 80       	ldd	r12, Y+1	; 0x01
    235a:	da 80       	ldd	r13, Y+2	; 0x02
    235c:	eb 80       	ldd	r14, Y+3	; 0x03
    235e:	fc 80       	ldd	r15, Y+4	; 0x04
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2360:	f5 01       	movw	r30, r10
    2362:	87 89       	ldd	r24, Z+23	; 0x17
    2364:	80 31       	cpi	r24, 0x10	; 16
    2366:	29 f0       	breq	.+10     	; 0x2372 <_ZN8SdVolume9freeChainEm+0x76>
    2368:	88 ef       	ldi	r24, 0xF8	; 248
    236a:	9f ef       	ldi	r25, 0xFF	; 255
    236c:	af ef       	ldi	r26, 0xFF	; 255
    236e:	bf e0       	ldi	r27, 0x0F	; 15
    2370:	04 c0       	rjmp	.+8      	; 0x237a <_ZN8SdVolume9freeChainEm+0x7e>
    2372:	88 ef       	ldi	r24, 0xF8	; 248
    2374:	9f ef       	ldi	r25, 0xFF	; 255
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    237a:	c8 16       	cp	r12, r24
    237c:	d9 06       	cpc	r13, r25
    237e:	ea 06       	cpc	r14, r26
    2380:	fb 06       	cpc	r15, r27
    2382:	b0 f2       	brcs	.-84     	; 0x2330 <_ZN8SdVolume9freeChainEm+0x34>
    if (!fatPut(cluster, 0)) return false;

    cluster = next;
  } while (!isEOC(cluster));

  return true;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	01 c0       	rjmp	.+2      	; 0x238a <_ZN8SdVolume9freeChainEm+0x8e>
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    2388:	80 e0       	ldi	r24, 0x00	; 0

    cluster = next;
  } while (!isEOC(cluster));

  return true;
}
    238a:	0f 90       	pop	r0
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	af 90       	pop	r10
    23a6:	08 95       	ret

000023a8 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
    23c0:	ec 01       	movw	r28, r24
    23c2:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    23c4:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <_ZN8SdVolume7sdCard_E+0x1>
    23c8:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <_ZN8SdVolume7sdCard_E>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    23cc:	44 23       	and	r20, r20
    23ce:	69 f1       	breq	.+90     	; 0x242a <_ZN8SdVolume4initEP7Sd2Cardh+0x82>
    if (part > 4)return false;
    23d0:	45 30       	cpi	r20, 0x05	; 5
    23d2:	10 f0       	brcs	.+4      	; 0x23d8 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	f2 c0       	rjmp	.+484    	; 0x25bc <_ZN8SdVolume4initEP7Sd2Cardh+0x214>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	60 e0       	ldi	r22, 0x00	; 0
    23dc:	70 e0       	ldi	r23, 0x00	; 0
    23de:	cb 01       	movw	r24, r22
    23e0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
    23e4:	88 23       	and	r24, r24
    23e6:	b1 f3       	breq	.-20     	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    23e8:	20 e1       	ldi	r18, 0x10	; 16
    23ea:	12 9f       	mul	r17, r18
    23ec:	a0 01       	movw	r20, r0
    23ee:	11 24       	eor	r1, r1
    23f0:	47 56       	subi	r20, 0x67	; 103
    23f2:	5e 4f       	sbci	r21, 0xFE	; 254
    23f4:	fa 01       	movw	r30, r20
    23f6:	e2 54       	subi	r30, 0x42	; 66
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	80 81       	ld	r24, Z
    23fc:	8f 77       	andi	r24, 0x7F	; 127
    23fe:	51 f7       	brne	.-44     	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
    2400:	3c 96       	adiw	r30, 0x0c	; 12
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    2402:	80 81       	ld	r24, Z
    2404:	91 81       	ldd	r25, Z+1	; 0x01
    2406:	a2 81       	ldd	r26, Z+2	; 0x02
    2408:	b3 81       	ldd	r27, Z+3	; 0x03
    240a:	84 36       	cpi	r24, 0x64	; 100
    240c:	91 05       	cpc	r25, r1
    240e:	a1 05       	cpc	r26, r1
    2410:	b1 05       	cpc	r27, r1
    2412:	00 f3       	brcs	.-64     	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    2414:	34 97       	sbiw	r30, 0x04	; 4
    2416:	c0 80       	ld	r12, Z
    2418:	d1 80       	ldd	r13, Z+1	; 0x01
    241a:	e2 80       	ldd	r14, Z+2	; 0x02
    241c:	f3 80       	ldd	r15, Z+3	; 0x03
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    241e:	c1 14       	cp	r12, r1
    2420:	d1 04       	cpc	r13, r1
    2422:	e1 04       	cpc	r14, r1
    2424:	f1 04       	cpc	r15, r1
    2426:	21 f4       	brne	.+8      	; 0x2430 <_ZN8SdVolume4initEP7Sd2Cardh+0x88>
    2428:	d5 cf       	rjmp	.-86     	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    242a:	c1 2c       	mov	r12, r1
    242c:	d1 2c       	mov	r13, r1
    242e:	76 01       	movw	r14, r12
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	c7 01       	movw	r24, r14
    2434:	b6 01       	movw	r22, r12
    2436:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN8SdVolume13cacheRawBlockEmh>
    243a:	88 23       	and	r24, r24
    243c:	59 f2       	breq	.-106    	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    243e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <_ZN8SdVolume12cacheBuffer_E+0xb>
    2442:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <_ZN8SdVolume12cacheBuffer_E+0xc>
    2446:	81 15       	cp	r24, r1
    2448:	92 40       	sbci	r25, 0x02	; 2
    244a:	21 f6       	brne	.-120    	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    244c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <_ZN8SdVolume12cacheBuffer_E+0x10>
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    2450:	99 23       	and	r25, r25
    2452:	09 f4       	brne	.+2      	; 0x2456 <_ZN8SdVolume4initEP7Sd2Cardh+0xae>
    2454:	bf cf       	rjmp	.-130    	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->fatCount == 0 ||
    2456:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <_ZN8SdVolume12cacheBuffer_E+0xe>
    245a:	30 91 b8 01 	lds	r19, 0x01B8	; 0x8001b8 <_ZN8SdVolume12cacheBuffer_E+0xf>
    245e:	23 2b       	or	r18, r19
    2460:	09 f4       	brne	.+2      	; 0x2464 <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
    2462:	b8 cf       	rjmp	.-144    	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    2464:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_ZN8SdVolume12cacheBuffer_E+0xd>
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    2468:	88 23       	and	r24, r24
    246a:	09 f4       	brne	.+2      	; 0x246e <_ZN8SdVolume4initEP7Sd2Cardh+0xc6>
    246c:	b3 cf       	rjmp	.-154    	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    246e:	9a 8b       	std	Y+18, r25	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    2470:	8c 83       	std	Y+4, r24	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    2472:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	2d 85       	ldd	r18, Y+13	; 0x0d
    247c:	e2 2f       	mov	r30, r18
    247e:	ab 01       	movw	r20, r22
    2480:	02 2e       	mov	r0, r18
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <_ZN8SdVolume4initEP7Sd2Cardh+0xe0>
    2484:	44 0f       	add	r20, r20
    2486:	55 1f       	adc	r21, r21
    2488:	0a 94       	dec	r0
    248a:	e2 f7       	brpl	.-8      	; 0x2484 <_ZN8SdVolume4initEP7Sd2Cardh+0xdc>
    248c:	84 17       	cp	r24, r20
    248e:	95 07       	cpc	r25, r21
    2490:	31 f0       	breq	.+12     	; 0x249e <_ZN8SdVolume4initEP7Sd2Cardh+0xf6>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    2492:	31 e0       	ldi	r19, 0x01	; 1
    2494:	32 0f       	add	r19, r18
    2496:	3d 87       	std	Y+13, r19	; 0x0d
    2498:	28 30       	cpi	r18, 0x08	; 8
    249a:	78 f3       	brcs	.-34     	; 0x247a <_ZN8SdVolume4initEP7Sd2Cardh+0xd2>
    249c:	9b cf       	rjmp	.-202    	; 0x23d4 <_ZN8SdVolume4initEP7Sd2Cardh+0x2c>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    249e:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <_ZN8SdVolume12cacheBuffer_E+0x16>
    24a2:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <_ZN8SdVolume12cacheBuffer_E+0x17>
    24a6:	21 15       	cp	r18, r1
    24a8:	31 05       	cpc	r19, r1
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <_ZN8SdVolume4initEP7Sd2Cardh+0x10a>
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	08 c0       	rjmp	.+16     	; 0x24c2 <_ZN8SdVolume4initEP7Sd2Cardh+0x11a>
    24b2:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <_ZN8SdVolume12cacheBuffer_E+0x24>
    24b6:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <_ZN8SdVolume12cacheBuffer_E+0x25>
    24ba:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <_ZN8SdVolume12cacheBuffer_E+0x26>
    24be:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <_ZN8SdVolume12cacheBuffer_E+0x27>
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    24ca:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_ZN8SdVolume12cacheBuffer_E+0xe>
    24ce:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <_ZN8SdVolume12cacheBuffer_E+0xf>
    24d2:	46 01       	movw	r8, r12
    24d4:	57 01       	movw	r10, r14
    24d6:	88 0e       	add	r8, r24
    24d8:	99 1e       	adc	r9, r25
    24da:	a1 1c       	adc	r10, r1
    24dc:	b1 1c       	adc	r11, r1
    24de:	8b 8a       	std	Y+19, r8	; 0x13
    24e0:	9c 8a       	std	Y+20, r9	; 0x14
    24e2:	ad 8a       	std	Y+21, r10	; 0x15
    24e4:	be 8a       	std	Y+22, r11	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    24e6:	00 91 ba 01 	lds	r16, 0x01BA	; 0x8001ba <_ZN8SdVolume12cacheBuffer_E+0x11>
    24ea:	10 91 bb 01 	lds	r17, 0x01BB	; 0x8001bb <_ZN8SdVolume12cacheBuffer_E+0x12>
    24ee:	19 8f       	std	Y+25, r17	; 0x19
    24f0:	08 8f       	std	Y+24, r16	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    24f2:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <_ZN8SdVolume12cacheBuffer_E+0x10>
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	0e 94 97 1c 	call	0x392e	; 0x392e <__muluhisi3>
    24fc:	86 0e       	add	r8, r22
    24fe:	97 1e       	adc	r9, r23
    2500:	a8 1e       	adc	r10, r24
    2502:	b9 1e       	adc	r11, r25
    2504:	8a 8e       	std	Y+26, r8	; 0x1a
    2506:	9b 8e       	std	Y+27, r9	; 0x1b
    2508:	ac 8e       	std	Y+28, r10	; 0x1c
    250a:	bd 8e       	std	Y+29, r11	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    250c:	85 e0       	ldi	r24, 0x05	; 5
    250e:	00 0f       	add	r16, r16
    2510:	11 1f       	adc	r17, r17
    2512:	8a 95       	dec	r24
    2514:	e1 f7       	brne	.-8      	; 0x250e <_ZN8SdVolume4initEP7Sd2Cardh+0x166>
    2516:	01 50       	subi	r16, 0x01	; 1
    2518:	1e 4f       	sbci	r17, 0xFE	; 254
    251a:	01 2f       	mov	r16, r17
    251c:	11 27       	eor	r17, r17
    251e:	06 95       	lsr	r16
    2520:	80 0e       	add	r8, r16
    2522:	91 1e       	adc	r9, r17
    2524:	a1 1c       	adc	r10, r1
    2526:	b1 1c       	adc	r11, r1
    2528:	8e 86       	std	Y+14, r8	; 0x0e
    252a:	9f 86       	std	Y+15, r9	; 0x0f
    252c:	a8 8a       	std	Y+16, r10	; 0x10
    252e:	b9 8a       	std	Y+17, r11	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    2530:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <_ZN8SdVolume12cacheBuffer_E+0x13>
    2534:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <_ZN8SdVolume12cacheBuffer_E+0x14>
    2538:	21 15       	cp	r18, r1
    253a:	31 05       	cpc	r19, r1
    253c:	21 f0       	breq	.+8      	; 0x2546 <_ZN8SdVolume4initEP7Sd2Cardh+0x19e>
    253e:	a9 01       	movw	r20, r18
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	08 c0       	rjmp	.+16     	; 0x2556 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ae>
    2546:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <_ZN8SdVolume12cacheBuffer_E+0x20>
    254a:	50 91 ca 01 	lds	r21, 0x01CA	; 0x8001ca <_ZN8SdVolume12cacheBuffer_E+0x21>
    254e:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <_ZN8SdVolume12cacheBuffer_E+0x22>
    2552:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <_ZN8SdVolume12cacheBuffer_E+0x23>
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    2556:	d7 01       	movw	r26, r14
    2558:	c6 01       	movw	r24, r12
    255a:	88 19       	sub	r24, r8
    255c:	99 09       	sbc	r25, r9
    255e:	aa 09       	sbc	r26, r10
    2560:	bb 09       	sbc	r27, r11
    2562:	84 0f       	add	r24, r20
    2564:	95 1f       	adc	r25, r21
    2566:	a6 1f       	adc	r26, r22
    2568:	b7 1f       	adc	r27, r23

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    256a:	04 c0       	rjmp	.+8      	; 0x2574 <_ZN8SdVolume4initEP7Sd2Cardh+0x1cc>
    256c:	b6 95       	lsr	r27
    256e:	a7 95       	ror	r26
    2570:	97 95       	ror	r25
    2572:	87 95       	ror	r24
    2574:	ea 95       	dec	r30
    2576:	d2 f7       	brpl	.-12     	; 0x256c <_ZN8SdVolume4initEP7Sd2Cardh+0x1c4>
    2578:	89 87       	std	Y+9, r24	; 0x09
    257a:	9a 87       	std	Y+10, r25	; 0x0a
    257c:	ab 87       	std	Y+11, r26	; 0x0b
    257e:	bc 87       	std	Y+12, r27	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    2580:	85 3f       	cpi	r24, 0xF5	; 245
    2582:	2f e0       	ldi	r18, 0x0F	; 15
    2584:	92 07       	cpc	r25, r18
    2586:	a1 05       	cpc	r26, r1
    2588:	b1 05       	cpc	r27, r1
    258a:	10 f4       	brcc	.+4      	; 0x2590 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
    fatType_ = 12;
    258c:	8c e0       	ldi	r24, 0x0C	; 12
    258e:	14 c0       	rjmp	.+40     	; 0x25b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else if (clusterCount_ < 65525) {
    2590:	85 3f       	cpi	r24, 0xF5	; 245
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	a1 05       	cpc	r26, r1
    2596:	b1 05       	cpc	r27, r1
    2598:	10 f4       	brcc	.+4      	; 0x259e <_ZN8SdVolume4initEP7Sd2Cardh+0x1f6>
    fatType_ = 16;
    259a:	80 e1       	ldi	r24, 0x10	; 16
    259c:	0d c0       	rjmp	.+26     	; 0x25b8 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    259e:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZN8SdVolume12cacheBuffer_E+0x2c>
    25a2:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <_ZN8SdVolume12cacheBuffer_E+0x2d>
    25a6:	a0 91 d7 01 	lds	r26, 0x01D7	; 0x8001d7 <_ZN8SdVolume12cacheBuffer_E+0x2e>
    25aa:	b0 91 d8 01 	lds	r27, 0x01D8	; 0x8001d8 <_ZN8SdVolume12cacheBuffer_E+0x2f>
    25ae:	8a 8f       	std	Y+26, r24	; 0x1a
    25b0:	9b 8f       	std	Y+27, r25	; 0x1b
    25b2:	ac 8f       	std	Y+28, r26	; 0x1c
    25b4:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    25b6:	80 e2       	ldi	r24, 0x20	; 32
    25b8:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    25ba:	81 e0       	ldi	r24, 0x01	; 1
}
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	df 90       	pop	r13
    25ca:	cf 90       	pop	r12
    25cc:	bf 90       	pop	r11
    25ce:	af 90       	pop	r10
    25d0:	9f 90       	pop	r9
    25d2:	8f 90       	pop	r8
    25d4:	08 95       	ret

000025d6 <_Z10UpdateLedsv>:
#define LPF_HEADER_LENGTH 32

// Periodic functions
void UpdateLeds(void) {
	// Release data available flag
	if (System_IsState(System_stateRunning))
    25d6:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	29 f4       	brne	.+10     	; 0x25e8 <_Z10UpdateLedsv+0x12>
	{
		Flag_Release(dataAvailableFlag);
    25de:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dataAvailableFlag>
    25e2:	81 50       	subi	r24, 0x01	; 1
    25e4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <dataAvailableFlag>
	}

	// Set update flag for Tlc library
	if (!Flag_HasFailedRelease(dataAvailableFlag))
    25e8:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dataAvailableFlag>
    25ec:	87 fd       	sbrc	r24, 7
    25ee:	03 c0       	rjmp	.+6      	; 0x25f6 <_Z10UpdateLedsv+0x20>
	__asm__ volatile ("" ::: "memory");
	Tlc5941_dcUpdateFlag = 1;
}
static inline void Tlc5941_SetGSUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_gsUpdateFlag = 1;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <Tlc5941_gsUpdateFlag>
    25f6:	08 95       	ret

000025f8 <_Z16UpdateStatusLedsv>:
		Tlc5941_SetGSUpdateFlag();
}

void UpdateStatusLeds(void) {
	switch (System_state)
    25f8:	e0 91 aa 03 	lds	r30, 0x03AA	; 0x8003aa <System_state>
    25fc:	8e 2f       	mov	r24, r30
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	88 30       	cpi	r24, 0x08	; 8
    2602:	91 05       	cpc	r25, r1
    2604:	c8 f5       	brcc	.+114    	; 0x2678 <_Z16UpdateStatusLedsv+0x80>
    2606:	fc 01       	movw	r30, r24
    2608:	ec 5c       	subi	r30, 0xCC	; 204
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	0c 94 91 1c 	jmp	0x3922	; 0x3922 <__tablejump2__>
	{
	case System_stateInitializing:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2610:	60 e0       	ldi	r22, 0x00	; 0
    2612:	83 e0       	ldi	r24, 0x03	; 3
    2614:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
    2618:	03 c0       	rjmp	.+6      	; 0x2620 <_Z16UpdateStatusLedsv+0x28>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_Off);
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateRunning:
		StatusLeds_Toggle(StatusLeds_LedOn);
    261a:	83 e0       	ldi	r24, 0x03	; 3
    261c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <StatusLeds_Toggle>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_Off);
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
    2628:	23 c0       	rjmp	.+70     	; 0x2670 <_Z16UpdateStatusLedsv+0x78>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateFinished:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    262a:	60 e0       	ldi	r22, 0x00	; 0
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_Off);
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <_Z16UpdateStatusLedsv+0x4c>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_On);
		break;
	case System_stateErrorNoSdCard:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	0b c0       	rjmp	.+22     	; 0x2650 <_Z16UpdateStatusLedsv+0x58>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateErrorNoSdFiles:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	83 e0       	ldi	r24, 0x03	; 3
    263e:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	84 e0       	ldi	r24, 0x04	; 4
    2646:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_On);
    264a:	61 e0       	ldi	r22, 0x01	; 1
    264c:	12 c0       	rjmp	.+36     	; 0x2672 <_Z16UpdateStatusLedsv+0x7a>
		break;
	case System_stateErrorWrongSdFiles:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_On);
    264e:	61 e0       	ldi	r22, 0x01	; 1
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
		StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
    2656:	61 e0       	ldi	r22, 0x01	; 1
    2658:	e4 cf       	rjmp	.-56     	; 0x2622 <_Z16UpdateStatusLedsv+0x2a>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateErrorTimeout:
		StatusLeds_Toggle(StatusLeds_LedOn);
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <StatusLeds_Toggle>
    2660:	04 c0       	rjmp	.+8      	; 0x266a <_Z16UpdateStatusLedsv+0x72>
		StatusLeds_Toggle(StatusLeds_LedErr);
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
		break;
	case System_stateErrorLpfUnavailable:
		StatusLeds_Set(StatusLeds_LedOn, StatusLeds_Off);
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
		StatusLeds_Toggle(StatusLeds_LedErr);
    266a:	84 e0       	ldi	r24, 0x04	; 4
    266c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <StatusLeds_Toggle>
		StatusLeds_Set(StatusLeds_LedFin, StatusLeds_Off);
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	85 e0       	ldi	r24, 0x05	; 5
    2674:	0c 94 b2 17 	jmp	0x2f64	; 0x2f64 <StatusLeds_Set>
    2678:	08 95       	ret

0000267a <_Z11timer0_initv>:
	#ifndef sbi
	#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
	#endif
	
	// Timer mode: fast PWM
	sbi(TCCR0A, WGM01);
    267a:	84 b5       	in	r24, 0x24	; 36
    267c:	82 60       	ori	r24, 0x02	; 2
    267e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2680:	84 b5       	in	r24, 0x24	; 36
    2682:	81 60       	ori	r24, 0x01	; 1
    2684:	84 bd       	out	0x24, r24	; 36

	// set timer 0 prescale factor to 64
	sbi(TCCR0B, CS01);
    2686:	85 b5       	in	r24, 0x25	; 37
    2688:	82 60       	ori	r24, 0x02	; 2
    268a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    268c:	85 b5       	in	r24, 0x25	; 37
    268e:	81 60       	ori	r24, 0x01	; 1
    2690:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
	sbi(TIMSK0, TOIE0);
    2692:	ee e6       	ldi	r30, 0x6E	; 110
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	81 60       	ori	r24, 0x01	; 1
    269a:	80 83       	st	Z, r24
    269c:	08 95       	ret

0000269e <_Z13parseTextFile4FilePhm>:
}

// This function parses a list of uint8 from a text file. It returns 1 if exactly
// n_output numbers were extracted from the file and stored in output[], and 0
// otherwise.
uint8_t parseTextFile(File file, uint8_t output[], uint32_t n_output) {
    269e:	3f 92       	push	r3
    26a0:	4f 92       	push	r4
    26a2:	5f 92       	push	r5
    26a4:	6f 92       	push	r6
    26a6:	7f 92       	push	r7
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	e4 97       	sbiw	r28, 0x34	; 52
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	8c 01       	movw	r16, r24
    26d2:	29 01       	movw	r4, r18
    26d4:	3a 01       	movw	r6, r20
    26d6:	4b 01       	movw	r8, r22
	// Index for the output array
	uint32_t output_i = 0;
    26d8:	c1 2c       	mov	r12, r1
    26da:	d1 2c       	mov	r13, r1
    26dc:	76 01       	movw	r14, r12
	char * charBufferPtr;
	// Temporary container for the converted integer
	uint16_t tempVal;

	// Read characters until the end of the file is found
	while (file.available()) {
    26de:	c8 01       	movw	r24, r16
    26e0:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN4File9availableEv>
    26e4:	89 2b       	or	r24, r25
    26e6:	51 f1       	breq	.+84     	; 0x273c <_Z13parseTextFile4FilePhm+0x9e>
		charBuffer[0] = file.read();
    26e8:	c8 01       	movw	r24, r16
    26ea:	0e 94 38 01 	call	0x270	; 0x270 <_ZN4File4readEv>
    26ee:	89 83       	std	Y+1, r24	; 0x01
		// Only process if current character is not space
		if (!isspace(charBuffer[0])) {
    26f0:	99 27       	eor	r25, r25
    26f2:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <isspace>
    26f6:	89 2b       	or	r24, r25
    26f8:	91 f7       	brne	.-28     	; 0x26de <_Z13parseTextFile4FilePhm+0x40>
			// If we already finished with the output array, return with error
			if (output_i == n_output) {
    26fa:	c4 14       	cp	r12, r4
    26fc:	d5 04       	cpc	r13, r5
    26fe:	e6 04       	cpc	r14, r6
    2700:	f7 04       	cpc	r15, r7
    2702:	11 f1       	breq	.+68     	; 0x2748 <_Z13parseTextFile4FilePhm+0xaa>
    2704:	ce 01       	movw	r24, r28
    2706:	02 96       	adiw	r24, 0x02	; 2
    2708:	5c 01       	movw	r10, r24
    270a:	33 24       	eor	r3, r3
    270c:	33 94       	inc	r3
				return 0;
			}
			
			// Fill buffer until a space or EOF are found.
			charBuffer_i = 1;
			while(file.available() && !isspace(file.peek()) && (charBuffer_i < charBuffer_length - 1)) {
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN4File9availableEv>
    2714:	89 2b       	or	r24, r25
    2716:	d1 f0       	breq	.+52     	; 0x274c <_Z13parseTextFile4FilePhm+0xae>
    2718:	c8 01       	movw	r24, r16
    271a:	0e 94 42 01 	call	0x284	; 0x284 <_ZN4File4peekEv>
    271e:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <isspace>
    2722:	89 2b       	or	r24, r25
    2724:	99 f4       	brne	.+38     	; 0x274c <_Z13parseTextFile4FilePhm+0xae>
    2726:	f1 e3       	ldi	r31, 0x31	; 49
    2728:	3f 16       	cp	r3, r31
    272a:	81 f0       	breq	.+32     	; 0x274c <_Z13parseTextFile4FilePhm+0xae>
				charBuffer[charBuffer_i] = file.read();
    272c:	c8 01       	movw	r24, r16
    272e:	0e 94 38 01 	call	0x270	; 0x270 <_ZN4File4readEv>
    2732:	f5 01       	movw	r30, r10
    2734:	81 93       	st	Z+, r24
    2736:	5f 01       	movw	r10, r30
				charBuffer_i++;
    2738:	33 94       	inc	r3
    273a:	e9 cf       	rjmp	.-46     	; 0x270e <_Z13parseTextFile4FilePhm+0x70>
			output_i++;
		}
	}
	
	// Check that we filled the array, return with error otherwise
	if (output_i == n_output) {
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	c4 14       	cp	r12, r4
    2740:	d5 04       	cpc	r13, r5
    2742:	e6 04       	cpc	r14, r6
    2744:	f7 04       	cpc	r15, r7
    2746:	91 f1       	breq	.+100    	; 0x27ac <_Z13parseTextFile4FilePhm+0x10e>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	30 c0       	rjmp	.+96     	; 0x27ac <_Z13parseTextFile4FilePhm+0x10e>
			while(file.available() && !isspace(file.peek()) && (charBuffer_i < charBuffer_length - 1)) {
				charBuffer[charBuffer_i] = file.read();
				charBuffer_i++;
			}
			// Return with error if the buffer overflows
			if (file.available() && !isspace(file.peek())){
    274c:	c8 01       	movw	r24, r16
    274e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN4File9availableEv>
    2752:	89 2b       	or	r24, r25
    2754:	39 f0       	breq	.+14     	; 0x2764 <_Z13parseTextFile4FilePhm+0xc6>
    2756:	c8 01       	movw	r24, r16
    2758:	0e 94 42 01 	call	0x284	; 0x284 <_ZN4File4peekEv>
    275c:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <isspace>
    2760:	89 2b       	or	r24, r25
    2762:	91 f3       	breq	.-28     	; 0x2748 <_Z13parseTextFile4FilePhm+0xaa>
				return 0;
			}
			// Add end of string character
			charBuffer[charBuffer_i] = '\0';
    2764:	aa 24       	eor	r10, r10
    2766:	a3 94       	inc	r10
    2768:	b1 2c       	mov	r11, r1
    276a:	ac 0e       	add	r10, r28
    276c:	bd 1e       	adc	r11, r29
    276e:	a3 0c       	add	r10, r3
    2770:	b1 1c       	adc	r11, r1
    2772:	f5 01       	movw	r30, r10
    2774:	10 82       	st	Z, r1
			
			// Attempt to convert to integer, return with error if failed
			// If the end pointer set by strtoul points to the end of the string, the
			// entire string is valid.
			// We also consider the value invalid if it cannot be cast to uint8_t
			tempVal = strtoul(charBuffer, &charBufferPtr, 0);
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	be 01       	movw	r22, r28
    277c:	6d 5c       	subi	r22, 0xCD	; 205
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	ce 01       	movw	r24, r28
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	0e 94 de 1d 	call	0x3bbc	; 0x3bbc <strtoul>
			if (charBufferPtr != (charBuffer + charBuffer_i) || tempVal > 255) {
    2788:	2b a9       	ldd	r18, Y+51	; 0x33
    278a:	3c a9       	ldd	r19, Y+52	; 0x34
    278c:	2a 15       	cp	r18, r10
    278e:	3b 05       	cpc	r19, r11
    2790:	d9 f6       	brne	.-74     	; 0x2748 <_Z13parseTextFile4FilePhm+0xaa>
    2792:	6f 3f       	cpi	r22, 0xFF	; 255
    2794:	71 05       	cpc	r23, r1
    2796:	09 f0       	breq	.+2      	; 0x279a <_Z13parseTextFile4FilePhm+0xfc>
    2798:	b8 f6       	brcc	.-82     	; 0x2748 <_Z13parseTextFile4FilePhm+0xaa>
				return 0;
			}
			// Store in output array
			output[output_i] = tempVal;
    279a:	f4 01       	movw	r30, r8
    279c:	61 93       	st	Z+, r22
    279e:	4f 01       	movw	r8, r30
			output_i++;
    27a0:	ff ef       	ldi	r31, 0xFF	; 255
    27a2:	cf 1a       	sub	r12, r31
    27a4:	df 0a       	sbc	r13, r31
    27a6:	ef 0a       	sbc	r14, r31
    27a8:	ff 0a       	sbc	r15, r31
    27aa:	99 cf       	rjmp	.-206    	; 0x26de <_Z13parseTextFile4FilePhm+0x40>
		return 1;
	}
	else {
		return 0;
	}
}
    27ac:	e4 96       	adiw	r28, 0x34	; 52
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	df 91       	pop	r29
    27ba:	cf 91       	pop	r28
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	ff 90       	pop	r15
    27c2:	ef 90       	pop	r14
    27c4:	df 90       	pop	r13
    27c6:	cf 90       	pop	r12
    27c8:	bf 90       	pop	r11
    27ca:	af 90       	pop	r10
    27cc:	9f 90       	pop	r9
    27ce:	8f 90       	pop	r8
    27d0:	7f 90       	pop	r7
    27d2:	6f 90       	pop	r6
    27d4:	5f 90       	pop	r5
    27d6:	4f 90       	pop	r4
    27d8:	3f 90       	pop	r3
    27da:	08 95       	ret

000027dc <main>:

int main(void) {
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	c0 57       	subi	r28, 0x70	; 112
    27e6:	d1 09       	sbc	r29, r1
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
	// Dot correction file
	File dcFile;
    27f2:	ce 01       	movw	r24, r28
    27f4:	8e 5a       	subi	r24, 0xAE	; 174
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN4FileC1Ev>
	// Calibration file
	File gcalFile;
    27fc:	ce 01       	movw	r24, r28
    27fe:	c7 96       	adiw	r24, 0x37	; 55
    2800:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN4FileC1Ev>
	// Light program file
	File lpfFile;
    2804:	ce 01       	movw	r24, r28
    2806:	4c 96       	adiw	r24, 0x1c	; 28
    2808:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN4FileC1Ev>
	// Information holder for the lpf
	lpfInfo_t lpfInfo;
	// Temporary value for reading from the lpf
	uint32_t temp = 0;
    280c:	e1 96       	adiw	r28, 0x31	; 49
    280e:	1c ae       	std	Y+60, r1	; 0x3c
    2810:	1d ae       	std	Y+61, r1	; 0x3d
    2812:	1e ae       	std	Y+62, r1	; 0x3e
    2814:	1f ae       	std	Y+63, r1	; 0x3f
    2816:	e1 97       	sbiw	r28, 0x31	; 49
	// Flag that indicates whether the first frame has been loaded
	uint8_t first_frame = 0;

	// Enable interruptions
	sei();
    2818:	78 94       	sei
	
	// Initialize TLC module
	Tlc5941_Init();
    281a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <Tlc5941_Init>
	// Set all dot correction values to zero
	Tlc5941_SetAllDC(0);
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	0e 94 3d 18 	call	0x307a	; 0x307a <Tlc5941_SetAllDC>
extern volatile uint8_t Tlc5941_gsUpdateFlag;

// Safely sets update flags
static inline void Tlc5941_SetDCUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_dcUpdateFlag = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <Tlc5941_dcUpdateFlag>
	// Push DC values
	Tlc5941_SetDCUpdateFlag();
	while(Tlc5941_dcUpdateFlag);
    282a:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <Tlc5941_dcUpdateFlag>
    282e:	81 11       	cpse	r24, r1
    2830:	fc cf       	rjmp	.-8      	; 0x282a <main+0x4e>
	// Set all grayscale values to zero
	Tlc5941_SetAllGS(0);
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <Tlc5941_SetAllGS>
}
static inline void Tlc5941_SetGSUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_gsUpdateFlag = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	80 93 f0 04 	sts	0x04F0, r24	; 0x8004f0 <Tlc5941_gsUpdateFlag>
	// Push grayscale values
	Tlc5941_SetGSUpdateFlag();
	while(Tlc5941_gsUpdateFlag);
    2840:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <Tlc5941_gsUpdateFlag>
    2844:	81 11       	cpse	r24, r1
    2846:	fc cf       	rjmp	.-8      	; 0x2840 <main+0x64>

	// Signal that the first set of grayscale values should be used during the first iteration
	Flag_Set(dataAvailableFlag);
    2848:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dataAvailableFlag>
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <dataAvailableFlag>
	
	// Initialize Status LEDs
	StatusLeds_Init();
    2852:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <StatusLeds_Init>
	// Turn on all LEDs
	StatusLeds_Set(StatusLeds_LedOn, StatusLeds_On);
    2856:	61 e0       	ldi	r22, 0x01	; 1
    2858:	83 e0       	ldi	r24, 0x03	; 3
    285a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
	StatusLeds_Set(StatusLeds_LedErr, StatusLeds_On);
    285e:	61 e0       	ldi	r22, 0x01	; 1
    2860:	84 e0       	ldi	r24, 0x04	; 4
    2862:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
	StatusLeds_Set(StatusLeds_LedFin, StatusLeds_On);
    2866:	61 e0       	ldi	r22, 0x01	; 1
    2868:	85 e0       	ldi	r24, 0x05	; 5
    286a:	0e 94 b2 17 	call	0x2f64	; 0x2f64 <StatusLeds_Set>
	
	// Initialize ms timer
	MsTimer_Init();
    286e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <MsTimer_Init>

	// Initialize timer 0 before using the SD card library
	timer0_init();
    2872:	0e 94 3d 13 	call	0x267a	; 0x267a <_Z11timer0_initv>
	// Initialize system state
	System_SetState(System_stateInitializing);
    2876:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <System_state>
	
	// Test if SD card is present and initialize
	if (!SD.begin())
    287a:	6a e0       	ldi	r22, 0x0A	; 10
    287c:	84 e5       	ldi	r24, 0x54	; 84
    287e:	91 e0       	ldi	r25, 0x01	; 1
    2880:	0e 94 2f 02 	call	0x45e	; 0x45e <_ZN7SDClass5beginEh>
    2884:	81 11       	cpse	r24, r1
    2886:	03 c0       	rjmp	.+6      	; 0x288e <main+0xb2>
	{
		System_SetState(System_stateErrorNoSdCard);
    2888:	83 e0       	ldi	r24, 0x03	; 3
    288a:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
	}

	// Process dot correction file
	if (System_IsState(System_stateInitializing)) {
    288e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2892:	81 11       	cpse	r24, r1
    2894:	85 c0       	rjmp	.+266    	; 0x29a0 <main+0x1c4>
		dcFile = SD.open("dc.txt", FILE_READ);
    2896:	21 e0       	ldi	r18, 0x01	; 1
    2898:	44 e2       	ldi	r20, 0x24	; 36
    289a:	51 e0       	ldi	r21, 0x01	; 1
    289c:	64 e5       	ldi	r22, 0x54	; 84
    289e:	71 e0       	ldi	r23, 0x01	; 1
    28a0:	ce 01       	movw	r24, r28
    28a2:	01 96       	adiw	r24, 0x01	; 1
    28a4:	0e 94 42 03 	call	0x684	; 0x684 <_ZN7SDClass4openEPKch>
#define DEC 10
#define HEX 16
#define OCT 8
#define BIN 2

class Print
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	9c 81       	ldd	r25, Y+4	; 0x04
    28ac:	66 96       	adiw	r28, 0x16	; 22
    28ae:	9f af       	std	Y+63, r25	; 0x3f
    28b0:	8e af       	std	Y+62, r24	; 0x3e
    28b2:	66 97       	sbiw	r28, 0x16	; 22
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
    28b4:	8d 81       	ldd	r24, Y+5	; 0x05
    28b6:	9e 81       	ldd	r25, Y+6	; 0x06
    28b8:	af 81       	ldd	r26, Y+7	; 0x07
    28ba:	b8 85       	ldd	r27, Y+8	; 0x08
    28bc:	6a 96       	adiw	r28, 0x1a	; 26
    28be:	8c af       	std	Y+60, r24	; 0x3c
    28c0:	9d af       	std	Y+61, r25	; 0x3d
    28c2:	ae af       	std	Y+62, r26	; 0x3e
    28c4:	bf af       	std	Y+63, r27	; 0x3f
    28c6:	6a 97       	sbiw	r28, 0x1a	; 26
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	ab 85       	ldd	r26, Y+11	; 0x0b
    28ce:	bc 85       	ldd	r27, Y+12	; 0x0c
    28d0:	6e 96       	adiw	r28, 0x1e	; 30
    28d2:	8c af       	std	Y+60, r24	; 0x3c
    28d4:	9d af       	std	Y+61, r25	; 0x3d
    28d6:	ae af       	std	Y+62, r26	; 0x3e
    28d8:	bf af       	std	Y+63, r27	; 0x3f
    28da:	6e 97       	sbiw	r28, 0x1e	; 30
#include <utility/SdFatUtil.h>

#define FILE_READ O_READ
#define FILE_WRITE (O_READ | O_WRITE | O_CREAT)

class File : public Stream {
    28dc:	8d e0       	ldi	r24, 0x0D	; 13
    28de:	fe 01       	movw	r30, r28
    28e0:	3d 96       	adiw	r30, 0x0d	; 13
    28e2:	a2 e5       	ldi	r26, 0x52	; 82
    28e4:	b0 e0       	ldi	r27, 0x00	; 0
    28e6:	ac 0f       	add	r26, r28
    28e8:	bd 1f       	adc	r27, r29
    28ea:	1c 96       	adiw	r26, 0x0c	; 12
    28ec:	01 90       	ld	r0, Z+
    28ee:	0d 92       	st	X+, r0
    28f0:	8a 95       	dec	r24
    28f2:	e1 f7       	brne	.-8      	; 0x28ec <main+0x110>
    28f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28f8:	ad 96       	adiw	r28, 0x2d	; 45
    28fa:	9f af       	std	Y+63, r25	; 0x3f
    28fc:	8e af       	std	Y+62, r24	; 0x3e
    28fe:	ad 97       	sbiw	r28, 0x2d	; 45
		if (dcFile) {
    2900:	ce 01       	movw	r24, r28
    2902:	8e 5a       	subi	r24, 0xAE	; 174
    2904:	9f 4f       	sbci	r25, 0xFF	; 255
    2906:	0e 94 22 02 	call	0x444	; 0x444 <_ZN4FilecvbEv>
    290a:	88 23       	and	r24, r24
    290c:	09 f4       	brne	.+2      	; 0x2910 <main+0x134>
    290e:	45 c0       	rjmp	.+138    	; 0x299a <main+0x1be>
    2910:	66 96       	adiw	r28, 0x16	; 22
    2912:	8e ad       	ldd	r24, Y+62	; 0x3e
    2914:	9f ad       	ldd	r25, Y+63	; 0x3f
    2916:	66 97       	sbiw	r28, 0x16	; 22
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	6a 96       	adiw	r28, 0x1a	; 26
    291e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2920:	9d ad       	ldd	r25, Y+61	; 0x3d
    2922:	ae ad       	ldd	r26, Y+62	; 0x3e
    2924:	bf ad       	ldd	r27, Y+63	; 0x3f
    2926:	6a 97       	sbiw	r28, 0x1a	; 26
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	af 83       	std	Y+7, r26	; 0x07
    292e:	b8 87       	std	Y+8, r27	; 0x08
    2930:	6e 96       	adiw	r28, 0x1e	; 30
    2932:	8c ad       	ldd	r24, Y+60	; 0x3c
    2934:	9d ad       	ldd	r25, Y+61	; 0x3d
    2936:	ae ad       	ldd	r26, Y+62	; 0x3e
    2938:	bf ad       	ldd	r27, Y+63	; 0x3f
    293a:	6e 97       	sbiw	r28, 0x1e	; 30
    293c:	89 87       	std	Y+9, r24	; 0x09
    293e:	9a 87       	std	Y+10, r25	; 0x0a
    2940:	ab 87       	std	Y+11, r26	; 0x0b
    2942:	bc 87       	std	Y+12, r27	; 0x0c
    2944:	8e e0       	ldi	r24, 0x0E	; 14
    2946:	91 e0       	ldi	r25, 0x01	; 1
    2948:	9a 83       	std	Y+2, r25	; 0x02
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	8d e0       	ldi	r24, 0x0D	; 13
    294e:	e2 e5       	ldi	r30, 0x52	; 82
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	ec 0f       	add	r30, r28
    2954:	fd 1f       	adc	r31, r29
    2956:	3c 96       	adiw	r30, 0x0c	; 12
    2958:	de 01       	movw	r26, r28
    295a:	1d 96       	adiw	r26, 0x0d	; 13
    295c:	01 90       	ld	r0, Z+
    295e:	0d 92       	st	X+, r0
    2960:	8a 95       	dec	r24
    2962:	e1 f7       	brne	.-8      	; 0x295c <main+0x180>
    2964:	ad 96       	adiw	r28, 0x2d	; 45
    2966:	8e ad       	ldd	r24, Y+62	; 0x3e
    2968:	9f ad       	ldd	r25, Y+63	; 0x3f
    296a:	ad 97       	sbiw	r28, 0x2d	; 45
    296c:	9b 8f       	std	Y+27, r25	; 0x1b
    296e:	8a 8f       	std	Y+26, r24	; 0x1a
			// Try to parse file contents, change to error state if unsuccessful
			if (!parseTextFile(dcFile, dotCorrectionValues, Tlc5941_numChannels)) {
    2970:	20 e3       	ldi	r18, 0x30	; 48
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e0       	ldi	r20, 0x00	; 0
    2976:	50 e0       	ldi	r21, 0x00	; 0
    2978:	6b ed       	ldi	r22, 0xDB	; 219
    297a:	73 e0       	ldi	r23, 0x03	; 3
    297c:	ce 01       	movw	r24, r28
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	0e 94 4f 13 	call	0x269e	; 0x269e <_Z13parseTextFile4FilePhm>
    2984:	81 11       	cpse	r24, r1
    2986:	03 c0       	rjmp	.+6      	; 0x298e <main+0x1b2>
				System_SetState(System_stateErrorWrongSdFiles);
    2988:	85 e0       	ldi	r24, 0x05	; 5
    298a:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
			}
			dcFile.close();
    298e:	ce 01       	movw	r24, r28
    2990:	8e 5a       	subi	r24, 0xAE	; 174
    2992:	9f 4f       	sbci	r25, 0xFF	; 255
    2994:	0e 94 10 02 	call	0x420	; 0x420 <_ZN4File5closeEv>
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <main+0x1c4>
		}
		else {
			System_SetState(System_stateErrorNoSdFiles);
    299a:	84 e0       	ldi	r24, 0x04	; 4
    299c:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
		}
	}
	// Set dot correction values
	if (System_IsState(System_stateInitializing)) {
    29a0:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    29a4:	88 23       	and	r24, r24
    29a6:	29 f0       	breq	.+10     	; 0x29b2 <main+0x1d6>
		Tlc5941_SetDCUpdateFlag();
		while(Tlc5941_dcUpdateFlag);
	}

	// Process calibration file
	if (System_IsState(System_stateInitializing)) {
    29a8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    29ac:	81 11       	cpse	r24, r1
    29ae:	94 c0       	rjmp	.+296    	; 0x2ad8 <main+0x2fc>
    29b0:	1d c0       	rjmp	.+58     	; 0x29ec <main+0x210>
    29b2:	f8 e8       	ldi	r31, 0x88	; 136
    29b4:	ef 2e       	mov	r14, r31
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	ff 2e       	mov	r15, r31
		else {
			System_SetState(System_stateErrorNoSdFiles);
		}
	}
	// Set dot correction values
	if (System_IsState(System_stateInitializing)) {
    29ba:	0b ed       	ldi	r16, 0xDB	; 219
    29bc:	13 e0       	ldi	r17, 0x03	; 3
    29be:	a0 e3       	ldi	r26, 0x30	; 48
    29c0:	da 2e       	mov	r13, r26
    29c2:	d0 0e       	add	r13, r16
		// Set from dotCorrectionValues array
		for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
		{
			Tlc5941_channel_t well = pgm_read_byte(&(well2channel[i]));
    29c4:	f7 01       	movw	r30, r14
    29c6:	84 91       	lpm	r24, Z
			Tlc5941_SetDC(well, dotCorrectionValues[i]);
    29c8:	f8 01       	movw	r30, r16
    29ca:	61 91       	ld	r22, Z+
    29cc:	8f 01       	movw	r16, r30
    29ce:	0e 94 5d 18 	call	0x30ba	; 0x30ba <Tlc5941_SetDC>
    29d2:	ff ef       	ldi	r31, 0xFF	; 255
    29d4:	ef 1a       	sub	r14, r31
    29d6:	ff 0a       	sbc	r15, r31
		}
	}
	// Set dot correction values
	if (System_IsState(System_stateInitializing)) {
		// Set from dotCorrectionValues array
		for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
    29d8:	d0 12       	cpse	r13, r16
    29da:	f4 cf       	rjmp	.-24     	; 0x29c4 <main+0x1e8>
extern volatile uint8_t Tlc5941_gsUpdateFlag;

// Safely sets update flags
static inline void Tlc5941_SetDCUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_dcUpdateFlag = 1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	80 93 ef 04 	sts	0x04EF, r24	; 0x8004ef <Tlc5941_dcUpdateFlag>
			Tlc5941_channel_t well = pgm_read_byte(&(well2channel[i]));
			Tlc5941_SetDC(well, dotCorrectionValues[i]);
		}
		// Push DC values
		Tlc5941_SetDCUpdateFlag();
		while(Tlc5941_dcUpdateFlag);
    29e2:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <Tlc5941_dcUpdateFlag>
    29e6:	81 11       	cpse	r24, r1
    29e8:	fc cf       	rjmp	.-8      	; 0x29e2 <main+0x206>
    29ea:	de cf       	rjmp	.-68     	; 0x29a8 <main+0x1cc>
	}

	// Process calibration file
	if (System_IsState(System_stateInitializing)) {
		gcalFile = SD.open("gcal.txt", FILE_READ);
    29ec:	21 e0       	ldi	r18, 0x01	; 1
    29ee:	4b e2       	ldi	r20, 0x2B	; 43
    29f0:	51 e0       	ldi	r21, 0x01	; 1
    29f2:	64 e5       	ldi	r22, 0x54	; 84
    29f4:	71 e0       	ldi	r23, 0x01	; 1
    29f6:	ce 01       	movw	r24, r28
    29f8:	01 96       	adiw	r24, 0x01	; 1
    29fa:	0e 94 42 03 	call	0x684	; 0x684 <_ZN7SDClass4openEPKch>
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	9a af       	std	Y+58, r25	; 0x3a
    2a04:	89 af       	std	Y+57, r24	; 0x39
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	af 81       	ldd	r26, Y+7	; 0x07
    2a0c:	b8 85       	ldd	r27, Y+8	; 0x08
    2a0e:	8b af       	std	Y+59, r24	; 0x3b
    2a10:	9c af       	std	Y+60, r25	; 0x3c
    2a12:	ad af       	std	Y+61, r26	; 0x3d
    2a14:	be af       	std	Y+62, r27	; 0x3e
    2a16:	89 85       	ldd	r24, Y+9	; 0x09
    2a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a1a:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a1c:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a1e:	23 96       	adiw	r28, 0x03	; 3
    2a20:	8c af       	std	Y+60, r24	; 0x3c
    2a22:	9d af       	std	Y+61, r25	; 0x3d
    2a24:	ae af       	std	Y+62, r26	; 0x3e
    2a26:	bf af       	std	Y+63, r27	; 0x3f
    2a28:	23 97       	sbiw	r28, 0x03	; 3
    2a2a:	8d e0       	ldi	r24, 0x0D	; 13
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	3d 96       	adiw	r30, 0x0d	; 13
    2a30:	de 01       	movw	r26, r28
    2a32:	ad 5b       	subi	r26, 0xBD	; 189
    2a34:	bf 4f       	sbci	r27, 0xFF	; 255
    2a36:	01 90       	ld	r0, Z+
    2a38:	0d 92       	st	X+, r0
    2a3a:	8a 95       	dec	r24
    2a3c:	e1 f7       	brne	.-8      	; 0x2a36 <main+0x25a>
    2a3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a42:	62 96       	adiw	r28, 0x12	; 18
    2a44:	9f af       	std	Y+63, r25	; 0x3f
    2a46:	8e af       	std	Y+62, r24	; 0x3e
    2a48:	62 97       	sbiw	r28, 0x12	; 18
		if (gcalFile) {
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	c7 96       	adiw	r24, 0x37	; 55
    2a4e:	0e 94 22 02 	call	0x444	; 0x444 <_ZN4FilecvbEv>
    2a52:	88 23       	and	r24, r24
    2a54:	f1 f1       	breq	.+124    	; 0x2ad2 <main+0x2f6>
    2a56:	89 ad       	ldd	r24, Y+57	; 0x39
    2a58:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a5a:	9c 83       	std	Y+4, r25	; 0x04
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a60:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a62:	ad ad       	ldd	r26, Y+61	; 0x3d
    2a64:	be ad       	ldd	r27, Y+62	; 0x3e
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	af 83       	std	Y+7, r26	; 0x07
    2a6c:	b8 87       	std	Y+8, r27	; 0x08
    2a6e:	23 96       	adiw	r28, 0x03	; 3
    2a70:	8c ad       	ldd	r24, Y+60	; 0x3c
    2a72:	9d ad       	ldd	r25, Y+61	; 0x3d
    2a74:	ae ad       	ldd	r26, Y+62	; 0x3e
    2a76:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a78:	23 97       	sbiw	r28, 0x03	; 3
    2a7a:	89 87       	std	Y+9, r24	; 0x09
    2a7c:	9a 87       	std	Y+10, r25	; 0x0a
    2a7e:	ab 87       	std	Y+11, r26	; 0x0b
    2a80:	bc 87       	std	Y+12, r27	; 0x0c
    2a82:	8e e0       	ldi	r24, 0x0E	; 14
    2a84:	91 e0       	ldi	r25, 0x01	; 1
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	8d e0       	ldi	r24, 0x0D	; 13
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	ed 5b       	subi	r30, 0xBD	; 189
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	de 01       	movw	r26, r28
    2a94:	1d 96       	adiw	r26, 0x0d	; 13
    2a96:	01 90       	ld	r0, Z+
    2a98:	0d 92       	st	X+, r0
    2a9a:	8a 95       	dec	r24
    2a9c:	e1 f7       	brne	.-8      	; 0x2a96 <main+0x2ba>
    2a9e:	62 96       	adiw	r28, 0x12	; 18
    2aa0:	8e ad       	ldd	r24, Y+62	; 0x3e
    2aa2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2aa4:	62 97       	sbiw	r28, 0x12	; 18
    2aa6:	9b 8f       	std	Y+27, r25	; 0x1b
    2aa8:	8a 8f       	std	Y+26, r24	; 0x1a
			// Try to parse file contents, change to error state if unsuccessful
			if (!parseTextFile(gcalFile, grayscaleCalibration, Tlc5941_numChannels)) {
    2aaa:	20 e3       	ldi	r18, 0x30	; 48
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	50 e0       	ldi	r21, 0x00	; 0
    2ab2:	6b ea       	ldi	r22, 0xAB	; 171
    2ab4:	73 e0       	ldi	r23, 0x03	; 3
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	0e 94 4f 13 	call	0x269e	; 0x269e <_Z13parseTextFile4FilePhm>
    2abe:	81 11       	cpse	r24, r1
    2ac0:	03 c0       	rjmp	.+6      	; 0x2ac8 <main+0x2ec>
				System_SetState(System_stateErrorWrongSdFiles);
    2ac2:	85 e0       	ldi	r24, 0x05	; 5
    2ac4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
			}
			gcalFile.close();
    2ac8:	ce 01       	movw	r24, r28
    2aca:	c7 96       	adiw	r24, 0x37	; 55
    2acc:	0e 94 10 02 	call	0x420	; 0x420 <_ZN4File5closeEv>
    2ad0:	03 c0       	rjmp	.+6      	; 0x2ad8 <main+0x2fc>
		}
		else {
			System_SetState(System_stateErrorNoSdFiles);
    2ad2:	84 e0       	ldi	r24, 0x04	; 4
    2ad4:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
		}
	}

	// Load LPF
	if (System_IsState(System_stateInitializing))
    2ad8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2adc:	81 11       	cpse	r24, r1
    2ade:	33 c0       	rjmp	.+102    	; 0x2b46 <main+0x36a>
	{
		lpfFile = SD.open("program.lpf", FILE_READ);
    2ae0:	21 e0       	ldi	r18, 0x01	; 1
    2ae2:	44 e3       	ldi	r20, 0x34	; 52
    2ae4:	51 e0       	ldi	r21, 0x01	; 1
    2ae6:	64 e5       	ldi	r22, 0x54	; 84
    2ae8:	71 e0       	ldi	r23, 0x01	; 1
    2aea:	ce 01       	movw	r24, r28
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	0e 94 42 03 	call	0x684	; 0x684 <_ZN7SDClass4openEPKch>
    2af2:	8b 81       	ldd	r24, Y+3	; 0x03
    2af4:	9c 81       	ldd	r25, Y+4	; 0x04
    2af6:	9f 8f       	std	Y+31, r25	; 0x1f
    2af8:	8e 8f       	std	Y+30, r24	; 0x1e
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	af 81       	ldd	r26, Y+7	; 0x07
    2b00:	b8 85       	ldd	r27, Y+8	; 0x08
    2b02:	88 a3       	std	Y+32, r24	; 0x20
    2b04:	99 a3       	std	Y+33, r25	; 0x21
    2b06:	aa a3       	std	Y+34, r26	; 0x22
    2b08:	bb a3       	std	Y+35, r27	; 0x23
    2b0a:	89 85       	ldd	r24, Y+9	; 0x09
    2b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2b10:	bc 85       	ldd	r27, Y+12	; 0x0c
    2b12:	8c a3       	std	Y+36, r24	; 0x24
    2b14:	9d a3       	std	Y+37, r25	; 0x25
    2b16:	ae a3       	std	Y+38, r26	; 0x26
    2b18:	bf a3       	std	Y+39, r27	; 0x27
    2b1a:	8d e0       	ldi	r24, 0x0D	; 13
    2b1c:	fe 01       	movw	r30, r28
    2b1e:	3d 96       	adiw	r30, 0x0d	; 13
    2b20:	de 01       	movw	r26, r28
    2b22:	98 96       	adiw	r26, 0x28	; 40
    2b24:	01 90       	ld	r0, Z+
    2b26:	0d 92       	st	X+, r0
    2b28:	8a 95       	dec	r24
    2b2a:	e1 f7       	brne	.-8      	; 0x2b24 <main+0x348>
    2b2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b2e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b30:	9e ab       	std	Y+54, r25	; 0x36
    2b32:	8d ab       	std	Y+53, r24	; 0x35
		if (!lpfFile) {
    2b34:	ce 01       	movw	r24, r28
    2b36:	4c 96       	adiw	r24, 0x1c	; 28
    2b38:	0e 94 22 02 	call	0x444	; 0x444 <_ZN4FilecvbEv>
    2b3c:	81 11       	cpse	r24, r1
    2b3e:	03 c0       	rjmp	.+6      	; 0x2b46 <main+0x36a>
			System_SetState(System_stateErrorNoSdFiles);
    2b40:	84 e0       	ldi	r24, 0x04	; 4
    2b42:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
		}
	}

	// Get headers from LPF
	if (System_IsState(System_stateInitializing))
    2b46:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2b4a:	81 11       	cpse	r24, r1
    2b4c:	35 c0       	rjmp	.+106    	; 0x2bb8 <main+0x3dc>
	{
		if (lpfFile.size() < LPF_HEADER_LENGTH)
    2b4e:	ce 01       	movw	r24, r28
    2b50:	4c 96       	adiw	r24, 0x1c	; 28
    2b52:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN4File4sizeEv>
    2b56:	60 32       	cpi	r22, 0x20	; 32
    2b58:	71 05       	cpc	r23, r1
    2b5a:	81 05       	cpc	r24, r1
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	20 f4       	brcc	.+8      	; 0x2b68 <main+0x38c>
		{
			System_SetState(System_stateErrorWrongSdFiles);
    2b60:	85 e0       	ldi	r24, 0x05	; 5
    2b62:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
    2b66:	28 c0       	rjmp	.+80     	; 0x2bb8 <main+0x3dc>
		}
		else
		{
			lpfFile.readBytes((char*)(&(lpfInfo.fileVersion)), 4);
    2b68:	44 e0       	ldi	r20, 0x04	; 4
    2b6a:	50 e0       	ldi	r21, 0x00	; 0
    2b6c:	be 01       	movw	r22, r28
    2b6e:	6f 5f       	subi	r22, 0xFF	; 255
    2b70:	7f 4f       	sbci	r23, 0xFF	; 255
    2b72:	ce 01       	movw	r24, r28
    2b74:	4c 96       	adiw	r24, 0x1c	; 28
    2b76:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN6Stream9readBytesEPcj>
			lpfFile.readBytes((char*)(&(lpfInfo.numberChannels)), 4);
    2b7a:	44 e0       	ldi	r20, 0x04	; 4
    2b7c:	50 e0       	ldi	r21, 0x00	; 0
    2b7e:	be 01       	movw	r22, r28
    2b80:	6b 5f       	subi	r22, 0xFB	; 251
    2b82:	7f 4f       	sbci	r23, 0xFF	; 255
    2b84:	ce 01       	movw	r24, r28
    2b86:	4c 96       	adiw	r24, 0x1c	; 28
    2b88:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN6Stream9readBytesEPcj>
			lpfFile.readBytes((char*)(&(lpfInfo.stepSize)), 4);
    2b8c:	44 e0       	ldi	r20, 0x04	; 4
    2b8e:	50 e0       	ldi	r21, 0x00	; 0
    2b90:	be 01       	movw	r22, r28
    2b92:	67 5f       	subi	r22, 0xF7	; 247
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	ce 01       	movw	r24, r28
    2b98:	4c 96       	adiw	r24, 0x1c	; 28
    2b9a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN6Stream9readBytesEPcj>
			lpfFile.readBytes((char*)(&(lpfInfo.numberSteps)), 4);
    2b9e:	44 e0       	ldi	r20, 0x04	; 4
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	be 01       	movw	r22, r28
    2ba4:	63 5f       	subi	r22, 0xF3	; 243
    2ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba8:	ce 01       	movw	r24, r28
    2baa:	4c 96       	adiw	r24, 0x1c	; 28
    2bac:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN6Stream9readBytesEPcj>
			lpfInfo.counterStep = 0;
    2bb0:	19 8a       	std	Y+17, r1	; 0x11
    2bb2:	1a 8a       	std	Y+18, r1	; 0x12
    2bb4:	1b 8a       	std	Y+19, r1	; 0x13
    2bb6:	1c 8a       	std	Y+20, r1	; 0x14
		}
	}
	// Verify headers from LPF
	if (System_IsState(System_stateInitializing))
    2bb8:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	2c c0       	rjmp	.+88     	; 0x2c18 <main+0x43c>
	{
		// Check appropriate number of channels
		if (lpfInfo.numberChannels != Tlc5941_numChannels)
    2bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc4:	af 81       	ldd	r26, Y+7	; 0x07
    2bc6:	b8 85       	ldd	r27, Y+8	; 0x08
    2bc8:	c0 97       	sbiw	r24, 0x30	; 48
    2bca:	a1 05       	cpc	r26, r1
    2bcc:	b1 05       	cpc	r27, r1
    2bce:	19 f0       	breq	.+6      	; 0x2bd6 <main+0x3fa>
			System_SetState(System_stateErrorWrongSdFiles);
    2bd0:	85 e0       	ldi	r24, 0x05	; 5
    2bd2:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
	
		// Check appropriate file size
		if (lpfFile.size() != (LPF_HEADER_LENGTH + lpfInfo.numberSteps*lpfInfo.numberChannels*2))
    2bd6:	ce 01       	movw	r24, r28
    2bd8:	4c 96       	adiw	r24, 0x1c	; 28
    2bda:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN4File4sizeEv>
    2bde:	6b 01       	movw	r12, r22
    2be0:	7c 01       	movw	r14, r24
    2be2:	2d 81       	ldd	r18, Y+5	; 0x05
    2be4:	3e 81       	ldd	r19, Y+6	; 0x06
    2be6:	4f 81       	ldd	r20, Y+7	; 0x07
    2be8:	58 85       	ldd	r21, Y+8	; 0x08
    2bea:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bec:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bf0:	98 89       	ldd	r25, Y+16	; 0x10
    2bf2:	0e 94 5f 1c 	call	0x38be	; 0x38be <__mulsi3>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	40 96       	adiw	r24, 0x10	; 16
    2bfc:	a1 1d       	adc	r26, r1
    2bfe:	b1 1d       	adc	r27, r1
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	c8 16       	cp	r12, r24
    2c0a:	d9 06       	cpc	r13, r25
    2c0c:	ea 06       	cpc	r14, r26
    2c0e:	fb 06       	cpc	r15, r27
    2c10:	19 f0       	breq	.+6      	; 0x2c18 <main+0x43c>
			System_SetState(System_stateErrorWrongSdFiles);
    2c12:	85 e0       	ldi	r24, 0x05	; 5
    2c14:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
	}
	// Scale step size
	#ifdef stepSizeScaling
		lpfInfo.stepSize = (uint32_t)((double)(lpfInfo.stepSize)*stepSizeScaling);
    2c18:	69 85       	ldd	r22, Y+9	; 0x09
    2c1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c20:	0e 94 22 19 	call	0x3244	; 0x3244 <__floatunsisf>
    2c24:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <__fixunssfsi>
    2c28:	69 87       	std	Y+9, r22	; 0x09
    2c2a:	7a 87       	std	Y+10, r23	; 0x0a
    2c2c:	8b 87       	std	Y+11, r24	; 0x0b
    2c2e:	9c 87       	std	Y+12, r25	; 0x0c
	#endif

	// Switch to running state
	if (System_IsState(System_stateInitializing))
    2c30:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2c34:	81 11       	cpse	r24, r1
    2c36:	03 c0       	rjmp	.+6      	; 0x2c3e <main+0x462>
	{
		System_SetState(System_stateRunning);
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <System_state>
	}
	
	// Assign callbacks to timer
	MsTimer_Stop();
    2c3e:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <MsTimer_Stop>
	if (System_IsState(System_stateRunning))
    2c42:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2c46:	81 30       	cpi	r24, 0x01	; 1
    2c48:	99 f4       	brne	.+38     	; 0x2c70 <main+0x494>
	{
		MsTimer_AddCallback(&UpdateLeds, lpfInfo.stepSize);
    2c4a:	49 85       	ldd	r20, Y+9	; 0x09
    2c4c:	5a 85       	ldd	r21, Y+10	; 0x0a
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8b ee       	ldi	r24, 0xEB	; 235
    2c54:	92 e1       	ldi	r25, 0x12	; 18
    2c56:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <MsTimer_AddCallback>
		MsTimer_AddCallback(&UpdateStatusLeds, 500);
    2c5a:	44 ef       	ldi	r20, 0xF4	; 244
    2c5c:	51 e0       	ldi	r21, 0x01	; 1
    2c5e:	60 e0       	ldi	r22, 0x00	; 0
    2c60:	70 e0       	ldi	r23, 0x00	; 0
    2c62:	8c ef       	ldi	r24, 0xFC	; 252
    2c64:	92 e1       	ldi	r25, 0x12	; 18
    2c66:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <MsTimer_AddCallback>
		Flag_Reset(dataAvailableFlag);
    2c6a:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <dataAvailableFlag>
    2c6e:	0a c0       	rjmp	.+20     	; 0x2c84 <main+0x4a8>
	}
	else
	{
		MsTimer_AddCallback(&UpdateStatusLeds, 500);
    2c70:	44 ef       	ldi	r20, 0xF4	; 244
    2c72:	51 e0       	ldi	r21, 0x01	; 1
    2c74:	60 e0       	ldi	r22, 0x00	; 0
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	8c ef       	ldi	r24, 0xFC	; 252
    2c7a:	92 e1       	ldi	r25, 0x12	; 18
    2c7c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <MsTimer_AddCallback>
		// Start timer
		MsTimer_Start();
    2c80:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MsTimer_Start>
	}
	first_frame = 1;
	
	// Do led intensity decoding as necessary
	lpfFile.seek(LPF_HEADER_LENGTH);
    2c84:	40 e2       	ldi	r20, 0x20	; 32
    2c86:	50 e0       	ldi	r21, 0x00	; 0
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	70 e0       	ldi	r23, 0x00	; 0
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	4c 96       	adiw	r24, 0x1c	; 28
    2c90:	0e 94 b4 01 	call	0x368	; 0x368 <_ZN4File4seekEm>
	{
		MsTimer_AddCallback(&UpdateStatusLeds, 500);
		// Start timer
		MsTimer_Start();
	}
	first_frame = 1;
    2c94:	11 e0       	ldi	r17, 0x01	; 1
}
static inline void Tlc5941_SetGSUpdateFlag(void) {
	__asm__ volatile ("" ::: "memory");
	Tlc5941_gsUpdateFlag = 1;
    2c96:	bb 24       	eor	r11, r11
    2c98:	b3 94       	inc	r11
    2c9a:	8b ea       	ldi	r24, 0xAB	; 171
    2c9c:	93 e0       	ldi	r25, 0x03	; 3
    2c9e:	00 e3       	ldi	r16, 0x30	; 48
    2ca0:	08 0f       	add	r16, r24
			// Check if last data access was met
			// This should be run as an atomic block
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
				if (Flag_HasFailedRelease(dataAvailableFlag))
				{
					System_SetState(System_stateErrorTimeout);
    2ca2:	56 e0       	ldi	r21, 0x06	; 6
    2ca4:	a5 2e       	mov	r10, r21
			for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
			{
				// We get two bytes at a time, which contains one grayscale value
				if (lpfFile.readBytes((char*)(&(temp)), 2) != 2)
				{
					System_SetState(System_stateErrorLpfUnavailable);
    2ca6:	67 e0       	ldi	r22, 0x07	; 7
    2ca8:	96 2e       	mov	r9, r22
			while(Tlc5941_gsUpdateFlag);

			// Check if finished
			if (lpfInfo.counterStep == lpfInfo.numberSteps)
			{
				System_SetState(System_stateFinished);
    2caa:	72 e0       	ldi	r23, 0x02	; 2
    2cac:	87 2e       	mov	r8, r23
	first_frame = 1;
	
	// Do led intensity decoding as necessary
	lpfFile.seek(LPF_HEADER_LENGTH);
	while(1) {
		if (System_IsState(System_stateRunning))
    2cae:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2cb2:	81 30       	cpi	r24, 0x01	; 1
    2cb4:	09 f0       	breq	.+2      	; 0x2cb8 <main+0x4dc>
    2cb6:	4f c0       	rjmp	.+158    	; 0x2d56 <main+0x57a>
		{
			// Wait until data has been consumed
			while(Flag_IsSet(dataAvailableFlag));
    2cb8:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dataAvailableFlag>
    2cbc:	18 16       	cp	r1, r24
    2cbe:	e4 f3       	brlt	.-8      	; 0x2cb8 <main+0x4dc>

			// Wait until TLC library is done transmitting
			while(Tlc5941_gsUpdateFlag);
    2cc0:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <Tlc5941_gsUpdateFlag>
    2cc4:	81 11       	cpse	r24, r1
    2cc6:	fc cf       	rjmp	.-8      	; 0x2cc0 <main+0x4e4>

			// Check if finished
			if (lpfInfo.counterStep == lpfInfo.numberSteps)
    2cc8:	49 89       	ldd	r20, Y+17	; 0x11
    2cca:	5a 89       	ldd	r21, Y+18	; 0x12
    2ccc:	6b 89       	ldd	r22, Y+19	; 0x13
    2cce:	7c 89       	ldd	r23, Y+20	; 0x14
    2cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd4:	af 85       	ldd	r26, Y+15	; 0x0f
    2cd6:	b8 89       	ldd	r27, Y+16	; 0x10
    2cd8:	48 17       	cp	r20, r24
    2cda:	59 07       	cpc	r21, r25
    2cdc:	6a 07       	cpc	r22, r26
    2cde:	7b 07       	cpc	r23, r27
    2ce0:	19 f4       	brne	.+6      	; 0x2ce8 <main+0x50c>
			{
				System_SetState(System_stateFinished);
    2ce2:	80 92 aa 03 	sts	0x03AA, r8	; 0x8003aa <System_state>
				continue;
    2ce6:	e3 cf       	rjmp	.-58     	; 0x2cae <main+0x4d2>
    2ce8:	38 e8       	ldi	r19, 0x88	; 136
    2cea:	c3 2e       	mov	r12, r19
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	d3 2e       	mov	r13, r19

			// Wait until TLC library is done transmitting
			while(Tlc5941_gsUpdateFlag);

			// Check if finished
			if (lpfInfo.counterStep == lpfInfo.numberSteps)
    2cf0:	4b ea       	ldi	r20, 0xAB	; 171
    2cf2:	e4 2e       	mov	r14, r20
    2cf4:	43 e0       	ldi	r20, 0x03	; 3
    2cf6:	f4 2e       	mov	r15, r20
			}
			// Read data from LPF
			for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
			{
				// We get two bytes at a time, which contains one grayscale value
				if (lpfFile.readBytes((char*)(&(temp)), 2) != 2)
    2cf8:	42 e0       	ldi	r20, 0x02	; 2
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	be 01       	movw	r22, r28
    2cfe:	63 59       	subi	r22, 0x93	; 147
    2d00:	7f 4f       	sbci	r23, 0xFF	; 255
    2d02:	ce 01       	movw	r24, r28
    2d04:	4c 96       	adiw	r24, 0x1c	; 28
    2d06:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN6Stream9readBytesEPcj>
    2d0a:	02 97       	sbiw	r24, 0x02	; 2
    2d0c:	19 f0       	breq	.+6      	; 0x2d14 <main+0x538>
				{
					System_SetState(System_stateErrorLpfUnavailable);
    2d0e:	90 92 aa 03 	sts	0x03AA, r9	; 0x8003aa <System_state>
					break;
    2d12:	1b c0       	rjmp	.+54     	; 0x2d4a <main+0x56e>
				}
				// Get well position and calibration
				Tlc5941_channel_t well = pgm_read_byte(&(well2channel[i]));
    2d14:	f6 01       	movw	r30, r12
    2d16:	74 90       	lpm	r7, Z
				uint16_t calibration = grayscaleCalibration[i];
    2d18:	f7 01       	movw	r30, r14
    2d1a:	a1 91       	ld	r26, Z+
    2d1c:	7f 01       	movw	r14, r30
    2d1e:	b0 e0       	ldi	r27, 0x00	; 0
				// Update LEDs
				// uint32_t intensity = i*10;
				// Tlc5941_SetGS(well, intensity*(calibration + 1)>>8);
				Tlc5941_SetGS(well, temp*(calibration + 1)>>8);
    2d20:	11 96       	adiw	r26, 0x01	; 1
    2d22:	e1 96       	adiw	r28, 0x31	; 49
    2d24:	2c ad       	ldd	r18, Y+60	; 0x3c
    2d26:	3d ad       	ldd	r19, Y+61	; 0x3d
    2d28:	4e ad       	ldd	r20, Y+62	; 0x3e
    2d2a:	5f ad       	ldd	r21, Y+63	; 0x3f
    2d2c:	e1 97       	sbiw	r28, 0x31	; 49
    2d2e:	0e 94 97 1c 	call	0x392e	; 0x392e <__muluhisi3>
    2d32:	67 2f       	mov	r22, r23
    2d34:	78 2f       	mov	r23, r24
    2d36:	89 2f       	mov	r24, r25
    2d38:	99 27       	eor	r25, r25
    2d3a:	87 2d       	mov	r24, r7
    2d3c:	0e 94 14 18 	call	0x3028	; 0x3028 <Tlc5941_SetGS>
    2d40:	ff ef       	ldi	r31, 0xFF	; 255
    2d42:	cf 1a       	sub	r12, r31
    2d44:	df 0a       	sbc	r13, r31
			{
				System_SetState(System_stateFinished);
				continue;
			}
			// Read data from LPF
			for (Tlc5941_channel_t i = 0; i < Tlc5941_numChannels; i++)
    2d46:	0e 11       	cpse	r16, r14
    2d48:	d7 cf       	rjmp	.-82     	; 0x2cf8 <main+0x51c>
				// Update LEDs
				// uint32_t intensity = i*10;
				// Tlc5941_SetGS(well, intensity*(calibration + 1)>>8);
				Tlc5941_SetGS(well, temp*(calibration + 1)>>8);
			}
			if (!System_IsState(System_stateRunning))
    2d4a:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <System_state>
    2d4e:	88 23       	and	r24, r24
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <main+0x578>
    2d52:	ad cf       	rjmp	.-166    	; 0x2cae <main+0x4d2>
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <main+0x598>
			}
			
		}
		else {
			// Set all grayscale to zero if first frame
			if (first_frame) {
    2d56:	11 11       	cpse	r17, r1
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <main+0x582>
			}
			// Start timer if first frame
			if (first_frame)
			{
				MsTimer_Start();
				first_frame = 0;
    2d5a:	10 e0       	ldi	r17, 0x00	; 0
    2d5c:	a8 cf       	rjmp	.-176    	; 0x2cae <main+0x4d2>
			
		}
		else {
			// Set all grayscale to zero if first frame
			if (first_frame) {
				Tlc5941_SetAllGS(0);
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <Tlc5941_SetAllGS>
    2d66:	b0 92 f0 04 	sts	0x04F0, r11	; 0x8004f0 <Tlc5941_gsUpdateFlag>
				Tlc5941_SetGSUpdateFlag();
				while(Tlc5941_gsUpdateFlag);
    2d6a:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <Tlc5941_gsUpdateFlag>
    2d6e:	81 11       	cpse	r24, r1
    2d70:	fc cf       	rjmp	.-8      	; 0x2d6a <main+0x58e>
    2d72:	f3 cf       	rjmp	.-26     	; 0x2d5a <main+0x57e>
			{
				continue;
			}
				
			// Increment time counter
			lpfInfo.counterStep++;
    2d74:	89 89       	ldd	r24, Y+17	; 0x11
    2d76:	9a 89       	ldd	r25, Y+18	; 0x12
    2d78:	ab 89       	ldd	r26, Y+19	; 0x13
    2d7a:	bc 89       	ldd	r27, Y+20	; 0x14
    2d7c:	01 96       	adiw	r24, 0x01	; 1
    2d7e:	a1 1d       	adc	r26, r1
    2d80:	b1 1d       	adc	r27, r1
    2d82:	89 8b       	std	Y+17, r24	; 0x11
    2d84:	9a 8b       	std	Y+18, r25	; 0x12
    2d86:	ab 8b       	std	Y+19, r26	; 0x13
    2d88:	bc 8b       	std	Y+20, r27	; 0x14

			// Check if last data access was met
			// This should be run as an atomic block
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    2d8a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d8c:	f8 94       	cli
				if (Flag_HasFailedRelease(dataAvailableFlag))
    2d8e:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dataAvailableFlag>
    2d92:	87 ff       	sbrs	r24, 7
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <main+0x5c0>
				{
					System_SetState(System_stateErrorTimeout);
    2d96:	a0 92 aa 03 	sts	0x03AA, r10	; 0x8003aa <System_state>
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <main+0x5ca>
				}
				else
				{
					Flag_Set(dataAvailableFlag);
    2d9c:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <dataAvailableFlag>
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <dataAvailableFlag>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2da6:	9f bf       	out	0x3f, r25	; 63
				}
			}
			// Start timer if first frame
			if (first_frame)
    2da8:	11 23       	and	r17, r17
    2daa:	b9 f2       	breq	.-82     	; 0x2d5a <main+0x57e>
			{
				MsTimer_Start();
    2dac:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <MsTimer_Start>
    2db0:	d4 cf       	rjmp	.-88     	; 0x2d5a <main+0x57e>

00002db2 <MsTimer_Init>:
void (*MsTimer_Callback[MsTimer_CallbackMax])(void);

void MsTimer_Init(void) {
	// Initialize Timer 1 to generate an interruption every millisecond
	// Mode: CTC, WGM1 = 0b0100
	TCCR1B = (1 << WGM12);
    2db2:	88 e0       	ldi	r24, 0x08	; 8
    2db4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	// Compare value: 0x3E7F
	OCR1A = 0x3E7F;
    2db8:	8f e7       	ldi	r24, 0x7F	; 127
    2dba:	9e e3       	ldi	r25, 0x3E	; 62
    2dbc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2dc0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2dc4:	08 95       	ret

00002dc6 <MsTimer_Start>:
}

void MsTimer_Start()
{
	// Reset run time counter
	MsTimer_Counter = 0;
    2dc6:	10 92 b3 04 	sts	0x04B3, r1	; 0x8004b3 <MsTimer_Counter>
    2dca:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <MsTimer_Counter+0x1>
    2dce:	10 92 b5 04 	sts	0x04B5, r1	; 0x8004b5 <MsTimer_Counter+0x2>
    2dd2:	10 92 b6 04 	sts	0x04B6, r1	; 0x8004b6 <MsTimer_Counter+0x3>
	// Reset callback counters
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    2dd6:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <MsTimer_CallbackN>
    2dda:	88 23       	and	r24, r24
    2ddc:	91 f0       	breq	.+36     	; 0x2e02 <MsTimer_Start+0x3c>
	{
		MsTimer_CallbackCounter[i] = 0;
    2dde:	10 92 b7 04 	sts	0x04B7, r1	; 0x8004b7 <MsTimer_CallbackCounter>
    2de2:	10 92 b8 04 	sts	0x04B8, r1	; 0x8004b8 <MsTimer_CallbackCounter+0x1>
    2de6:	10 92 b9 04 	sts	0x04B9, r1	; 0x8004b9 <MsTimer_CallbackCounter+0x2>
    2dea:	10 92 ba 04 	sts	0x04BA, r1	; 0x8004ba <MsTimer_CallbackCounter+0x3>
void MsTimer_Start()
{
	// Reset run time counter
	MsTimer_Counter = 0;
	// Reset callback counters
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    2dee:	82 30       	cpi	r24, 0x02	; 2
    2df0:	40 f0       	brcs	.+16     	; 0x2e02 <MsTimer_Start+0x3c>
	{
		MsTimer_CallbackCounter[i] = 0;
    2df2:	10 92 bb 04 	sts	0x04BB, r1	; 0x8004bb <MsTimer_CallbackCounter+0x4>
    2df6:	10 92 bc 04 	sts	0x04BC, r1	; 0x8004bc <MsTimer_CallbackCounter+0x5>
    2dfa:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <MsTimer_CallbackCounter+0x6>
    2dfe:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <MsTimer_CallbackCounter+0x7>
	}
	// Reset timer counter
	MsTimer_ResetCounter();
    2e02:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2e06:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	// Enable timer and interrupt
	MsTimer_EnableTimer();
    2e0a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    2e0e:	81 60       	ori	r24, 0x01	; 1
    2e10:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	MsTimer_EnableInt();
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2e1a:	08 95       	ret

00002e1c <MsTimer_Stop>:
}

void MsTimer_Stop()
{
	MsTimer_DisableTimer();
    2e1c:	e1 e8       	ldi	r30, 0x81	; 129
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	88 7f       	andi	r24, 0xF8	; 248
    2e24:	80 83       	st	Z, r24
	MsTimer_DisableInt();
    2e26:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2e2a:	08 95       	ret

00002e2c <MsTimer_AddCallback>:
}

void MsTimer_AddCallback(void (*callback)(void), uint32_t period)
{
	MsTimer_Callback[MsTimer_CallbackN] = callback;
    2e2c:	a0 91 0b 04 	lds	r26, 0x040B	; 0x80040b <MsTimer_CallbackN>
    2e30:	2a 2f       	mov	r18, r26
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	f9 01       	movw	r30, r18
    2e36:	ee 0f       	add	r30, r30
    2e38:	ff 1f       	adc	r31, r31
    2e3a:	e1 54       	subi	r30, 0x41	; 65
    2e3c:	fb 4f       	sbci	r31, 0xFB	; 251
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
	MsTimer_CallbackPeriod[MsTimer_CallbackN] = period;
    2e42:	22 0f       	add	r18, r18
    2e44:	33 1f       	adc	r19, r19
    2e46:	22 0f       	add	r18, r18
    2e48:	33 1f       	adc	r19, r19
    2e4a:	f9 01       	movw	r30, r18
    2e4c:	ed 53       	subi	r30, 0x3D	; 61
    2e4e:	fb 4f       	sbci	r31, 0xFB	; 251
    2e50:	40 83       	st	Z, r20
    2e52:	51 83       	std	Z+1, r21	; 0x01
    2e54:	62 83       	std	Z+2, r22	; 0x02
    2e56:	73 83       	std	Z+3, r23	; 0x03
	MsTimer_CallbackN++;
    2e58:	51 e0       	ldi	r21, 0x01	; 1
    2e5a:	5a 0f       	add	r21, r26
    2e5c:	50 93 0b 04 	sts	0x040B, r21	; 0x80040b <MsTimer_CallbackN>
    2e60:	08 95       	ret

00002e62 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) {
    2e62:	1f 92       	push	r1
    2e64:	0f 92       	push	r0
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	0f 92       	push	r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	ef 92       	push	r14
    2e6e:	ff 92       	push	r15
    2e70:	1f 93       	push	r17
    2e72:	2f 93       	push	r18
    2e74:	3f 93       	push	r19
    2e76:	4f 93       	push	r20
    2e78:	5f 93       	push	r21
    2e7a:	6f 93       	push	r22
    2e7c:	7f 93       	push	r23
    2e7e:	8f 93       	push	r24
    2e80:	9f 93       	push	r25
    2e82:	af 93       	push	r26
    2e84:	bf 93       	push	r27
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	ef 93       	push	r30
    2e8c:	ff 93       	push	r31
	// Increment global counter
	MsTimer_Counter++;
    2e8e:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <MsTimer_Counter>
    2e92:	90 91 b4 04 	lds	r25, 0x04B4	; 0x8004b4 <MsTimer_Counter+0x1>
    2e96:	a0 91 b5 04 	lds	r26, 0x04B5	; 0x8004b5 <MsTimer_Counter+0x2>
    2e9a:	b0 91 b6 04 	lds	r27, 0x04B6	; 0x8004b6 <MsTimer_Counter+0x3>
    2e9e:	01 96       	adiw	r24, 0x01	; 1
    2ea0:	a1 1d       	adc	r26, r1
    2ea2:	b1 1d       	adc	r27, r1
    2ea4:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <MsTimer_Counter>
    2ea8:	90 93 b4 04 	sts	0x04B4, r25	; 0x8004b4 <MsTimer_Counter+0x1>
    2eac:	a0 93 b5 04 	sts	0x04B5, r26	; 0x8004b5 <MsTimer_Counter+0x2>
    2eb0:	b0 93 b6 04 	sts	0x04B6, r27	; 0x8004b6 <MsTimer_Counter+0x3>
	
	// Check if we have to run callbacks and increment counter
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    2eb4:	10 e0       	ldi	r17, 0x00	; 0
    2eb6:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <MsTimer_CallbackN>
    2eba:	18 17       	cp	r17, r24
    2ebc:	c8 f5       	brcc	.+114    	; 0x2f30 <__vector_11+0xce>
	{
		if (MsTimer_CallbackCounter[i] == 0)
    2ebe:	81 2f       	mov	r24, r17
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	ec 01       	movw	r28, r24
    2ec4:	cc 0f       	add	r28, r28
    2ec6:	dd 1f       	adc	r29, r29
    2ec8:	cc 0f       	add	r28, r28
    2eca:	dd 1f       	adc	r29, r29
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e9 54       	subi	r30, 0x49	; 73
    2ed0:	fb 4f       	sbci	r31, 0xFB	; 251
    2ed2:	40 81       	ld	r20, Z
    2ed4:	51 81       	ldd	r21, Z+1	; 0x01
    2ed6:	62 81       	ldd	r22, Z+2	; 0x02
    2ed8:	73 81       	ldd	r23, Z+3	; 0x03
    2eda:	45 2b       	or	r20, r21
    2edc:	46 2b       	or	r20, r22
    2ede:	47 2b       	or	r20, r23
    2ee0:	49 f4       	brne	.+18     	; 0x2ef4 <__vector_11+0x92>
		{
			(*MsTimer_Callback[i])();
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	e1 54       	subi	r30, 0x41	; 65
    2eea:	fb 4f       	sbci	r31, 0xFB	; 251
    2eec:	01 90       	ld	r0, Z+
    2eee:	f0 81       	ld	r31, Z
    2ef0:	e0 2d       	mov	r30, r0
    2ef2:	09 95       	icall
		}
		MsTimer_CallbackCounter[i] = (MsTimer_CallbackCounter[i] + 1) % MsTimer_CallbackPeriod[i];
    2ef4:	ce 01       	movw	r24, r28
    2ef6:	89 54       	subi	r24, 0x49	; 73
    2ef8:	9b 4f       	sbci	r25, 0xFB	; 251
    2efa:	7c 01       	movw	r14, r24
    2efc:	fc 01       	movw	r30, r24
    2efe:	80 81       	ld	r24, Z
    2f00:	91 81       	ldd	r25, Z+1	; 0x01
    2f02:	a2 81       	ldd	r26, Z+2	; 0x02
    2f04:	b3 81       	ldd	r27, Z+3	; 0x03
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	6f 5f       	subi	r22, 0xFF	; 255
    2f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f10:	9f 4f       	sbci	r25, 0xFF	; 255
    2f12:	cd 53       	subi	r28, 0x3D	; 61
    2f14:	db 4f       	sbci	r29, 0xFB	; 251
    2f16:	28 81       	ld	r18, Y
    2f18:	39 81       	ldd	r19, Y+1	; 0x01
    2f1a:	4a 81       	ldd	r20, Y+2	; 0x02
    2f1c:	5b 81       	ldd	r21, Y+3	; 0x03
    2f1e:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodsi4>
    2f22:	f7 01       	movw	r30, r14
    2f24:	60 83       	st	Z, r22
    2f26:	71 83       	std	Z+1, r23	; 0x01
    2f28:	82 83       	std	Z+2, r24	; 0x02
    2f2a:	93 83       	std	Z+3, r25	; 0x03
ISR(TIMER1_COMPA_vect) {
	// Increment global counter
	MsTimer_Counter++;
	
	// Check if we have to run callbacks and increment counter
	for (uint8_t i = 0; i < MsTimer_CallbackN; i++)
    2f2c:	1f 5f       	subi	r17, 0xFF	; 255
    2f2e:	c3 cf       	rjmp	.-122    	; 0x2eb6 <__vector_11+0x54>
		{
			(*MsTimer_Callback[i])();
		}
		MsTimer_CallbackCounter[i] = (MsTimer_CallbackCounter[i] + 1) % MsTimer_CallbackPeriod[i];
	}
    2f30:	ff 91       	pop	r31
    2f32:	ef 91       	pop	r30
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	bf 91       	pop	r27
    2f3a:	af 91       	pop	r26
    2f3c:	9f 91       	pop	r25
    2f3e:	8f 91       	pop	r24
    2f40:	7f 91       	pop	r23
    2f42:	6f 91       	pop	r22
    2f44:	5f 91       	pop	r21
    2f46:	4f 91       	pop	r20
    2f48:	3f 91       	pop	r19
    2f4a:	2f 91       	pop	r18
    2f4c:	1f 91       	pop	r17
    2f4e:	ff 90       	pop	r15
    2f50:	ef 90       	pop	r14
    2f52:	0f 90       	pop	r0
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	0f 90       	pop	r0
    2f58:	1f 90       	pop	r1
    2f5a:	18 95       	reti

00002f5c <StatusLeds_Init>:
#include "StatusLeds.h"

void StatusLeds_Init(void)
{
	// Set pins as outputs
	DDRC |= 0x38;
    2f5c:	87 b1       	in	r24, 0x07	; 7
    2f5e:	88 63       	ori	r24, 0x38	; 56
    2f60:	87 b9       	out	0x07, r24	; 7
    2f62:	08 95       	ret

00002f64 <StatusLeds_Set>:
}

void StatusLeds_Set(uint8_t led, uint8_t status)
{
	if (status)
	PORTC |= 1 << led;
    2f64:	48 b1       	in	r20, 0x08	; 8
    2f66:	21 e0       	ldi	r18, 0x01	; 1
    2f68:	30 e0       	ldi	r19, 0x00	; 0
	DDRC |= 0x38;
}

void StatusLeds_Set(uint8_t led, uint8_t status)
{
	if (status)
    2f6a:	66 23       	and	r22, r22
    2f6c:	49 f0       	breq	.+18     	; 0x2f80 <StatusLeds_Set+0x1c>
	PORTC |= 1 << led;
    2f6e:	b9 01       	movw	r22, r18
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <StatusLeds_Set+0x12>
    2f72:	66 0f       	add	r22, r22
    2f74:	77 1f       	adc	r23, r23
    2f76:	8a 95       	dec	r24
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <StatusLeds_Set+0xe>
    2f7a:	cb 01       	movw	r24, r22
    2f7c:	84 2b       	or	r24, r20
    2f7e:	09 c0       	rjmp	.+18     	; 0x2f92 <StatusLeds_Set+0x2e>
	else
	PORTC &= ~( 1 << led);
    2f80:	b9 01       	movw	r22, r18
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <StatusLeds_Set+0x24>
    2f84:	66 0f       	add	r22, r22
    2f86:	77 1f       	adc	r23, r23
    2f88:	8a 95       	dec	r24
    2f8a:	e2 f7       	brpl	.-8      	; 0x2f84 <StatusLeds_Set+0x20>
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	80 95       	com	r24
    2f90:	84 23       	and	r24, r20
    2f92:	88 b9       	out	0x08, r24	; 8
    2f94:	08 95       	ret

00002f96 <StatusLeds_Toggle>:
}

void StatusLeds_Toggle(uint8_t led)
{
	PINC = (1 << led);
    2f96:	21 e0       	ldi	r18, 0x01	; 1
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	01 c0       	rjmp	.+2      	; 0x2f9e <StatusLeds_Toggle+0x8>
    2f9c:	22 0f       	add	r18, r18
    2f9e:	8a 95       	dec	r24
    2fa0:	ea f7       	brpl	.-6      	; 0x2f9c <StatusLeds_Toggle+0x6>
    2fa2:	26 b9       	out	0x06, r18	; 6
    2fa4:	08 95       	ret

00002fa6 <Tlc5941_Init>:
			// Wait for transmission complete
			while (!(UCSR0A & (1 << UDRE0)));
		#endif
	}

	Tlc5941_pulse(Tlc5941_XLAT_PORT, Tlc5941_XLAT_PIN);
    2fa6:	20 9a       	sbi	0x04, 0	; 4
    2fa8:	54 9a       	sbi	0x0a, 4	; 10
    2faa:	52 9a       	sbi	0x0a, 2	; 10
    2fac:	21 9a       	sbi	0x04, 1	; 4
    2fae:	53 9a       	sbi	0x0a, 3	; 10
    2fb0:	51 9a       	sbi	0x0a, 1	; 10
    2fb2:	28 98       	cbi	0x05, 0	; 5
    2fb4:	5c 98       	cbi	0x0b, 4	; 11
    2fb6:	5a 98       	cbi	0x0b, 2	; 11
    2fb8:	29 98       	cbi	0x05, 1	; 5
    2fba:	5b 98       	cbi	0x0b, 3	; 11
    2fbc:	e4 ec       	ldi	r30, 0xC4	; 196
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	11 82       	std	Z+1, r1	; 0x01
    2fc2:	10 82       	st	Z, r1
    2fc4:	80 ec       	ldi	r24, 0xC0	; 192
    2fc6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2fca:	88 e0       	ldi	r24, 0x08	; 8
    2fcc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2fd0:	11 82       	std	Z+1, r1	; 0x01
    2fd2:	10 82       	st	Z, r1
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2fda:	87 e0       	ldi	r24, 0x07	; 7
    2fdc:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    2fe6:	e0 e7       	ldi	r30, 0x70	; 112
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	82 60       	ori	r24, 0x02	; 2
    2fee:	80 83       	st	Z, r24
    2ff0:	08 95       	ret

00002ff2 <Tlc5941_SetAllGS>:
    2ff2:	9c 01       	movw	r18, r24
    2ff4:	94 e0       	ldi	r25, 0x04	; 4
    2ff6:	36 95       	lsr	r19
    2ff8:	27 95       	ror	r18
    2ffa:	9a 95       	dec	r25
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <Tlc5941_SetAllGS+0x4>
    2ffe:	42 2f       	mov	r20, r18
    3000:	98 2f       	mov	r25, r24
    3002:	22 95       	swap	r18
    3004:	2f 70       	andi	r18, 0x0F	; 15
    3006:	82 95       	swap	r24
    3008:	80 7f       	andi	r24, 0xF0	; 240
    300a:	82 2b       	or	r24, r18
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	f9 01       	movw	r30, r18
    3012:	ef 50       	subi	r30, 0x0F	; 15
    3014:	fb 4f       	sbci	r31, 0xFB	; 251
    3016:	40 83       	st	Z, r20
    3018:	81 83       	std	Z+1, r24	; 0x01
    301a:	92 83       	std	Z+2, r25	; 0x02
    301c:	2d 5f       	subi	r18, 0xFD	; 253
    301e:	3f 4f       	sbci	r19, 0xFF	; 255
    3020:	28 34       	cpi	r18, 0x48	; 72
    3022:	31 05       	cpc	r19, r1
    3024:	a9 f7       	brne	.-22     	; 0x3010 <Tlc5941_SetAllGS+0x1e>
    3026:	08 95       	ret

00003028 <Tlc5941_SetGS>:
    3028:	9f e2       	ldi	r25, 0x2F	; 47
    302a:	98 1b       	sub	r25, r24
    302c:	89 2f       	mov	r24, r25
    302e:	93 e0       	ldi	r25, 0x03	; 3
    3030:	89 9f       	mul	r24, r25
    3032:	f0 01       	movw	r30, r0
    3034:	11 24       	eor	r1, r1
    3036:	f5 95       	asr	r31
    3038:	e7 95       	ror	r30
    303a:	df 01       	movw	r26, r30
    303c:	bb 27       	eor	r27, r27
    303e:	ef 5f       	subi	r30, 0xFF	; 255
    3040:	af 50       	subi	r26, 0x0F	; 15
    3042:	bb 4f       	sbci	r27, 0xFB	; 251
    3044:	80 fd       	sbrc	r24, 0
    3046:	10 c0       	rjmp	.+32     	; 0x3068 <Tlc5941_SetGS+0x40>
    3048:	cb 01       	movw	r24, r22
    304a:	24 e0       	ldi	r18, 0x04	; 4
    304c:	96 95       	lsr	r25
    304e:	87 95       	ror	r24
    3050:	2a 95       	dec	r18
    3052:	e1 f7       	brne	.-8      	; 0x304c <Tlc5941_SetGS+0x24>
    3054:	8c 93       	st	X, r24
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	ef 50       	subi	r30, 0x0F	; 15
    305a:	fb 4f       	sbci	r31, 0xFB	; 251
    305c:	80 81       	ld	r24, Z
    305e:	8f 70       	andi	r24, 0x0F	; 15
    3060:	62 95       	swap	r22
    3062:	60 7f       	andi	r22, 0xF0	; 240
    3064:	68 2b       	or	r22, r24
    3066:	07 c0       	rjmp	.+14     	; 0x3076 <Tlc5941_SetGS+0x4e>
    3068:	8c 91       	ld	r24, X
    306a:	80 7f       	andi	r24, 0xF0	; 240
    306c:	87 2b       	or	r24, r23
    306e:	8c 93       	st	X, r24
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	ef 50       	subi	r30, 0x0F	; 15
    3074:	fb 4f       	sbci	r31, 0xFB	; 251
    3076:	60 83       	st	Z, r22
    3078:	08 95       	ret

0000307a <Tlc5941_SetAllDC>:
}

void Tlc5941_SetAllDC(uint8_t value) {
	// Sets all dot correction values to the same input value.
	uint8_t tmp1 = (uint8_t)(value << 2);
    307a:	98 2f       	mov	r25, r24
    307c:	99 0f       	add	r25, r25
    307e:	99 0f       	add	r25, r25
	uint8_t tmp2 = (uint8_t)(tmp1 << 2);
    3080:	49 2f       	mov	r20, r25
    3082:	44 0f       	add	r20, r20
    3084:	44 0f       	add	r20, r20
	uint8_t tmp3 = (uint8_t)(tmp2 << 2);
    3086:	34 2f       	mov	r19, r20
    3088:	33 0f       	add	r19, r19
    308a:	33 0f       	add	r19, r19
	tmp1 |= (value >> 4);
    308c:	28 2f       	mov	r18, r24
    308e:	22 95       	swap	r18
    3090:	2f 70       	andi	r18, 0x0F	; 15
    3092:	92 2b       	or	r25, r18
	tmp2 |= (value >> 2);
    3094:	28 2f       	mov	r18, r24
    3096:	26 95       	lsr	r18
    3098:	26 95       	lsr	r18
    309a:	42 2b       	or	r20, r18
	tmp3 |= value;
    309c:	83 2b       	or	r24, r19
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	30 e0       	ldi	r19, 0x00	; 0
    30a2:	f9 01       	movw	r30, r18
    30a4:	e5 53       	subi	r30, 0x35	; 53
    30a6:	fb 4f       	sbci	r31, 0xFB	; 251
	Tlc5941_dcData_t i = 0;
	do {
		Tlc5941_dcData[i++] = tmp1; // bits: 05 04 03 02 01 00 05 04
    30a8:	90 83       	st	Z, r25
		Tlc5941_dcData[i++] = tmp2; // bits: 03 02 01 00 05 04 03 02
    30aa:	41 83       	std	Z+1, r20	; 0x01
		Tlc5941_dcData[i++] = tmp3; // bits: 01 00 05 04 03 02 01 00
    30ac:	82 83       	std	Z+2, r24	; 0x02
    30ae:	2d 5f       	subi	r18, 0xFD	; 253
    30b0:	3f 4f       	sbci	r19, 0xFF	; 255
	} while (i < Tlc5941_dcDataSize);
    30b2:	24 32       	cpi	r18, 0x24	; 36
    30b4:	31 05       	cpc	r19, r1
    30b6:	a9 f7       	brne	.-22     	; 0x30a2 <Tlc5941_SetAllDC+0x28>
}
    30b8:	08 95       	ret

000030ba <Tlc5941_SetDC>:

void Tlc5941_SetDC(Tlc5941_channel_t channel, uint8_t value) {
	// Sets the dot correction value of a particular channel
	channel = Tlc5941_numChannels - 1 - channel;
    30ba:	2f e2       	ldi	r18, 0x2F	; 47
    30bc:	28 1b       	sub	r18, r24
	Tlc5941_channel_t i = (Tlc5941_channel3_t)channel * 3 / 4;
    30be:	33 e0       	ldi	r19, 0x03	; 3
    30c0:	23 9f       	mul	r18, r19
    30c2:	c0 01       	movw	r24, r0
    30c4:	11 24       	eor	r1, r1
    30c6:	95 95       	asr	r25
    30c8:	87 95       	ror	r24
    30ca:	95 95       	asr	r25
    30cc:	87 95       	ror	r24
	switch (channel % 4) {
    30ce:	23 70       	andi	r18, 0x03	; 3
    30d0:	fc 01       	movw	r30, r24
    30d2:	e5 53       	subi	r30, 0x35	; 53
    30d4:	fb 4f       	sbci	r31, 0xFB	; 251
    30d6:	21 30       	cpi	r18, 0x01	; 1
    30d8:	d9 f0       	breq	.+54     	; 0x3110 <Tlc5941_SetDC+0x56>
    30da:	a8 f0       	brcs	.+42     	; 0x3106 <Tlc5941_SetDC+0x4c>
    30dc:	22 30       	cpi	r18, 0x02	; 2
    30de:	49 f5       	brne	.+82     	; 0x3132 <Tlc5941_SetDC+0x78>
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xFC) | (value >> 4);
			i++;
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x0F) | (uint8_t)(value << 4);
			break;
		case 2:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xF0) | (value >> 2);
    30e0:	90 81       	ld	r25, Z
    30e2:	90 7f       	andi	r25, 0xF0	; 240
    30e4:	26 2f       	mov	r18, r22
    30e6:	26 95       	lsr	r18
    30e8:	26 95       	lsr	r18
    30ea:	92 2b       	or	r25, r18
    30ec:	90 83       	st	Z, r25
			i++;
    30ee:	8f 5f       	subi	r24, 0xFF	; 255
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x3F) | (uint8_t)(value << 6);
    30f0:	e8 2f       	mov	r30, r24
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	e5 53       	subi	r30, 0x35	; 53
    30f6:	fb 4f       	sbci	r31, 0xFB	; 251
    30f8:	80 81       	ld	r24, Z
    30fa:	8f 73       	andi	r24, 0x3F	; 63
    30fc:	62 95       	swap	r22
    30fe:	66 0f       	add	r22, r22
    3100:	66 0f       	add	r22, r22
    3102:	60 7c       	andi	r22, 0xC0	; 192
    3104:	18 c0       	rjmp	.+48     	; 0x3136 <Tlc5941_SetDC+0x7c>
	// Sets the dot correction value of a particular channel
	channel = Tlc5941_numChannels - 1 - channel;
	Tlc5941_channel_t i = (Tlc5941_channel3_t)channel * 3 / 4;
	switch (channel % 4) {
		case 0:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x03) | (uint8_t)(value << 2);
    3106:	80 81       	ld	r24, Z
    3108:	83 70       	andi	r24, 0x03	; 3
    310a:	66 0f       	add	r22, r22
    310c:	66 0f       	add	r22, r22
    310e:	13 c0       	rjmp	.+38     	; 0x3136 <Tlc5941_SetDC+0x7c>
			break;
		case 1:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xFC) | (value >> 4);
    3110:	90 81       	ld	r25, Z
    3112:	9c 7f       	andi	r25, 0xFC	; 252
    3114:	26 2f       	mov	r18, r22
    3116:	22 95       	swap	r18
    3118:	2f 70       	andi	r18, 0x0F	; 15
    311a:	92 2b       	or	r25, r18
    311c:	90 83       	st	Z, r25
			i++;
    311e:	8f 5f       	subi	r24, 0xFF	; 255
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x0F) | (uint8_t)(value << 4);
    3120:	e8 2f       	mov	r30, r24
    3122:	f0 e0       	ldi	r31, 0x00	; 0
    3124:	e5 53       	subi	r30, 0x35	; 53
    3126:	fb 4f       	sbci	r31, 0xFB	; 251
    3128:	80 81       	ld	r24, Z
    312a:	8f 70       	andi	r24, 0x0F	; 15
    312c:	62 95       	swap	r22
    312e:	60 7f       	andi	r22, 0xF0	; 240
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <Tlc5941_SetDC+0x7c>
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xF0) | (value >> 2);
			i++;
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0x3F) | (uint8_t)(value << 6);
			break;
		default: // case 3:
			Tlc5941_dcData[i] = (Tlc5941_dcData[i] & 0xC0) | (value);
    3132:	80 81       	ld	r24, Z
    3134:	80 7c       	andi	r24, 0xC0	; 192
    3136:	68 2b       	or	r22, r24
    3138:	60 83       	st	Z, r22
    313a:	08 95       	ret

0000313c <__vector_7>:
#endif // #if (Tlc5941_MANUAL_DC_FUNCS)

#if Tlc5941_TIMER == 0
ISR(TIMER0_COMPA_vect) {
#elif Tlc5941_TIMER == 2
ISR(TIMER2_COMPA_vect) {
    313c:	1f 92       	push	r1
    313e:	0f 92       	push	r0
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	0f 92       	push	r0
    3144:	11 24       	eor	r1, r1
    3146:	8f 93       	push	r24
    3148:	9f 93       	push	r25
    314a:	ef 93       	push	r30
    314c:	ff 93       	push	r31
#endif
	static uint8_t xlatNeedsPulse = 0;
	
	Tlc5941_setHigh(Tlc5941_BLANK_PORT, Tlc5941_BLANK_PIN);
    314e:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Make TLC load new values
	if (xlatNeedsPulse) {
    3150:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <xlatNeedsPulse.1853>
    3154:	88 23       	and	r24, r24
    3156:	21 f0       	breq	.+8      	; 0x3160 <__vector_7+0x24>
		Tlc5941_pulse(Tlc5941_XLAT_PORT, Tlc5941_XLAT_PIN);
    3158:	29 9a       	sbi	0x05, 1	; 5
    315a:	29 98       	cbi	0x05, 1	; 5
		xlatNeedsPulse = 0;
    315c:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <xlatNeedsPulse.1853>
	}
	
	if (Tlc5941_outputState(Tlc5941_MODE_PORT, Tlc5941_MODE_PIN)) {
    3160:	5a 9b       	sbis	0x0b, 2	; 11
    3162:	03 c0       	rjmp	.+6      	; 0x316a <__vector_7+0x2e>
		// Dot correction mode
		// Change to grayscale mode
		Tlc5941_setLow(Tlc5941_MODE_PORT, Tlc5941_MODE_PIN);
    3164:	5a 98       	cbi	0x0b, 2	; 11
		// Send one additional SPI clock signal
		Tlc5941_pulse(Tlc5941_SCLK_PORT, Tlc5941_SCLK_PIN);
    3166:	5c 9a       	sbi	0x0b, 4	; 11
    3168:	5c 98       	cbi	0x0b, 4	; 11
	}
	
	Tlc5941_setLow(Tlc5941_BLANK_PORT, Tlc5941_BLANK_PIN);
    316a:	5b 98       	cbi	0x0b, 3	; 11

	// Send dot correction data if dcUpdateFlag is set
	if (Tlc5941_dcUpdateFlag) {
    316c:	80 91 ef 04 	lds	r24, 0x04EF	; 0x8004ef <Tlc5941_dcUpdateFlag>
    3170:	88 23       	and	r24, r24
    3172:	d1 f0       	breq	.+52     	; 0x31a8 <__vector_7+0x6c>
		// Change mode to DC
		Tlc5941_setHigh(Tlc5941_MODE_PORT, Tlc5941_MODE_PIN);
    3174:	5a 9a       	sbi	0x0b, 2	; 11
			SPDR = 0;
			// Wait for transmission complete
			while (!(SPSR & (1 << SPIF)));
		#else // Use USART in SPI mode
			// Start transmission
			UDR0 = 0;
    3176:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			// Wait for transmission complete
			while (!(UCSR0A & (1 << UDRE0)));
    317a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    317e:	85 ff       	sbrs	r24, 5
    3180:	fc cf       	rjmp	.-8      	; 0x317a <__vector_7+0x3e>
    3182:	eb ec       	ldi	r30, 0xCB	; 203
    3184:	f4 e0       	ldi	r31, 0x04	; 4
    3186:	84 e2       	ldi	r24, 0x24	; 36
    3188:	8e 0f       	add	r24, r30
				SPDR = Tlc5941_dcData[i];
				// Wait for transmission complete
				while (!(SPSR & (1 << SPIF)));
			#else // Use USART in SPI mode
				// Start transmission
				UDR0 = Tlc5941_dcData[i];
    318a:	91 91       	ld	r25, Z+
    318c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
				// Wait for transmission complete
				while (!(UCSR0A & (1 << UDRE0)));
    3190:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3194:	95 ff       	sbrs	r25, 5
    3196:	fc cf       	rjmp	.-8      	; 0x3190 <__vector_7+0x54>
			// Wait for transmission complete
			while (!(UCSR0A & (1 << UDRE0)));
		#endif

		// Perform data transmission
		for (Tlc5941_dcData_t i = 0; i < Tlc5941_dcDataSize; i++) {
    3198:	8e 13       	cpse	r24, r30
    319a:	f7 cf       	rjmp	.-18     	; 0x318a <__vector_7+0x4e>
				// Wait for transmission complete
				while (!(UCSR0A & (1 << UDRE0)));
			#endif
		}
		
		xlatNeedsPulse = 1;
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xlatNeedsPulse.1853>
		Tlc5941_dcUpdateFlag = 0;
    31a2:	10 92 ef 04 	sts	0x04EF, r1	; 0x8004ef <Tlc5941_dcUpdateFlag>
    31a6:	16 c0       	rjmp	.+44     	; 0x31d4 <__vector_7+0x98>
	}
	// Send grayscale data if gsUpdateFlag is set
	else if (Tlc5941_gsUpdateFlag) {
    31a8:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <Tlc5941_gsUpdateFlag>
    31ac:	88 23       	and	r24, r24
    31ae:	91 f0       	breq	.+36     	; 0x31d4 <__vector_7+0x98>
    31b0:	e1 ef       	ldi	r30, 0xF1	; 241
    31b2:	f4 e0       	ldi	r31, 0x04	; 4
    31b4:	88 e4       	ldi	r24, 0x48	; 72
    31b6:	8e 0f       	add	r24, r30
		for (Tlc5941_gsData_t i = 0; i < Tlc5941_gsDataSize; i++) {
			#if Tlc5941_USART_SPI == 0 // Use SPI module
				SPDR = Tlc5941_gsData[i];
				while (!(SPSR & (1 << SPIF)));
			#else // Use USART in SPI mode
				UDR0 = Tlc5941_gsData[i];
    31b8:	91 91       	ld	r25, Z+
    31ba:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
				while (!(UCSR0A & (1 << UDRE0)));
    31be:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    31c2:	95 ff       	sbrs	r25, 5
    31c4:	fc cf       	rjmp	.-8      	; 0x31be <__vector_7+0x82>
		Tlc5941_dcUpdateFlag = 0;
	}
	// Send grayscale data if gsUpdateFlag is set
	else if (Tlc5941_gsUpdateFlag) {
		// Below this we have 4096 cycles to shift in the data for the next cycle
		for (Tlc5941_gsData_t i = 0; i < Tlc5941_gsDataSize; i++) {
    31c6:	8e 13       	cpse	r24, r30
    31c8:	f7 cf       	rjmp	.-18     	; 0x31b8 <__vector_7+0x7c>
			#else // Use USART in SPI mode
				UDR0 = Tlc5941_gsData[i];
				while (!(UCSR0A & (1 << UDRE0)));
			#endif
		}
		xlatNeedsPulse = 1;
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <xlatNeedsPulse.1853>
		Tlc5941_gsUpdateFlag = 0;
    31d0:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <Tlc5941_gsUpdateFlag>
	}
    31d4:	ff 91       	pop	r31
    31d6:	ef 91       	pop	r30
    31d8:	9f 91       	pop	r25
    31da:	8f 91       	pop	r24
    31dc:	0f 90       	pop	r0
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	0f 90       	pop	r0
    31e2:	1f 90       	pop	r1
    31e4:	18 95       	reti

000031e6 <__fixunssfsi>:
    31e6:	0e 94 67 19 	call	0x32ce	; 0x32ce <__fp_splitA>
    31ea:	88 f0       	brcs	.+34     	; 0x320e <__fixunssfsi+0x28>
    31ec:	9f 57       	subi	r25, 0x7F	; 127
    31ee:	98 f0       	brcs	.+38     	; 0x3216 <__fixunssfsi+0x30>
    31f0:	b9 2f       	mov	r27, r25
    31f2:	99 27       	eor	r25, r25
    31f4:	b7 51       	subi	r27, 0x17	; 23
    31f6:	b0 f0       	brcs	.+44     	; 0x3224 <__fixunssfsi+0x3e>
    31f8:	e1 f0       	breq	.+56     	; 0x3232 <__fixunssfsi+0x4c>
    31fa:	66 0f       	add	r22, r22
    31fc:	77 1f       	adc	r23, r23
    31fe:	88 1f       	adc	r24, r24
    3200:	99 1f       	adc	r25, r25
    3202:	1a f0       	brmi	.+6      	; 0x320a <__fixunssfsi+0x24>
    3204:	ba 95       	dec	r27
    3206:	c9 f7       	brne	.-14     	; 0x31fa <__fixunssfsi+0x14>
    3208:	14 c0       	rjmp	.+40     	; 0x3232 <__fixunssfsi+0x4c>
    320a:	b1 30       	cpi	r27, 0x01	; 1
    320c:	91 f0       	breq	.+36     	; 0x3232 <__fixunssfsi+0x4c>
    320e:	0e 94 81 19 	call	0x3302	; 0x3302 <__fp_zero>
    3212:	b1 e0       	ldi	r27, 0x01	; 1
    3214:	08 95       	ret
    3216:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__fp_zero>
    321a:	67 2f       	mov	r22, r23
    321c:	78 2f       	mov	r23, r24
    321e:	88 27       	eor	r24, r24
    3220:	b8 5f       	subi	r27, 0xF8	; 248
    3222:	39 f0       	breq	.+14     	; 0x3232 <__fixunssfsi+0x4c>
    3224:	b9 3f       	cpi	r27, 0xF9	; 249
    3226:	cc f3       	brlt	.-14     	; 0x321a <__fixunssfsi+0x34>
    3228:	86 95       	lsr	r24
    322a:	77 95       	ror	r23
    322c:	67 95       	ror	r22
    322e:	b3 95       	inc	r27
    3230:	d9 f7       	brne	.-10     	; 0x3228 <__fixunssfsi+0x42>
    3232:	3e f4       	brtc	.+14     	; 0x3242 <__fixunssfsi+0x5c>
    3234:	90 95       	com	r25
    3236:	80 95       	com	r24
    3238:	70 95       	com	r23
    323a:	61 95       	neg	r22
    323c:	7f 4f       	sbci	r23, 0xFF	; 255
    323e:	8f 4f       	sbci	r24, 0xFF	; 255
    3240:	9f 4f       	sbci	r25, 0xFF	; 255
    3242:	08 95       	ret

00003244 <__floatunsisf>:
    3244:	e8 94       	clt
    3246:	09 c0       	rjmp	.+18     	; 0x325a <__floatsisf+0x12>

00003248 <__floatsisf>:
    3248:	97 fb       	bst	r25, 7
    324a:	3e f4       	brtc	.+14     	; 0x325a <__floatsisf+0x12>
    324c:	90 95       	com	r25
    324e:	80 95       	com	r24
    3250:	70 95       	com	r23
    3252:	61 95       	neg	r22
    3254:	7f 4f       	sbci	r23, 0xFF	; 255
    3256:	8f 4f       	sbci	r24, 0xFF	; 255
    3258:	9f 4f       	sbci	r25, 0xFF	; 255
    325a:	99 23       	and	r25, r25
    325c:	a9 f0       	breq	.+42     	; 0x3288 <__floatsisf+0x40>
    325e:	f9 2f       	mov	r31, r25
    3260:	96 e9       	ldi	r25, 0x96	; 150
    3262:	bb 27       	eor	r27, r27
    3264:	93 95       	inc	r25
    3266:	f6 95       	lsr	r31
    3268:	87 95       	ror	r24
    326a:	77 95       	ror	r23
    326c:	67 95       	ror	r22
    326e:	b7 95       	ror	r27
    3270:	f1 11       	cpse	r31, r1
    3272:	f8 cf       	rjmp	.-16     	; 0x3264 <__floatsisf+0x1c>
    3274:	fa f4       	brpl	.+62     	; 0x32b4 <__floatsisf+0x6c>
    3276:	bb 0f       	add	r27, r27
    3278:	11 f4       	brne	.+4      	; 0x327e <__floatsisf+0x36>
    327a:	60 ff       	sbrs	r22, 0
    327c:	1b c0       	rjmp	.+54     	; 0x32b4 <__floatsisf+0x6c>
    327e:	6f 5f       	subi	r22, 0xFF	; 255
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	8f 4f       	sbci	r24, 0xFF	; 255
    3284:	9f 4f       	sbci	r25, 0xFF	; 255
    3286:	16 c0       	rjmp	.+44     	; 0x32b4 <__floatsisf+0x6c>
    3288:	88 23       	and	r24, r24
    328a:	11 f0       	breq	.+4      	; 0x3290 <__floatsisf+0x48>
    328c:	96 e9       	ldi	r25, 0x96	; 150
    328e:	11 c0       	rjmp	.+34     	; 0x32b2 <__floatsisf+0x6a>
    3290:	77 23       	and	r23, r23
    3292:	21 f0       	breq	.+8      	; 0x329c <__floatsisf+0x54>
    3294:	9e e8       	ldi	r25, 0x8E	; 142
    3296:	87 2f       	mov	r24, r23
    3298:	76 2f       	mov	r23, r22
    329a:	05 c0       	rjmp	.+10     	; 0x32a6 <__floatsisf+0x5e>
    329c:	66 23       	and	r22, r22
    329e:	71 f0       	breq	.+28     	; 0x32bc <__floatsisf+0x74>
    32a0:	96 e8       	ldi	r25, 0x86	; 134
    32a2:	86 2f       	mov	r24, r22
    32a4:	70 e0       	ldi	r23, 0x00	; 0
    32a6:	60 e0       	ldi	r22, 0x00	; 0
    32a8:	2a f0       	brmi	.+10     	; 0x32b4 <__floatsisf+0x6c>
    32aa:	9a 95       	dec	r25
    32ac:	66 0f       	add	r22, r22
    32ae:	77 1f       	adc	r23, r23
    32b0:	88 1f       	adc	r24, r24
    32b2:	da f7       	brpl	.-10     	; 0x32aa <__floatsisf+0x62>
    32b4:	88 0f       	add	r24, r24
    32b6:	96 95       	lsr	r25
    32b8:	87 95       	ror	r24
    32ba:	97 f9       	bld	r25, 7
    32bc:	08 95       	ret

000032be <__fp_split3>:
    32be:	57 fd       	sbrc	r21, 7
    32c0:	90 58       	subi	r25, 0x80	; 128
    32c2:	44 0f       	add	r20, r20
    32c4:	55 1f       	adc	r21, r21
    32c6:	59 f0       	breq	.+22     	; 0x32de <__fp_splitA+0x10>
    32c8:	5f 3f       	cpi	r21, 0xFF	; 255
    32ca:	71 f0       	breq	.+28     	; 0x32e8 <__fp_splitA+0x1a>
    32cc:	47 95       	ror	r20

000032ce <__fp_splitA>:
    32ce:	88 0f       	add	r24, r24
    32d0:	97 fb       	bst	r25, 7
    32d2:	99 1f       	adc	r25, r25
    32d4:	61 f0       	breq	.+24     	; 0x32ee <__fp_splitA+0x20>
    32d6:	9f 3f       	cpi	r25, 0xFF	; 255
    32d8:	79 f0       	breq	.+30     	; 0x32f8 <__fp_splitA+0x2a>
    32da:	87 95       	ror	r24
    32dc:	08 95       	ret
    32de:	12 16       	cp	r1, r18
    32e0:	13 06       	cpc	r1, r19
    32e2:	14 06       	cpc	r1, r20
    32e4:	55 1f       	adc	r21, r21
    32e6:	f2 cf       	rjmp	.-28     	; 0x32cc <__fp_split3+0xe>
    32e8:	46 95       	lsr	r20
    32ea:	f1 df       	rcall	.-30     	; 0x32ce <__fp_splitA>
    32ec:	08 c0       	rjmp	.+16     	; 0x32fe <__fp_splitA+0x30>
    32ee:	16 16       	cp	r1, r22
    32f0:	17 06       	cpc	r1, r23
    32f2:	18 06       	cpc	r1, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	f1 cf       	rjmp	.-30     	; 0x32da <__fp_splitA+0xc>
    32f8:	86 95       	lsr	r24
    32fa:	71 05       	cpc	r23, r1
    32fc:	61 05       	cpc	r22, r1
    32fe:	08 94       	sec
    3300:	08 95       	ret

00003302 <__fp_zero>:
    3302:	e8 94       	clt

00003304 <__fp_szero>:
    3304:	bb 27       	eor	r27, r27
    3306:	66 27       	eor	r22, r22
    3308:	77 27       	eor	r23, r23
    330a:	cb 01       	movw	r24, r22
    330c:	97 f9       	bld	r25, 7
    330e:	08 95       	ret

00003310 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3310:	1f 92       	push	r1
    3312:	0f 92       	push	r0
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	0f 92       	push	r0
    3318:	11 24       	eor	r1, r1
    331a:	2f 93       	push	r18
    331c:	3f 93       	push	r19
    331e:	8f 93       	push	r24
    3320:	9f 93       	push	r25
    3322:	af 93       	push	r26
    3324:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3326:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <timer0_millis>
    332a:	90 91 0f 04 	lds	r25, 0x040F	; 0x80040f <timer0_millis+0x1>
    332e:	a0 91 10 04 	lds	r26, 0x0410	; 0x800410 <timer0_millis+0x2>
    3332:	b0 91 11 04 	lds	r27, 0x0411	; 0x800411 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3336:	30 91 0d 04 	lds	r19, 0x040D	; 0x80040d <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    333a:	23 e0       	ldi	r18, 0x03	; 3
    333c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    333e:	2d 37       	cpi	r18, 0x7D	; 125
    3340:	20 f4       	brcc	.+8      	; 0x334a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3342:	01 96       	adiw	r24, 0x01	; 1
    3344:	a1 1d       	adc	r26, r1
    3346:	b1 1d       	adc	r27, r1
    3348:	05 c0       	rjmp	.+10     	; 0x3354 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    334a:	26 e8       	ldi	r18, 0x86	; 134
    334c:	23 0f       	add	r18, r19
		m += 1;
    334e:	02 96       	adiw	r24, 0x02	; 2
    3350:	a1 1d       	adc	r26, r1
    3352:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3354:	20 93 0d 04 	sts	0x040D, r18	; 0x80040d <timer0_fract>
	timer0_millis = m;
    3358:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <timer0_millis>
    335c:	90 93 0f 04 	sts	0x040F, r25	; 0x80040f <timer0_millis+0x1>
    3360:	a0 93 10 04 	sts	0x0410, r26	; 0x800410 <timer0_millis+0x2>
    3364:	b0 93 11 04 	sts	0x0411, r27	; 0x800411 <timer0_millis+0x3>
	timer0_overflow_count++;
    3368:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <timer0_overflow_count>
    336c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <timer0_overflow_count+0x1>
    3370:	a0 91 14 04 	lds	r26, 0x0414	; 0x800414 <timer0_overflow_count+0x2>
    3374:	b0 91 15 04 	lds	r27, 0x0415	; 0x800415 <timer0_overflow_count+0x3>
    3378:	01 96       	adiw	r24, 0x01	; 1
    337a:	a1 1d       	adc	r26, r1
    337c:	b1 1d       	adc	r27, r1
    337e:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <timer0_overflow_count>
    3382:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <timer0_overflow_count+0x1>
    3386:	a0 93 14 04 	sts	0x0414, r26	; 0x800414 <timer0_overflow_count+0x2>
    338a:	b0 93 15 04 	sts	0x0415, r27	; 0x800415 <timer0_overflow_count+0x3>
}
    338e:	bf 91       	pop	r27
    3390:	af 91       	pop	r26
    3392:	9f 91       	pop	r25
    3394:	8f 91       	pop	r24
    3396:	3f 91       	pop	r19
    3398:	2f 91       	pop	r18
    339a:	0f 90       	pop	r0
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	0f 90       	pop	r0
    33a0:	1f 90       	pop	r1
    33a2:	18 95       	reti

000033a4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    33a4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    33a6:	f8 94       	cli
	m = timer0_millis;
    33a8:	60 91 0e 04 	lds	r22, 0x040E	; 0x80040e <timer0_millis>
    33ac:	70 91 0f 04 	lds	r23, 0x040F	; 0x80040f <timer0_millis+0x1>
    33b0:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <timer0_millis+0x2>
    33b4:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <timer0_millis+0x3>
	SREG = oldSREG;
    33b8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    33ba:	08 95       	ret

000033bc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    33bc:	83 30       	cpi	r24, 0x03	; 3
    33be:	81 f0       	breq	.+32     	; 0x33e0 <turnOffPWM+0x24>
    33c0:	28 f4       	brcc	.+10     	; 0x33cc <turnOffPWM+0x10>
    33c2:	81 30       	cpi	r24, 0x01	; 1
    33c4:	99 f0       	breq	.+38     	; 0x33ec <turnOffPWM+0x30>
    33c6:	82 30       	cpi	r24, 0x02	; 2
    33c8:	a1 f0       	breq	.+40     	; 0x33f2 <turnOffPWM+0x36>
    33ca:	08 95       	ret
    33cc:	87 30       	cpi	r24, 0x07	; 7
    33ce:	a9 f0       	breq	.+42     	; 0x33fa <turnOffPWM+0x3e>
    33d0:	88 30       	cpi	r24, 0x08	; 8
    33d2:	b9 f0       	breq	.+46     	; 0x3402 <turnOffPWM+0x46>
    33d4:	84 30       	cpi	r24, 0x04	; 4
    33d6:	d1 f4       	brne	.+52     	; 0x340c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    33d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    33dc:	8f 7d       	andi	r24, 0xDF	; 223
    33de:	03 c0       	rjmp	.+6      	; 0x33e6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    33e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    33e4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    33e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    33ea:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    33ec:	84 b5       	in	r24, 0x24	; 36
    33ee:	8f 77       	andi	r24, 0x7F	; 127
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    33f2:	84 b5       	in	r24, 0x24	; 36
    33f4:	8f 7d       	andi	r24, 0xDF	; 223
    33f6:	84 bd       	out	0x24, r24	; 36
    33f8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    33fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    33fe:	8f 77       	andi	r24, 0x7F	; 127
    3400:	03 c0       	rjmp	.+6      	; 0x3408 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    3402:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3406:	8f 7d       	andi	r24, 0xDF	; 223
    3408:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    340c:	08 95       	ret

0000340e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    340e:	cf 93       	push	r28
    3410:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	fc 01       	movw	r30, r24
    3416:	e4 53       	subi	r30, 0x34	; 52
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    341c:	fc 01       	movw	r30, r24
    341e:	e0 52       	subi	r30, 0x20	; 32
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    3424:	88 23       	and	r24, r24
    3426:	49 f1       	breq	.+82     	; 0x347a <pinMode+0x6c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	88 0f       	add	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	fc 01       	movw	r30, r24
    3430:	e2 50       	subi	r30, 0x02	; 2
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	a5 91       	lpm	r26, Z+
    3436:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    3438:	8c 50       	subi	r24, 0x0C	; 12
    343a:	9f 4f       	sbci	r25, 0xFF	; 255
    343c:	fc 01       	movw	r30, r24
    343e:	c5 91       	lpm	r28, Z+
    3440:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    3442:	9f b7       	in	r25, 0x3f	; 63

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
	out = portOutputRegister(port);

	if (mode == INPUT) { 
    3444:	61 11       	cpse	r22, r1
    3446:	08 c0       	rjmp	.+16     	; 0x3458 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
                cli();
    3448:	f8 94       	cli
		*reg &= ~bit;
    344a:	8c 91       	ld	r24, X
    344c:	20 95       	com	r18
    344e:	82 23       	and	r24, r18
    3450:	8c 93       	st	X, r24
		*out &= ~bit;
    3452:	88 81       	ld	r24, Y
    3454:	82 23       	and	r24, r18
    3456:	0a c0       	rjmp	.+20     	; 0x346c <pinMode+0x5e>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    3458:	62 30       	cpi	r22, 0x02	; 2
    345a:	51 f4       	brne	.+20     	; 0x3470 <pinMode+0x62>
		uint8_t oldSREG = SREG;
                cli();
    345c:	f8 94       	cli
		*reg &= ~bit;
    345e:	8c 91       	ld	r24, X
    3460:	32 2f       	mov	r19, r18
    3462:	30 95       	com	r19
    3464:	83 23       	and	r24, r19
    3466:	8c 93       	st	X, r24
		*out |= bit;
    3468:	88 81       	ld	r24, Y
    346a:	82 2b       	or	r24, r18
    346c:	88 83       	st	Y, r24
    346e:	04 c0       	rjmp	.+8      	; 0x3478 <pinMode+0x6a>
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
                cli();
    3470:	f8 94       	cli
		*reg |= bit;
    3472:	8c 91       	ld	r24, X
    3474:	82 2b       	or	r24, r18
    3476:	8c 93       	st	X, r24
		SREG = oldSREG;
    3478:	9f bf       	out	0x3f, r25	; 63
	}
}
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	08 95       	ret

00003480 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3480:	0f 93       	push	r16
    3482:	1f 93       	push	r17
    3484:	cf 93       	push	r28
    3486:	df 93       	push	r29
    3488:	1f 92       	push	r1
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    348e:	28 2f       	mov	r18, r24
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	f9 01       	movw	r30, r18
    3494:	e8 54       	subi	r30, 0x48	; 72
    3496:	ff 4f       	sbci	r31, 0xFF	; 255
    3498:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    349a:	f9 01       	movw	r30, r18
    349c:	e4 53       	subi	r30, 0x34	; 52
    349e:	ff 4f       	sbci	r31, 0xFF	; 255
    34a0:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    34a2:	f9 01       	movw	r30, r18
    34a4:	e0 52       	subi	r30, 0x20	; 32
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    34aa:	00 23       	and	r16, r16
    34ac:	c9 f0       	breq	.+50     	; 0x34e0 <digitalWrite+0x60>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    34ae:	88 23       	and	r24, r24
    34b0:	21 f0       	breq	.+8      	; 0x34ba <digitalWrite+0x3a>
    34b2:	69 83       	std	Y+1, r22	; 0x01
    34b4:	0e 94 de 19 	call	0x33bc	; 0x33bc <turnOffPWM>
    34b8:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    34ba:	e0 2f       	mov	r30, r16
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	ee 0f       	add	r30, r30
    34c0:	ff 1f       	adc	r31, r31
    34c2:	ec 50       	subi	r30, 0x0C	; 12
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	a5 91       	lpm	r26, Z+
    34c8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    34ca:	9f b7       	in	r25, 0x3f	; 63
	cli();
    34cc:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    34ce:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    34d0:	61 11       	cpse	r22, r1
    34d2:	03 c0       	rjmp	.+6      	; 0x34da <digitalWrite+0x5a>
		*out &= ~bit;
    34d4:	10 95       	com	r17
    34d6:	81 23       	and	r24, r17
    34d8:	01 c0       	rjmp	.+2      	; 0x34dc <digitalWrite+0x5c>
	} else {
		*out |= bit;
    34da:	81 2b       	or	r24, r17
    34dc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    34de:	9f bf       	out	0x3f, r25	; 63
}
    34e0:	0f 90       	pop	r0
    34e2:	df 91       	pop	r29
    34e4:	cf 91       	pop	r28
    34e6:	1f 91       	pop	r17
    34e8:	0f 91       	pop	r16
    34ea:	08 95       	ret

000034ec <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    34ec:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    34ee:	81 8d       	ldd	r24, Z+25	; 0x19
    34f0:	22 8d       	ldd	r18, Z+26	; 0x1a
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	80 5c       	subi	r24, 0xC0	; 192
    34f6:	9f 4f       	sbci	r25, 0xFF	; 255
    34f8:	82 1b       	sub	r24, r18
    34fa:	91 09       	sbc	r25, r1
}
    34fc:	8f 73       	andi	r24, 0x3F	; 63
    34fe:	99 27       	eor	r25, r25
    3500:	08 95       	ret

00003502 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    3502:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    3504:	91 8d       	ldd	r25, Z+25	; 0x19
    3506:	82 8d       	ldd	r24, Z+26	; 0x1a
    3508:	98 17       	cp	r25, r24
    350a:	31 f0       	breq	.+12     	; 0x3518 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    350c:	82 8d       	ldd	r24, Z+26	; 0x1a
    350e:	e8 0f       	add	r30, r24
    3510:	f1 1d       	adc	r31, r1
    3512:	85 8d       	ldd	r24, Z+29	; 0x1d
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3518:	8f ef       	ldi	r24, 0xFF	; 255
    351a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    351c:	08 95       	ret

0000351e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    351e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3520:	91 8d       	ldd	r25, Z+25	; 0x19
    3522:	82 8d       	ldd	r24, Z+26	; 0x1a
    3524:	98 17       	cp	r25, r24
    3526:	61 f0       	breq	.+24     	; 0x3540 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3528:	82 8d       	ldd	r24, Z+26	; 0x1a
    352a:	df 01       	movw	r26, r30
    352c:	a8 0f       	add	r26, r24
    352e:	b1 1d       	adc	r27, r1
    3530:	5d 96       	adiw	r26, 0x1d	; 29
    3532:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3534:	92 8d       	ldd	r25, Z+26	; 0x1a
    3536:	9f 5f       	subi	r25, 0xFF	; 255
    3538:	9f 73       	andi	r25, 0x3F	; 63
    353a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3540:	8f ef       	ldi	r24, 0xFF	; 255
    3542:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3544:	08 95       	ret

00003546 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3546:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3548:	84 8d       	ldd	r24, Z+28	; 0x1c
    354a:	df 01       	movw	r26, r30
    354c:	a8 0f       	add	r26, r24
    354e:	b1 1d       	adc	r27, r1
    3550:	a3 5a       	subi	r26, 0xA3	; 163
    3552:	bf 4f       	sbci	r27, 0xFF	; 255
    3554:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3556:	84 8d       	ldd	r24, Z+28	; 0x1c
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	01 96       	adiw	r24, 0x01	; 1
    355c:	8f 73       	andi	r24, 0x3F	; 63
    355e:	99 27       	eor	r25, r25
    3560:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    3562:	a6 89       	ldd	r26, Z+22	; 0x16
    3564:	b7 89       	ldd	r27, Z+23	; 0x17
    3566:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    3568:	a0 89       	ldd	r26, Z+16	; 0x10
    356a:	b1 89       	ldd	r27, Z+17	; 0x11
    356c:	8c 91       	ld	r24, X
    356e:	80 64       	ori	r24, 0x40	; 64
    3570:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    3572:	93 8d       	ldd	r25, Z+27	; 0x1b
    3574:	84 8d       	ldd	r24, Z+28	; 0x1c
    3576:	98 13       	cpse	r25, r24
    3578:	06 c0       	rjmp	.+12     	; 0x3586 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    357a:	02 88       	ldd	r0, Z+18	; 0x12
    357c:	f3 89       	ldd	r31, Z+19	; 0x13
    357e:	e0 2d       	mov	r30, r0
    3580:	80 81       	ld	r24, Z
    3582:	8f 7d       	andi	r24, 0xDF	; 223
    3584:	80 83       	st	Z, r24
    3586:	08 95       	ret

00003588 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    3588:	cf 93       	push	r28
    358a:	df 93       	push	r29
    358c:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    358e:	88 8d       	ldd	r24, Y+24	; 0x18
    3590:	88 23       	and	r24, r24
    3592:	c9 f0       	breq	.+50     	; 0x35c6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    3594:	ea 89       	ldd	r30, Y+18	; 0x12
    3596:	fb 89       	ldd	r31, Y+19	; 0x13
    3598:	80 81       	ld	r24, Z
    359a:	85 fd       	sbrc	r24, 5
    359c:	05 c0       	rjmp	.+10     	; 0x35a8 <_ZN14HardwareSerial5flushEv+0x20>
    359e:	a8 89       	ldd	r26, Y+16	; 0x10
    35a0:	b9 89       	ldd	r27, Y+17	; 0x11
    35a2:	8c 91       	ld	r24, X
    35a4:	86 fd       	sbrc	r24, 6
    35a6:	0f c0       	rjmp	.+30     	; 0x35c6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    35a8:	0f b6       	in	r0, 0x3f	; 63
    35aa:	07 fc       	sbrc	r0, 7
    35ac:	f5 cf       	rjmp	.-22     	; 0x3598 <_ZN14HardwareSerial5flushEv+0x10>
    35ae:	80 81       	ld	r24, Z
    35b0:	85 ff       	sbrs	r24, 5
    35b2:	f2 cf       	rjmp	.-28     	; 0x3598 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    35b4:	a8 89       	ldd	r26, Y+16	; 0x10
    35b6:	b9 89       	ldd	r27, Y+17	; 0x11
    35b8:	8c 91       	ld	r24, X
    35ba:	85 ff       	sbrs	r24, 5
    35bc:	ed cf       	rjmp	.-38     	; 0x3598 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    35be:	ce 01       	movw	r24, r28
    35c0:	0e 94 a3 1a 	call	0x3546	; 0x3546 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    35c4:	e7 cf       	rjmp	.-50     	; 0x3594 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    35c6:	df 91       	pop	r29
    35c8:	cf 91       	pop	r28
    35ca:	08 95       	ret

000035cc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    35cc:	cf 92       	push	r12
    35ce:	df 92       	push	r13
    35d0:	ff 92       	push	r15
    35d2:	0f 93       	push	r16
    35d4:	1f 93       	push	r17
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	1f 92       	push	r1
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	6c 01       	movw	r12, r24
  _written = true;
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	d6 01       	movw	r26, r12
    35e6:	58 96       	adiw	r26, 0x18	; 24
    35e8:	8c 93       	st	X, r24
    35ea:	58 97       	sbiw	r26, 0x18	; 24
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    35ec:	5b 96       	adiw	r26, 0x1b	; 27
    35ee:	9c 91       	ld	r25, X
    35f0:	5b 97       	sbiw	r26, 0x1b	; 27
    35f2:	5c 96       	adiw	r26, 0x1c	; 28
    35f4:	8c 91       	ld	r24, X
    35f6:	5c 97       	sbiw	r26, 0x1c	; 28
    35f8:	98 13       	cpse	r25, r24
    35fa:	07 c0       	rjmp	.+14     	; 0x360a <_ZN14HardwareSerial5writeEh+0x3e>
    35fc:	50 96       	adiw	r26, 0x10	; 16
    35fe:	ed 91       	ld	r30, X+
    3600:	fc 91       	ld	r31, X
    3602:	51 97       	sbiw	r26, 0x11	; 17
    3604:	80 81       	ld	r24, Z
    3606:	85 fd       	sbrc	r24, 5
    3608:	2e c0       	rjmp	.+92     	; 0x3666 <_ZN14HardwareSerial5writeEh+0x9a>
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    360a:	f6 01       	movw	r30, r12
    360c:	03 8d       	ldd	r16, Z+27	; 0x1b
    360e:	10 e0       	ldi	r17, 0x00	; 0
    3610:	0f 5f       	subi	r16, 0xFF	; 255
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	0f 73       	andi	r16, 0x3F	; 63
    3616:	11 27       	eor	r17, r17
    3618:	f0 2e       	mov	r15, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    361a:	f6 01       	movw	r30, r12
    361c:	84 8d       	ldd	r24, Z+28	; 0x1c
    361e:	f8 12       	cpse	r15, r24
    3620:	11 c0       	rjmp	.+34     	; 0x3644 <_ZN14HardwareSerial5writeEh+0x78>
    if (bit_is_clear(SREG, SREG_I)) {
    3622:	0f b6       	in	r0, 0x3f	; 63
    3624:	07 fc       	sbrc	r0, 7
    3626:	f9 cf       	rjmp	.-14     	; 0x361a <_ZN14HardwareSerial5writeEh+0x4e>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3628:	d6 01       	movw	r26, r12
    362a:	50 96       	adiw	r26, 0x10	; 16
    362c:	ed 91       	ld	r30, X+
    362e:	fc 91       	ld	r31, X
    3630:	51 97       	sbiw	r26, 0x11	; 17
    3632:	80 81       	ld	r24, Z
    3634:	85 ff       	sbrs	r24, 5
    3636:	f1 cf       	rjmp	.-30     	; 0x361a <_ZN14HardwareSerial5writeEh+0x4e>
	_tx_udr_empty_irq();
    3638:	c6 01       	movw	r24, r12
    363a:	69 83       	std	Y+1, r22	; 0x01
    363c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    3640:	69 81       	ldd	r22, Y+1	; 0x01
    3642:	eb cf       	rjmp	.-42     	; 0x361a <_ZN14HardwareSerial5writeEh+0x4e>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3644:	83 8d       	ldd	r24, Z+27	; 0x1b
    3646:	e8 0f       	add	r30, r24
    3648:	f1 1d       	adc	r31, r1
    364a:	e3 5a       	subi	r30, 0xA3	; 163
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	60 83       	st	Z, r22
  _tx_buffer_head = i;
    3650:	d6 01       	movw	r26, r12
    3652:	5b 96       	adiw	r26, 0x1b	; 27
    3654:	0c 93       	st	X, r16
    3656:	5b 97       	sbiw	r26, 0x1b	; 27
	
  sbi(*_ucsrb, UDRIE0);
    3658:	52 96       	adiw	r26, 0x12	; 18
    365a:	ed 91       	ld	r30, X+
    365c:	fc 91       	ld	r31, X
    365e:	53 97       	sbiw	r26, 0x13	; 19
    3660:	80 81       	ld	r24, Z
    3662:	80 62       	ori	r24, 0x20	; 32
    3664:	0c c0       	rjmp	.+24     	; 0x367e <_ZN14HardwareSerial5writeEh+0xb2>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    3666:	d6 01       	movw	r26, r12
    3668:	56 96       	adiw	r26, 0x16	; 22
    366a:	ed 91       	ld	r30, X+
    366c:	fc 91       	ld	r31, X
    366e:	57 97       	sbiw	r26, 0x17	; 23
    3670:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    3672:	50 96       	adiw	r26, 0x10	; 16
    3674:	ed 91       	ld	r30, X+
    3676:	fc 91       	ld	r31, X
    3678:	51 97       	sbiw	r26, 0x11	; 17
    367a:	80 81       	ld	r24, Z
    367c:	80 64       	ori	r24, 0x40	; 64
    367e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	0f 90       	pop	r0
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	ff 90       	pop	r15
    3690:	df 90       	pop	r13
    3692:	cf 90       	pop	r12
    3694:	08 95       	ret

00003696 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3696:	1f 92       	push	r1
    3698:	0f 92       	push	r0
    369a:	0f b6       	in	r0, 0x3f	; 63
    369c:	0f 92       	push	r0
    369e:	11 24       	eor	r1, r1
    36a0:	2f 93       	push	r18
    36a2:	8f 93       	push	r24
    36a4:	9f 93       	push	r25
    36a6:	ef 93       	push	r30
    36a8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    36aa:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <Serial+0x10>
    36ae:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <Serial+0x11>
    36b2:	80 81       	ld	r24, Z
    36b4:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <Serial+0x16>
    36b8:	f0 91 2d 04 	lds	r31, 0x042D	; 0x80042d <Serial+0x17>
    36bc:	82 fd       	sbrc	r24, 2
    36be:	12 c0       	rjmp	.+36     	; 0x36e4 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    36c0:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    36c2:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <Serial+0x19>
    36c6:	8f 5f       	subi	r24, 0xFF	; 255
    36c8:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    36ca:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <Serial+0x1a>
    36ce:	82 17       	cp	r24, r18
    36d0:	51 f0       	breq	.+20     	; 0x36e6 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    36d2:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <Serial+0x19>
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	ea 5e       	subi	r30, 0xEA	; 234
    36da:	fb 4f       	sbci	r31, 0xFB	; 251
    36dc:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    36de:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <Serial+0x19>
    36e2:	01 c0       	rjmp	.+2      	; 0x36e6 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    36e4:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    36e6:	ff 91       	pop	r31
    36e8:	ef 91       	pop	r30
    36ea:	9f 91       	pop	r25
    36ec:	8f 91       	pop	r24
    36ee:	2f 91       	pop	r18
    36f0:	0f 90       	pop	r0
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	0f 90       	pop	r0
    36f6:	1f 90       	pop	r1
    36f8:	18 95       	reti

000036fa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    36fa:	1f 92       	push	r1
    36fc:	0f 92       	push	r0
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	0f 92       	push	r0
    3702:	11 24       	eor	r1, r1
    3704:	2f 93       	push	r18
    3706:	3f 93       	push	r19
    3708:	4f 93       	push	r20
    370a:	5f 93       	push	r21
    370c:	6f 93       	push	r22
    370e:	7f 93       	push	r23
    3710:	8f 93       	push	r24
    3712:	9f 93       	push	r25
    3714:	af 93       	push	r26
    3716:	bf 93       	push	r27
    3718:	ef 93       	push	r30
    371a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    371c:	86 e1       	ldi	r24, 0x16	; 22
    371e:	94 e0       	ldi	r25, 0x04	; 4
    3720:	0e 94 a3 1a 	call	0x3546	; 0x3546 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    3724:	ff 91       	pop	r31
    3726:	ef 91       	pop	r30
    3728:	bf 91       	pop	r27
    372a:	af 91       	pop	r26
    372c:	9f 91       	pop	r25
    372e:	8f 91       	pop	r24
    3730:	7f 91       	pop	r23
    3732:	6f 91       	pop	r22
    3734:	5f 91       	pop	r21
    3736:	4f 91       	pop	r20
    3738:	3f 91       	pop	r19
    373a:	2f 91       	pop	r18
    373c:	0f 90       	pop	r0
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	0f 90       	pop	r0
    3742:	1f 90       	pop	r1
    3744:	18 95       	reti

00003746 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    3746:	10 92 19 04 	sts	0x0419, r1	; 0x800419 <Serial+0x3>
    374a:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <Serial+0x2>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    374e:	88 ee       	ldi	r24, 0xE8	; 232
    3750:	93 e0       	ldi	r25, 0x03	; 3
    3752:	a0 e0       	ldi	r26, 0x00	; 0
    3754:	b0 e0       	ldi	r27, 0x00	; 0
    3756:	80 93 1a 04 	sts	0x041A, r24	; 0x80041a <Serial+0x4>
    375a:	90 93 1b 04 	sts	0x041B, r25	; 0x80041b <Serial+0x5>
    375e:	a0 93 1c 04 	sts	0x041C, r26	; 0x80041c <Serial+0x6>
    3762:	b0 93 1d 04 	sts	0x041D, r27	; 0x80041d <Serial+0x7>
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3766:	84 e4       	ldi	r24, 0x44	; 68
    3768:	91 e0       	ldi	r25, 0x01	; 1
    376a:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <Serial+0x1>
    376e:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <Serial>
    3772:	85 ec       	ldi	r24, 0xC5	; 197
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <Serial+0xd>
    377a:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <Serial+0xc>
    377e:	84 ec       	ldi	r24, 0xC4	; 196
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <Serial+0xf>
    3786:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <Serial+0xe>
    378a:	80 ec       	ldi	r24, 0xC0	; 192
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <Serial+0x11>
    3792:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <Serial+0x10>
    3796:	81 ec       	ldi	r24, 0xC1	; 193
    3798:	90 e0       	ldi	r25, 0x00	; 0
    379a:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <Serial+0x13>
    379e:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <Serial+0x12>
    37a2:	82 ec       	ldi	r24, 0xC2	; 194
    37a4:	90 e0       	ldi	r25, 0x00	; 0
    37a6:	90 93 2b 04 	sts	0x042B, r25	; 0x80042b <Serial+0x15>
    37aa:	80 93 2a 04 	sts	0x042A, r24	; 0x80042a <Serial+0x14>
    37ae:	86 ec       	ldi	r24, 0xC6	; 198
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <Serial+0x17>
    37b6:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <Serial+0x16>
    37ba:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <Serial+0x19>
    37be:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <Serial+0x1a>
    37c2:	10 92 31 04 	sts	0x0431, r1	; 0x800431 <Serial+0x1b>
    37c6:	10 92 32 04 	sts	0x0432, r1	; 0x800432 <Serial+0x1c>
    37ca:	08 95       	ret

000037cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    37cc:	cf 92       	push	r12
    37ce:	df 92       	push	r13
    37d0:	ef 92       	push	r14
    37d2:	ff 92       	push	r15
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	6c 01       	movw	r12, r24
    37de:	7a 01       	movw	r14, r20
    37e0:	eb 01       	movw	r28, r22
    37e2:	e6 0e       	add	r14, r22
    37e4:	f7 1e       	adc	r15, r23
  size_t n = 0;
    37e6:	00 e0       	ldi	r16, 0x00	; 0
    37e8:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    37ea:	ce 15       	cp	r28, r14
    37ec:	df 05       	cpc	r29, r15
    37ee:	61 f0       	breq	.+24     	; 0x3808 <_ZN5Print5writeEPKhj+0x3c>
    n += write(*buffer++);
    37f0:	69 91       	ld	r22, Y+
    37f2:	d6 01       	movw	r26, r12
    37f4:	ed 91       	ld	r30, X+
    37f6:	fc 91       	ld	r31, X
    37f8:	01 90       	ld	r0, Z+
    37fa:	f0 81       	ld	r31, Z
    37fc:	e0 2d       	mov	r30, r0
    37fe:	c6 01       	movw	r24, r12
    3800:	09 95       	icall
    3802:	08 0f       	add	r16, r24
    3804:	19 1f       	adc	r17, r25
    3806:	f1 cf       	rjmp	.-30     	; 0x37ea <_ZN5Print5writeEPKhj+0x1e>
  }
  return n;
}
    3808:	c8 01       	movw	r24, r16
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	df 90       	pop	r13
    3818:	cf 90       	pop	r12
    381a:	08 95       	ret

0000381c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    3826:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
    382a:	68 87       	std	Y+8, r22	; 0x08
    382c:	79 87       	std	Y+9, r23	; 0x09
    382e:	8a 87       	std	Y+10, r24	; 0x0a
    3830:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
    3832:	e8 81       	ld	r30, Y
    3834:	f9 81       	ldd	r31, Y+1	; 0x01
    3836:	06 80       	ldd	r0, Z+6	; 0x06
    3838:	f7 81       	ldd	r31, Z+7	; 0x07
    383a:	e0 2d       	mov	r30, r0
    383c:	ce 01       	movw	r24, r28
    383e:	09 95       	icall
    if (c >= 0) return c;
    3840:	97 ff       	sbrs	r25, 7
    3842:	15 c0       	rjmp	.+42     	; 0x386e <_ZN6Stream9timedReadEv+0x52>
  } while(millis() - _startMillis < _timeout);
    3844:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <millis>
    3848:	08 85       	ldd	r16, Y+8	; 0x08
    384a:	19 85       	ldd	r17, Y+9	; 0x09
    384c:	2a 85       	ldd	r18, Y+10	; 0x0a
    384e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3850:	60 1b       	sub	r22, r16
    3852:	71 0b       	sbc	r23, r17
    3854:	82 0b       	sbc	r24, r18
    3856:	93 0b       	sbc	r25, r19
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    3858:	0c 81       	ldd	r16, Y+4	; 0x04
    385a:	1d 81       	ldd	r17, Y+5	; 0x05
    385c:	2e 81       	ldd	r18, Y+6	; 0x06
    385e:	3f 81       	ldd	r19, Y+7	; 0x07
    3860:	60 17       	cp	r22, r16
    3862:	71 07       	cpc	r23, r17
    3864:	82 07       	cpc	r24, r18
    3866:	93 07       	cpc	r25, r19
    3868:	20 f3       	brcs	.-56     	; 0x3832 <_ZN6Stream9timedReadEv+0x16>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    386a:	8f ef       	ldi	r24, 0xFF	; 255
    386c:	9f ef       	ldi	r25, 0xFF	; 255
}
    386e:	df 91       	pop	r29
    3870:	cf 91       	pop	r28
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	7c 01       	movw	r14, r24
    388a:	6a 01       	movw	r12, r20
    388c:	eb 01       	movw	r28, r22
  size_t count = 0;
    388e:	00 e0       	ldi	r16, 0x00	; 0
    3890:	10 e0       	ldi	r17, 0x00	; 0
  while (count < length) {
    3892:	0c 15       	cp	r16, r12
    3894:	1d 05       	cpc	r17, r13
    3896:	49 f0       	breq	.+18     	; 0x38aa <_ZN6Stream9readBytesEPcj+0x32>
    int c = timedRead();
    3898:	c7 01       	movw	r24, r14
    389a:	0e 94 0e 1c 	call	0x381c	; 0x381c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    389e:	97 fd       	sbrc	r25, 7
    38a0:	04 c0       	rjmp	.+8      	; 0x38aa <_ZN6Stream9readBytesEPcj+0x32>
    *buffer++ = (char)c;
    38a2:	89 93       	st	Y+, r24
    count++;
    38a4:	0f 5f       	subi	r16, 0xFF	; 255
    38a6:	1f 4f       	sbci	r17, 0xFF	; 255
    38a8:	f4 cf       	rjmp	.-24     	; 0x3892 <_ZN6Stream9readBytesEPcj+0x1a>
  }
  return count;
}
    38aa:	c8 01       	movw	r24, r16
    38ac:	df 91       	pop	r29
    38ae:	cf 91       	pop	r28
    38b0:	1f 91       	pop	r17
    38b2:	0f 91       	pop	r16
    38b4:	ff 90       	pop	r15
    38b6:	ef 90       	pop	r14
    38b8:	df 90       	pop	r13
    38ba:	cf 90       	pop	r12
    38bc:	08 95       	ret

000038be <__mulsi3>:
    38be:	db 01       	movw	r26, r22
    38c0:	8f 93       	push	r24
    38c2:	9f 93       	push	r25
    38c4:	0e 94 97 1c 	call	0x392e	; 0x392e <__muluhisi3>
    38c8:	bf 91       	pop	r27
    38ca:	af 91       	pop	r26
    38cc:	a2 9f       	mul	r26, r18
    38ce:	80 0d       	add	r24, r0
    38d0:	91 1d       	adc	r25, r1
    38d2:	a3 9f       	mul	r26, r19
    38d4:	90 0d       	add	r25, r0
    38d6:	b2 9f       	mul	r27, r18
    38d8:	90 0d       	add	r25, r0
    38da:	11 24       	eor	r1, r1
    38dc:	08 95       	ret

000038de <__udivmodsi4>:
    38de:	a1 e2       	ldi	r26, 0x21	; 33
    38e0:	1a 2e       	mov	r1, r26
    38e2:	aa 1b       	sub	r26, r26
    38e4:	bb 1b       	sub	r27, r27
    38e6:	fd 01       	movw	r30, r26
    38e8:	0d c0       	rjmp	.+26     	; 0x3904 <__udivmodsi4_ep>

000038ea <__udivmodsi4_loop>:
    38ea:	aa 1f       	adc	r26, r26
    38ec:	bb 1f       	adc	r27, r27
    38ee:	ee 1f       	adc	r30, r30
    38f0:	ff 1f       	adc	r31, r31
    38f2:	a2 17       	cp	r26, r18
    38f4:	b3 07       	cpc	r27, r19
    38f6:	e4 07       	cpc	r30, r20
    38f8:	f5 07       	cpc	r31, r21
    38fa:	20 f0       	brcs	.+8      	; 0x3904 <__udivmodsi4_ep>
    38fc:	a2 1b       	sub	r26, r18
    38fe:	b3 0b       	sbc	r27, r19
    3900:	e4 0b       	sbc	r30, r20
    3902:	f5 0b       	sbc	r31, r21

00003904 <__udivmodsi4_ep>:
    3904:	66 1f       	adc	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	88 1f       	adc	r24, r24
    390a:	99 1f       	adc	r25, r25
    390c:	1a 94       	dec	r1
    390e:	69 f7       	brne	.-38     	; 0x38ea <__udivmodsi4_loop>
    3910:	60 95       	com	r22
    3912:	70 95       	com	r23
    3914:	80 95       	com	r24
    3916:	90 95       	com	r25
    3918:	9b 01       	movw	r18, r22
    391a:	ac 01       	movw	r20, r24
    391c:	bd 01       	movw	r22, r26
    391e:	cf 01       	movw	r24, r30
    3920:	08 95       	ret

00003922 <__tablejump2__>:
    3922:	ee 0f       	add	r30, r30
    3924:	ff 1f       	adc	r31, r31
    3926:	05 90       	lpm	r0, Z+
    3928:	f4 91       	lpm	r31, Z
    392a:	e0 2d       	mov	r30, r0
    392c:	09 94       	ijmp

0000392e <__muluhisi3>:
    392e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <__umulhisi3>
    3932:	a5 9f       	mul	r26, r21
    3934:	90 0d       	add	r25, r0
    3936:	b4 9f       	mul	r27, r20
    3938:	90 0d       	add	r25, r0
    393a:	a4 9f       	mul	r26, r20
    393c:	80 0d       	add	r24, r0
    393e:	91 1d       	adc	r25, r1
    3940:	11 24       	eor	r1, r1
    3942:	08 95       	ret

00003944 <__umulhisi3>:
    3944:	a2 9f       	mul	r26, r18
    3946:	b0 01       	movw	r22, r0
    3948:	b3 9f       	mul	r27, r19
    394a:	c0 01       	movw	r24, r0
    394c:	a3 9f       	mul	r26, r19
    394e:	70 0d       	add	r23, r0
    3950:	81 1d       	adc	r24, r1
    3952:	11 24       	eor	r1, r1
    3954:	91 1d       	adc	r25, r1
    3956:	b2 9f       	mul	r27, r18
    3958:	70 0d       	add	r23, r0
    395a:	81 1d       	adc	r24, r1
    395c:	11 24       	eor	r1, r1
    395e:	91 1d       	adc	r25, r1
    3960:	08 95       	ret

00003962 <malloc>:
    3962:	cf 93       	push	r28
    3964:	df 93       	push	r29
    3966:	82 30       	cpi	r24, 0x02	; 2
    3968:	91 05       	cpc	r25, r1
    396a:	10 f4       	brcc	.+4      	; 0x3970 <malloc+0xe>
    396c:	82 e0       	ldi	r24, 0x02	; 2
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	e0 91 3b 05 	lds	r30, 0x053B	; 0x80053b <__flp>
    3974:	f0 91 3c 05 	lds	r31, 0x053C	; 0x80053c <__flp+0x1>
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	c0 e0       	ldi	r28, 0x00	; 0
    397e:	d0 e0       	ldi	r29, 0x00	; 0
    3980:	30 97       	sbiw	r30, 0x00	; 0
    3982:	11 f1       	breq	.+68     	; 0x39c8 <malloc+0x66>
    3984:	40 81       	ld	r20, Z
    3986:	51 81       	ldd	r21, Z+1	; 0x01
    3988:	48 17       	cp	r20, r24
    398a:	59 07       	cpc	r21, r25
    398c:	c0 f0       	brcs	.+48     	; 0x39be <malloc+0x5c>
    398e:	48 17       	cp	r20, r24
    3990:	59 07       	cpc	r21, r25
    3992:	61 f4       	brne	.+24     	; 0x39ac <malloc+0x4a>
    3994:	82 81       	ldd	r24, Z+2	; 0x02
    3996:	93 81       	ldd	r25, Z+3	; 0x03
    3998:	20 97       	sbiw	r28, 0x00	; 0
    399a:	19 f0       	breq	.+6      	; 0x39a2 <malloc+0x40>
    399c:	9b 83       	std	Y+3, r25	; 0x03
    399e:	8a 83       	std	Y+2, r24	; 0x02
    39a0:	2b c0       	rjmp	.+86     	; 0x39f8 <malloc+0x96>
    39a2:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <__flp+0x1>
    39a6:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <__flp>
    39aa:	26 c0       	rjmp	.+76     	; 0x39f8 <malloc+0x96>
    39ac:	21 15       	cp	r18, r1
    39ae:	31 05       	cpc	r19, r1
    39b0:	19 f0       	breq	.+6      	; 0x39b8 <malloc+0x56>
    39b2:	42 17       	cp	r20, r18
    39b4:	53 07       	cpc	r21, r19
    39b6:	18 f4       	brcc	.+6      	; 0x39be <malloc+0x5c>
    39b8:	9a 01       	movw	r18, r20
    39ba:	be 01       	movw	r22, r28
    39bc:	df 01       	movw	r26, r30
    39be:	ef 01       	movw	r28, r30
    39c0:	02 80       	ldd	r0, Z+2	; 0x02
    39c2:	f3 81       	ldd	r31, Z+3	; 0x03
    39c4:	e0 2d       	mov	r30, r0
    39c6:	dc cf       	rjmp	.-72     	; 0x3980 <malloc+0x1e>
    39c8:	21 15       	cp	r18, r1
    39ca:	31 05       	cpc	r19, r1
    39cc:	09 f1       	breq	.+66     	; 0x3a10 <malloc+0xae>
    39ce:	28 1b       	sub	r18, r24
    39d0:	39 0b       	sbc	r19, r25
    39d2:	24 30       	cpi	r18, 0x04	; 4
    39d4:	31 05       	cpc	r19, r1
    39d6:	90 f4       	brcc	.+36     	; 0x39fc <malloc+0x9a>
    39d8:	12 96       	adiw	r26, 0x02	; 2
    39da:	8d 91       	ld	r24, X+
    39dc:	9c 91       	ld	r25, X
    39de:	13 97       	sbiw	r26, 0x03	; 3
    39e0:	61 15       	cp	r22, r1
    39e2:	71 05       	cpc	r23, r1
    39e4:	21 f0       	breq	.+8      	; 0x39ee <malloc+0x8c>
    39e6:	fb 01       	movw	r30, r22
    39e8:	93 83       	std	Z+3, r25	; 0x03
    39ea:	82 83       	std	Z+2, r24	; 0x02
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <malloc+0x94>
    39ee:	90 93 3c 05 	sts	0x053C, r25	; 0x80053c <__flp+0x1>
    39f2:	80 93 3b 05 	sts	0x053B, r24	; 0x80053b <__flp>
    39f6:	fd 01       	movw	r30, r26
    39f8:	32 96       	adiw	r30, 0x02	; 2
    39fa:	44 c0       	rjmp	.+136    	; 0x3a84 <malloc+0x122>
    39fc:	fd 01       	movw	r30, r26
    39fe:	e2 0f       	add	r30, r18
    3a00:	f3 1f       	adc	r31, r19
    3a02:	81 93       	st	Z+, r24
    3a04:	91 93       	st	Z+, r25
    3a06:	22 50       	subi	r18, 0x02	; 2
    3a08:	31 09       	sbc	r19, r1
    3a0a:	2d 93       	st	X+, r18
    3a0c:	3c 93       	st	X, r19
    3a0e:	3a c0       	rjmp	.+116    	; 0x3a84 <malloc+0x122>
    3a10:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <__brkval>
    3a14:	30 91 3a 05 	lds	r19, 0x053A	; 0x80053a <__brkval+0x1>
    3a18:	23 2b       	or	r18, r19
    3a1a:	41 f4       	brne	.+16     	; 0x3a2c <malloc+0xca>
    3a1c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a20:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a24:	30 93 3a 05 	sts	0x053A, r19	; 0x80053a <__brkval+0x1>
    3a28:	20 93 39 05 	sts	0x0539, r18	; 0x800539 <__brkval>
    3a2c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3a30:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a34:	21 15       	cp	r18, r1
    3a36:	31 05       	cpc	r19, r1
    3a38:	41 f4       	brne	.+16     	; 0x3a4a <malloc+0xe8>
    3a3a:	2d b7       	in	r18, 0x3d	; 61
    3a3c:	3e b7       	in	r19, 0x3e	; 62
    3a3e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a42:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a46:	24 1b       	sub	r18, r20
    3a48:	35 0b       	sbc	r19, r21
    3a4a:	e0 91 39 05 	lds	r30, 0x0539	; 0x800539 <__brkval>
    3a4e:	f0 91 3a 05 	lds	r31, 0x053A	; 0x80053a <__brkval+0x1>
    3a52:	e2 17       	cp	r30, r18
    3a54:	f3 07       	cpc	r31, r19
    3a56:	a0 f4       	brcc	.+40     	; 0x3a80 <malloc+0x11e>
    3a58:	2e 1b       	sub	r18, r30
    3a5a:	3f 0b       	sbc	r19, r31
    3a5c:	28 17       	cp	r18, r24
    3a5e:	39 07       	cpc	r19, r25
    3a60:	78 f0       	brcs	.+30     	; 0x3a80 <malloc+0x11e>
    3a62:	ac 01       	movw	r20, r24
    3a64:	4e 5f       	subi	r20, 0xFE	; 254
    3a66:	5f 4f       	sbci	r21, 0xFF	; 255
    3a68:	24 17       	cp	r18, r20
    3a6a:	35 07       	cpc	r19, r21
    3a6c:	48 f0       	brcs	.+18     	; 0x3a80 <malloc+0x11e>
    3a6e:	4e 0f       	add	r20, r30
    3a70:	5f 1f       	adc	r21, r31
    3a72:	50 93 3a 05 	sts	0x053A, r21	; 0x80053a <__brkval+0x1>
    3a76:	40 93 39 05 	sts	0x0539, r20	; 0x800539 <__brkval>
    3a7a:	81 93       	st	Z+, r24
    3a7c:	91 93       	st	Z+, r25
    3a7e:	02 c0       	rjmp	.+4      	; 0x3a84 <malloc+0x122>
    3a80:	e0 e0       	ldi	r30, 0x00	; 0
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	cf 01       	movw	r24, r30
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	08 95       	ret

00003a8c <free>:
    3a8c:	0f 93       	push	r16
    3a8e:	1f 93       	push	r17
    3a90:	cf 93       	push	r28
    3a92:	df 93       	push	r29
    3a94:	00 97       	sbiw	r24, 0x00	; 0
    3a96:	09 f4       	brne	.+2      	; 0x3a9a <free+0xe>
    3a98:	8c c0       	rjmp	.+280    	; 0x3bb2 <free+0x126>
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	32 97       	sbiw	r30, 0x02	; 2
    3a9e:	13 82       	std	Z+3, r1	; 0x03
    3aa0:	12 82       	std	Z+2, r1	; 0x02
    3aa2:	00 91 3b 05 	lds	r16, 0x053B	; 0x80053b <__flp>
    3aa6:	10 91 3c 05 	lds	r17, 0x053C	; 0x80053c <__flp+0x1>
    3aaa:	01 15       	cp	r16, r1
    3aac:	11 05       	cpc	r17, r1
    3aae:	81 f4       	brne	.+32     	; 0x3ad0 <free+0x44>
    3ab0:	20 81       	ld	r18, Z
    3ab2:	31 81       	ldd	r19, Z+1	; 0x01
    3ab4:	82 0f       	add	r24, r18
    3ab6:	93 1f       	adc	r25, r19
    3ab8:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <__brkval>
    3abc:	30 91 3a 05 	lds	r19, 0x053A	; 0x80053a <__brkval+0x1>
    3ac0:	28 17       	cp	r18, r24
    3ac2:	39 07       	cpc	r19, r25
    3ac4:	79 f5       	brne	.+94     	; 0x3b24 <free+0x98>
    3ac6:	f0 93 3a 05 	sts	0x053A, r31	; 0x80053a <__brkval+0x1>
    3aca:	e0 93 39 05 	sts	0x0539, r30	; 0x800539 <__brkval>
    3ace:	71 c0       	rjmp	.+226    	; 0x3bb2 <free+0x126>
    3ad0:	d8 01       	movw	r26, r16
    3ad2:	40 e0       	ldi	r20, 0x00	; 0
    3ad4:	50 e0       	ldi	r21, 0x00	; 0
    3ad6:	ae 17       	cp	r26, r30
    3ad8:	bf 07       	cpc	r27, r31
    3ada:	50 f4       	brcc	.+20     	; 0x3af0 <free+0x64>
    3adc:	12 96       	adiw	r26, 0x02	; 2
    3ade:	2d 91       	ld	r18, X+
    3ae0:	3c 91       	ld	r19, X
    3ae2:	13 97       	sbiw	r26, 0x03	; 3
    3ae4:	ad 01       	movw	r20, r26
    3ae6:	21 15       	cp	r18, r1
    3ae8:	31 05       	cpc	r19, r1
    3aea:	09 f1       	breq	.+66     	; 0x3b2e <free+0xa2>
    3aec:	d9 01       	movw	r26, r18
    3aee:	f3 cf       	rjmp	.-26     	; 0x3ad6 <free+0x4a>
    3af0:	9d 01       	movw	r18, r26
    3af2:	da 01       	movw	r26, r20
    3af4:	33 83       	std	Z+3, r19	; 0x03
    3af6:	22 83       	std	Z+2, r18	; 0x02
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	86 0f       	add	r24, r22
    3afe:	97 1f       	adc	r25, r23
    3b00:	82 17       	cp	r24, r18
    3b02:	93 07       	cpc	r25, r19
    3b04:	69 f4       	brne	.+26     	; 0x3b20 <free+0x94>
    3b06:	ec 01       	movw	r28, r24
    3b08:	28 81       	ld	r18, Y
    3b0a:	39 81       	ldd	r19, Y+1	; 0x01
    3b0c:	26 0f       	add	r18, r22
    3b0e:	37 1f       	adc	r19, r23
    3b10:	2e 5f       	subi	r18, 0xFE	; 254
    3b12:	3f 4f       	sbci	r19, 0xFF	; 255
    3b14:	31 83       	std	Z+1, r19	; 0x01
    3b16:	20 83       	st	Z, r18
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1c:	93 83       	std	Z+3, r25	; 0x03
    3b1e:	82 83       	std	Z+2, r24	; 0x02
    3b20:	45 2b       	or	r20, r21
    3b22:	29 f4       	brne	.+10     	; 0x3b2e <free+0xa2>
    3b24:	f0 93 3c 05 	sts	0x053C, r31	; 0x80053c <__flp+0x1>
    3b28:	e0 93 3b 05 	sts	0x053B, r30	; 0x80053b <__flp>
    3b2c:	42 c0       	rjmp	.+132    	; 0x3bb2 <free+0x126>
    3b2e:	13 96       	adiw	r26, 0x03	; 3
    3b30:	fc 93       	st	X, r31
    3b32:	ee 93       	st	-X, r30
    3b34:	12 97       	sbiw	r26, 0x02	; 2
    3b36:	ed 01       	movw	r28, r26
    3b38:	49 91       	ld	r20, Y+
    3b3a:	59 91       	ld	r21, Y+
    3b3c:	9e 01       	movw	r18, r28
    3b3e:	24 0f       	add	r18, r20
    3b40:	35 1f       	adc	r19, r21
    3b42:	e2 17       	cp	r30, r18
    3b44:	f3 07       	cpc	r31, r19
    3b46:	71 f4       	brne	.+28     	; 0x3b64 <free+0xd8>
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	84 0f       	add	r24, r20
    3b4e:	95 1f       	adc	r25, r21
    3b50:	02 96       	adiw	r24, 0x02	; 2
    3b52:	11 96       	adiw	r26, 0x01	; 1
    3b54:	9c 93       	st	X, r25
    3b56:	8e 93       	st	-X, r24
    3b58:	82 81       	ldd	r24, Z+2	; 0x02
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	13 96       	adiw	r26, 0x03	; 3
    3b5e:	9c 93       	st	X, r25
    3b60:	8e 93       	st	-X, r24
    3b62:	12 97       	sbiw	r26, 0x02	; 2
    3b64:	e0 e0       	ldi	r30, 0x00	; 0
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	d8 01       	movw	r26, r16
    3b6a:	12 96       	adiw	r26, 0x02	; 2
    3b6c:	8d 91       	ld	r24, X+
    3b6e:	9c 91       	ld	r25, X
    3b70:	13 97       	sbiw	r26, 0x03	; 3
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	19 f0       	breq	.+6      	; 0x3b7c <free+0xf0>
    3b76:	f8 01       	movw	r30, r16
    3b78:	8c 01       	movw	r16, r24
    3b7a:	f6 cf       	rjmp	.-20     	; 0x3b68 <free+0xdc>
    3b7c:	8d 91       	ld	r24, X+
    3b7e:	9c 91       	ld	r25, X
    3b80:	98 01       	movw	r18, r16
    3b82:	2e 5f       	subi	r18, 0xFE	; 254
    3b84:	3f 4f       	sbci	r19, 0xFF	; 255
    3b86:	82 0f       	add	r24, r18
    3b88:	93 1f       	adc	r25, r19
    3b8a:	20 91 39 05 	lds	r18, 0x0539	; 0x800539 <__brkval>
    3b8e:	30 91 3a 05 	lds	r19, 0x053A	; 0x80053a <__brkval+0x1>
    3b92:	28 17       	cp	r18, r24
    3b94:	39 07       	cpc	r19, r25
    3b96:	69 f4       	brne	.+26     	; 0x3bb2 <free+0x126>
    3b98:	30 97       	sbiw	r30, 0x00	; 0
    3b9a:	29 f4       	brne	.+10     	; 0x3ba6 <free+0x11a>
    3b9c:	10 92 3c 05 	sts	0x053C, r1	; 0x80053c <__flp+0x1>
    3ba0:	10 92 3b 05 	sts	0x053B, r1	; 0x80053b <__flp>
    3ba4:	02 c0       	rjmp	.+4      	; 0x3baa <free+0x11e>
    3ba6:	13 82       	std	Z+3, r1	; 0x03
    3ba8:	12 82       	std	Z+2, r1	; 0x02
    3baa:	10 93 3a 05 	sts	0x053A, r17	; 0x80053a <__brkval+0x1>
    3bae:	00 93 39 05 	sts	0x0539, r16	; 0x800539 <__brkval>
    3bb2:	df 91       	pop	r29
    3bb4:	cf 91       	pop	r28
    3bb6:	1f 91       	pop	r17
    3bb8:	0f 91       	pop	r16
    3bba:	08 95       	ret

00003bbc <strtoul>:
    3bbc:	a6 e0       	ldi	r26, 0x06	; 6
    3bbe:	b0 e0       	ldi	r27, 0x00	; 0
    3bc0:	e4 ee       	ldi	r30, 0xE4	; 228
    3bc2:	fd e1       	ldi	r31, 0x1D	; 29
    3bc4:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__prologue_saves__>
    3bc8:	5c 01       	movw	r10, r24
    3bca:	6b 01       	movw	r12, r22
    3bcc:	7a 01       	movw	r14, r20
    3bce:	61 15       	cp	r22, r1
    3bd0:	71 05       	cpc	r23, r1
    3bd2:	19 f0       	breq	.+6      	; 0x3bda <strtoul+0x1e>
    3bd4:	db 01       	movw	r26, r22
    3bd6:	8d 93       	st	X+, r24
    3bd8:	9c 93       	st	X, r25
    3bda:	e1 14       	cp	r14, r1
    3bdc:	f1 04       	cpc	r15, r1
    3bde:	29 f0       	breq	.+10     	; 0x3bea <strtoul+0x2e>
    3be0:	c7 01       	movw	r24, r14
    3be2:	02 97       	sbiw	r24, 0x02	; 2
    3be4:	83 97       	sbiw	r24, 0x23	; 35
    3be6:	08 f0       	brcs	.+2      	; 0x3bea <strtoul+0x2e>
    3be8:	dc c0       	rjmp	.+440    	; 0x3da2 <strtoul+0x1e6>
    3bea:	35 01       	movw	r6, r10
    3bec:	bf ef       	ldi	r27, 0xFF	; 255
    3bee:	6b 1a       	sub	r6, r27
    3bf0:	7b 0a       	sbc	r7, r27
    3bf2:	f5 01       	movw	r30, r10
    3bf4:	10 81       	ld	r17, Z
    3bf6:	81 2f       	mov	r24, r17
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	0e 94 f0 1e 	call	0x3de0	; 0x3de0 <isspace>
    3bfe:	89 2b       	or	r24, r25
    3c00:	11 f0       	breq	.+4      	; 0x3c06 <strtoul+0x4a>
    3c02:	53 01       	movw	r10, r6
    3c04:	f2 cf       	rjmp	.-28     	; 0x3bea <strtoul+0x2e>
    3c06:	1d 32       	cpi	r17, 0x2D	; 45
    3c08:	49 f4       	brne	.+18     	; 0x3c1c <strtoul+0x60>
    3c0a:	35 01       	movw	r6, r10
    3c0c:	f2 e0       	ldi	r31, 0x02	; 2
    3c0e:	6f 0e       	add	r6, r31
    3c10:	71 1c       	adc	r7, r1
    3c12:	d5 01       	movw	r26, r10
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	1c 91       	ld	r17, X
    3c18:	01 e0       	ldi	r16, 0x01	; 1
    3c1a:	09 c0       	rjmp	.+18     	; 0x3c2e <strtoul+0x72>
    3c1c:	1b 32       	cpi	r17, 0x2B	; 43
    3c1e:	31 f4       	brne	.+12     	; 0x3c2c <strtoul+0x70>
    3c20:	35 01       	movw	r6, r10
    3c22:	b2 e0       	ldi	r27, 0x02	; 2
    3c24:	6b 0e       	add	r6, r27
    3c26:	71 1c       	adc	r7, r1
    3c28:	f5 01       	movw	r30, r10
    3c2a:	11 81       	ldd	r17, Z+1	; 0x01
    3c2c:	00 e0       	ldi	r16, 0x00	; 0
    3c2e:	e1 14       	cp	r14, r1
    3c30:	f1 04       	cpc	r15, r1
    3c32:	09 f4       	brne	.+2      	; 0x3c36 <strtoul+0x7a>
    3c34:	c4 c0       	rjmp	.+392    	; 0x3dbe <strtoul+0x202>
    3c36:	f0 e1       	ldi	r31, 0x10	; 16
    3c38:	ef 16       	cp	r14, r31
    3c3a:	f1 04       	cpc	r15, r1
    3c3c:	89 f4       	brne	.+34     	; 0x3c60 <strtoul+0xa4>
    3c3e:	10 33       	cpi	r17, 0x30	; 48
    3c40:	99 f5       	brne	.+102    	; 0x3ca8 <strtoul+0xec>
    3c42:	d3 01       	movw	r26, r6
    3c44:	8c 91       	ld	r24, X
    3c46:	8f 7d       	andi	r24, 0xDF	; 223
    3c48:	88 35       	cpi	r24, 0x58	; 88
    3c4a:	09 f0       	breq	.+2      	; 0x3c4e <strtoul+0x92>
    3c4c:	b2 c0       	rjmp	.+356    	; 0x3db2 <strtoul+0x1f6>
    3c4e:	11 96       	adiw	r26, 0x01	; 1
    3c50:	1c 91       	ld	r17, X
    3c52:	b2 e0       	ldi	r27, 0x02	; 2
    3c54:	6b 0e       	add	r6, r27
    3c56:	71 1c       	adc	r7, r1
    3c58:	02 60       	ori	r16, 0x02	; 2
    3c5a:	50 e1       	ldi	r21, 0x10	; 16
    3c5c:	e5 2e       	mov	r14, r21
    3c5e:	f1 2c       	mov	r15, r1
    3c60:	ea e0       	ldi	r30, 0x0A	; 10
    3c62:	ee 16       	cp	r14, r30
    3c64:	f1 04       	cpc	r15, r1
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <strtoul+0xae>
    3c68:	b0 c0       	rjmp	.+352    	; 0x3dca <strtoul+0x20e>
    3c6a:	f0 e1       	ldi	r31, 0x10	; 16
    3c6c:	ef 16       	cp	r14, r31
    3c6e:	f1 04       	cpc	r15, r1
    3c70:	d9 f0       	breq	.+54     	; 0x3ca8 <strtoul+0xec>
    3c72:	28 e0       	ldi	r18, 0x08	; 8
    3c74:	e2 16       	cp	r14, r18
    3c76:	f1 04       	cpc	r15, r1
    3c78:	51 f4       	brne	.+20     	; 0x3c8e <strtoul+0xd2>
    3c7a:	38 e0       	ldi	r19, 0x08	; 8
    3c7c:	e3 2e       	mov	r14, r19
    3c7e:	f1 2c       	mov	r15, r1
    3c80:	88 24       	eor	r8, r8
    3c82:	8a 94       	dec	r8
    3c84:	98 2c       	mov	r9, r8
    3c86:	a8 2c       	mov	r10, r8
    3c88:	4f e1       	ldi	r20, 0x1F	; 31
    3c8a:	b4 2e       	mov	r11, r20
    3c8c:	13 c0       	rjmp	.+38     	; 0x3cb4 <strtoul+0xf8>
    3c8e:	6f ef       	ldi	r22, 0xFF	; 255
    3c90:	7f ef       	ldi	r23, 0xFF	; 255
    3c92:	cb 01       	movw	r24, r22
    3c94:	97 01       	movw	r18, r14
    3c96:	0f 2c       	mov	r0, r15
    3c98:	00 0c       	add	r0, r0
    3c9a:	44 0b       	sbc	r20, r20
    3c9c:	55 0b       	sbc	r21, r21
    3c9e:	0e 94 6f 1c 	call	0x38de	; 0x38de <__udivmodsi4>
    3ca2:	49 01       	movw	r8, r18
    3ca4:	5a 01       	movw	r10, r20
    3ca6:	06 c0       	rjmp	.+12     	; 0x3cb4 <strtoul+0xf8>
    3ca8:	88 24       	eor	r8, r8
    3caa:	8a 94       	dec	r8
    3cac:	98 2c       	mov	r9, r8
    3cae:	a8 2c       	mov	r10, r8
    3cb0:	2f e0       	ldi	r18, 0x0F	; 15
    3cb2:	b2 2e       	mov	r11, r18
    3cb4:	7e 82       	std	Y+6, r7	; 0x06
    3cb6:	6d 82       	std	Y+5, r6	; 0x05
    3cb8:	60 e0       	ldi	r22, 0x00	; 0
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	a9 01       	movw	r20, r18
    3cc0:	27 01       	movw	r4, r14
    3cc2:	0f 2c       	mov	r0, r15
    3cc4:	00 0c       	add	r0, r0
    3cc6:	66 08       	sbc	r6, r6
    3cc8:	77 08       	sbc	r7, r7
    3cca:	2d 80       	ldd	r2, Y+5	; 0x05
    3ccc:	3e 80       	ldd	r3, Y+6	; 0x06
    3cce:	e0 ed       	ldi	r30, 0xD0	; 208
    3cd0:	e1 0f       	add	r30, r17
    3cd2:	ea 30       	cpi	r30, 0x0A	; 10
    3cd4:	60 f0       	brcs	.+24     	; 0x3cee <strtoul+0x132>
    3cd6:	8f eb       	ldi	r24, 0xBF	; 191
    3cd8:	81 0f       	add	r24, r17
    3cda:	8a 31       	cpi	r24, 0x1A	; 26
    3cdc:	10 f4       	brcc	.+4      	; 0x3ce2 <strtoul+0x126>
    3cde:	e9 ec       	ldi	r30, 0xC9	; 201
    3ce0:	05 c0       	rjmp	.+10     	; 0x3cec <strtoul+0x130>
    3ce2:	8f e9       	ldi	r24, 0x9F	; 159
    3ce4:	81 0f       	add	r24, r17
    3ce6:	8a 31       	cpi	r24, 0x1A	; 26
    3ce8:	90 f5       	brcc	.+100    	; 0x3d4e <strtoul+0x192>
    3cea:	e9 ea       	ldi	r30, 0xA9	; 169
    3cec:	e1 0f       	add	r30, r17
    3cee:	8e 2f       	mov	r24, r30
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	8e 15       	cp	r24, r14
    3cf4:	9f 05       	cpc	r25, r15
    3cf6:	5c f5       	brge	.+86     	; 0x3d4e <strtoul+0x192>
    3cf8:	6f 3f       	cpi	r22, 0xFF	; 255
    3cfa:	09 f1       	breq	.+66     	; 0x3d3e <strtoul+0x182>
    3cfc:	82 16       	cp	r8, r18
    3cfe:	93 06       	cpc	r9, r19
    3d00:	a4 06       	cpc	r10, r20
    3d02:	b5 06       	cpc	r11, r21
    3d04:	d8 f0       	brcs	.+54     	; 0x3d3c <strtoul+0x180>
    3d06:	c3 01       	movw	r24, r6
    3d08:	b2 01       	movw	r22, r4
    3d0a:	0e 94 5f 1c 	call	0x38be	; 0x38be <__mulsi3>
    3d0e:	2e 2f       	mov	r18, r30
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	50 e0       	ldi	r21, 0x00	; 0
    3d16:	29 83       	std	Y+1, r18	; 0x01
    3d18:	3a 83       	std	Y+2, r19	; 0x02
    3d1a:	4b 83       	std	Y+3, r20	; 0x03
    3d1c:	5c 83       	std	Y+4, r21	; 0x04
    3d1e:	26 0f       	add	r18, r22
    3d20:	37 1f       	adc	r19, r23
    3d22:	48 1f       	adc	r20, r24
    3d24:	59 1f       	adc	r21, r25
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2a:	ab 81       	ldd	r26, Y+3	; 0x03
    3d2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3d2e:	28 17       	cp	r18, r24
    3d30:	39 07       	cpc	r19, r25
    3d32:	4a 07       	cpc	r20, r26
    3d34:	5b 07       	cpc	r21, r27
    3d36:	10 f0       	brcs	.+4      	; 0x3d3c <strtoul+0x180>
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	01 c0       	rjmp	.+2      	; 0x3d3e <strtoul+0x182>
    3d3c:	6f ef       	ldi	r22, 0xFF	; 255
    3d3e:	ed 81       	ldd	r30, Y+5	; 0x05
    3d40:	fe 81       	ldd	r31, Y+6	; 0x06
    3d42:	31 96       	adiw	r30, 0x01	; 1
    3d44:	fe 83       	std	Y+6, r31	; 0x06
    3d46:	ed 83       	std	Y+5, r30	; 0x05
    3d48:	d1 01       	movw	r26, r2
    3d4a:	1c 91       	ld	r17, X
    3d4c:	be cf       	rjmp	.-132    	; 0x3cca <strtoul+0x10e>
    3d4e:	c1 14       	cp	r12, r1
    3d50:	d1 04       	cpc	r13, r1
    3d52:	89 f0       	breq	.+34     	; 0x3d76 <strtoul+0x1ba>
    3d54:	66 23       	and	r22, r22
    3d56:	39 f0       	breq	.+14     	; 0x3d66 <strtoul+0x1aa>
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d5c:	01 97       	sbiw	r24, 0x01	; 1
    3d5e:	f6 01       	movw	r30, r12
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	08 c0       	rjmp	.+16     	; 0x3d76 <strtoul+0x1ba>
    3d66:	01 ff       	sbrs	r16, 1
    3d68:	06 c0       	rjmp	.+12     	; 0x3d76 <strtoul+0x1ba>
    3d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6e:	02 97       	sbiw	r24, 0x02	; 2
    3d70:	d6 01       	movw	r26, r12
    3d72:	8d 93       	st	X+, r24
    3d74:	9c 93       	st	X, r25
    3d76:	00 ff       	sbrs	r16, 0
    3d78:	07 c0       	rjmp	.+14     	; 0x3d88 <strtoul+0x1cc>
    3d7a:	50 95       	com	r21
    3d7c:	40 95       	com	r20
    3d7e:	30 95       	com	r19
    3d80:	21 95       	neg	r18
    3d82:	3f 4f       	sbci	r19, 0xFF	; 255
    3d84:	4f 4f       	sbci	r20, 0xFF	; 255
    3d86:	5f 4f       	sbci	r21, 0xFF	; 255
    3d88:	67 ff       	sbrs	r22, 7
    3d8a:	10 c0       	rjmp	.+32     	; 0x3dac <strtoul+0x1f0>
    3d8c:	82 e2       	ldi	r24, 0x22	; 34
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	90 93 3e 05 	sts	0x053E, r25	; 0x80053e <errno+0x1>
    3d94:	80 93 3d 05 	sts	0x053D, r24	; 0x80053d <errno>
    3d98:	6f ef       	ldi	r22, 0xFF	; 255
    3d9a:	7f ef       	ldi	r23, 0xFF	; 255
    3d9c:	8f ef       	ldi	r24, 0xFF	; 255
    3d9e:	9f ef       	ldi	r25, 0xFF	; 255
    3da0:	1b c0       	rjmp	.+54     	; 0x3dd8 <strtoul+0x21c>
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	70 e0       	ldi	r23, 0x00	; 0
    3da6:	80 e0       	ldi	r24, 0x00	; 0
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	16 c0       	rjmp	.+44     	; 0x3dd8 <strtoul+0x21c>
    3dac:	b9 01       	movw	r22, r18
    3dae:	ca 01       	movw	r24, r20
    3db0:	13 c0       	rjmp	.+38     	; 0x3dd8 <strtoul+0x21c>
    3db2:	10 e3       	ldi	r17, 0x30	; 48
    3db4:	e1 14       	cp	r14, r1
    3db6:	f1 04       	cpc	r15, r1
    3db8:	09 f4       	brne	.+2      	; 0x3dbc <strtoul+0x200>
    3dba:	5f cf       	rjmp	.-322    	; 0x3c7a <strtoul+0xbe>
    3dbc:	51 cf       	rjmp	.-350    	; 0x3c60 <strtoul+0xa4>
    3dbe:	10 33       	cpi	r17, 0x30	; 48
    3dc0:	09 f4       	brne	.+2      	; 0x3dc4 <strtoul+0x208>
    3dc2:	3f cf       	rjmp	.-386    	; 0x3c42 <strtoul+0x86>
    3dc4:	9a e0       	ldi	r25, 0x0A	; 10
    3dc6:	e9 2e       	mov	r14, r25
    3dc8:	f1 2c       	mov	r15, r1
    3dca:	89 e9       	ldi	r24, 0x99	; 153
    3dcc:	88 2e       	mov	r8, r24
    3dce:	98 2c       	mov	r9, r8
    3dd0:	a8 2c       	mov	r10, r8
    3dd2:	89 e1       	ldi	r24, 0x19	; 25
    3dd4:	b8 2e       	mov	r11, r24
    3dd6:	6e cf       	rjmp	.-292    	; 0x3cb4 <strtoul+0xf8>
    3dd8:	26 96       	adiw	r28, 0x06	; 6
    3dda:	e2 e1       	ldi	r30, 0x12	; 18
    3ddc:	0c 94 3f 1f 	jmp	0x3e7e	; 0x3e7e <__epilogue_restores__>

00003de0 <isspace>:
    3de0:	91 11       	cpse	r25, r1
    3de2:	0c 94 20 1f 	jmp	0x3e40	; 0x3e40 <__ctype_isfalse>
    3de6:	80 32       	cpi	r24, 0x20	; 32
    3de8:	19 f0       	breq	.+6      	; 0x3df0 <isspace+0x10>
    3dea:	89 50       	subi	r24, 0x09	; 9
    3dec:	85 50       	subi	r24, 0x05	; 5
    3dee:	c8 f7       	brcc	.-14     	; 0x3de2 <isspace+0x2>
    3df0:	08 95       	ret

00003df2 <memcmp>:
    3df2:	fb 01       	movw	r30, r22
    3df4:	dc 01       	movw	r26, r24
    3df6:	04 c0       	rjmp	.+8      	; 0x3e00 <memcmp+0xe>
    3df8:	8d 91       	ld	r24, X+
    3dfa:	01 90       	ld	r0, Z+
    3dfc:	80 19       	sub	r24, r0
    3dfe:	21 f4       	brne	.+8      	; 0x3e08 <memcmp+0x16>
    3e00:	41 50       	subi	r20, 0x01	; 1
    3e02:	50 40       	sbci	r21, 0x00	; 0
    3e04:	c8 f7       	brcc	.-14     	; 0x3df8 <memcmp+0x6>
    3e06:	88 1b       	sub	r24, r24
    3e08:	99 0b       	sbc	r25, r25
    3e0a:	08 95       	ret

00003e0c <strchr>:
    3e0c:	fc 01       	movw	r30, r24
    3e0e:	81 91       	ld	r24, Z+
    3e10:	86 17       	cp	r24, r22
    3e12:	21 f0       	breq	.+8      	; 0x3e1c <strchr+0x10>
    3e14:	88 23       	and	r24, r24
    3e16:	d9 f7       	brne	.-10     	; 0x3e0e <strchr+0x2>
    3e18:	99 27       	eor	r25, r25
    3e1a:	08 95       	ret
    3e1c:	31 97       	sbiw	r30, 0x01	; 1
    3e1e:	cf 01       	movw	r24, r30
    3e20:	08 95       	ret

00003e22 <strncpy>:
    3e22:	fb 01       	movw	r30, r22
    3e24:	dc 01       	movw	r26, r24
    3e26:	41 50       	subi	r20, 0x01	; 1
    3e28:	50 40       	sbci	r21, 0x00	; 0
    3e2a:	48 f0       	brcs	.+18     	; 0x3e3e <strncpy+0x1c>
    3e2c:	01 90       	ld	r0, Z+
    3e2e:	0d 92       	st	X+, r0
    3e30:	00 20       	and	r0, r0
    3e32:	c9 f7       	brne	.-14     	; 0x3e26 <strncpy+0x4>
    3e34:	01 c0       	rjmp	.+2      	; 0x3e38 <strncpy+0x16>
    3e36:	1d 92       	st	X+, r1
    3e38:	41 50       	subi	r20, 0x01	; 1
    3e3a:	50 40       	sbci	r21, 0x00	; 0
    3e3c:	e0 f7       	brcc	.-8      	; 0x3e36 <strncpy+0x14>
    3e3e:	08 95       	ret

00003e40 <__ctype_isfalse>:
    3e40:	99 27       	eor	r25, r25
    3e42:	88 27       	eor	r24, r24

00003e44 <__ctype_istrue>:
    3e44:	08 95       	ret

00003e46 <__prologue_saves__>:
    3e46:	2f 92       	push	r2
    3e48:	3f 92       	push	r3
    3e4a:	4f 92       	push	r4
    3e4c:	5f 92       	push	r5
    3e4e:	6f 92       	push	r6
    3e50:	7f 92       	push	r7
    3e52:	8f 92       	push	r8
    3e54:	9f 92       	push	r9
    3e56:	af 92       	push	r10
    3e58:	bf 92       	push	r11
    3e5a:	cf 92       	push	r12
    3e5c:	df 92       	push	r13
    3e5e:	ef 92       	push	r14
    3e60:	ff 92       	push	r15
    3e62:	0f 93       	push	r16
    3e64:	1f 93       	push	r17
    3e66:	cf 93       	push	r28
    3e68:	df 93       	push	r29
    3e6a:	cd b7       	in	r28, 0x3d	; 61
    3e6c:	de b7       	in	r29, 0x3e	; 62
    3e6e:	ca 1b       	sub	r28, r26
    3e70:	db 0b       	sbc	r29, r27
    3e72:	0f b6       	in	r0, 0x3f	; 63
    3e74:	f8 94       	cli
    3e76:	de bf       	out	0x3e, r29	; 62
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	cd bf       	out	0x3d, r28	; 61
    3e7c:	09 94       	ijmp

00003e7e <__epilogue_restores__>:
    3e7e:	2a 88       	ldd	r2, Y+18	; 0x12
    3e80:	39 88       	ldd	r3, Y+17	; 0x11
    3e82:	48 88       	ldd	r4, Y+16	; 0x10
    3e84:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e86:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e88:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e90:	b9 84       	ldd	r11, Y+9	; 0x09
    3e92:	c8 84       	ldd	r12, Y+8	; 0x08
    3e94:	df 80       	ldd	r13, Y+7	; 0x07
    3e96:	ee 80       	ldd	r14, Y+6	; 0x06
    3e98:	fd 80       	ldd	r15, Y+5	; 0x05
    3e9a:	0c 81       	ldd	r16, Y+4	; 0x04
    3e9c:	1b 81       	ldd	r17, Y+3	; 0x03
    3e9e:	aa 81       	ldd	r26, Y+2	; 0x02
    3ea0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ea2:	ce 0f       	add	r28, r30
    3ea4:	d1 1d       	adc	r29, r1
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	f8 94       	cli
    3eaa:	de bf       	out	0x3e, r29	; 62
    3eac:	0f be       	out	0x3f, r0	; 63
    3eae:	cd bf       	out	0x3d, r28	; 61
    3eb0:	ed 01       	movw	r28, r26
    3eb2:	08 95       	ret

00003eb4 <_exit>:
    3eb4:	f8 94       	cli

00003eb6 <__stop_program>:
    3eb6:	ff cf       	rjmp	.-2      	; 0x3eb6 <__stop_program>
